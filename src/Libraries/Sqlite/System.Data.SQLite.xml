<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Data.SQLite</name>
    </assembly>
    <members>
        <member name="T:System.Data.SQLite.AssemblySourceIdAttribute">
            <summary>
            Defines a source code identifier custom attribute for an assembly
            manifest.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.AssemblySourceIdAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of this attribute class using the specified
            source code identifier value.
            </summary>
            <param name="value">
            The source code identifier value to use.
            </param>
        </member>
        <member name="P:System.Data.SQLite.AssemblySourceIdAttribute.SourceId">
            <summary>
            Gets the source code identifier value.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.AssemblySourceTimeStampAttribute">
            <summary>
            Defines a source code time-stamp custom attribute for an assembly
            manifest.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.AssemblySourceTimeStampAttribute.#ctor(System.String)">
            <summary>
            Constructs an instance of this attribute class using the specified
            source code time-stamp value.
            </summary>
            <param name="value">
            The source code time-stamp value to use.
            </param>
        </member>
        <member name="P:System.Data.SQLite.AssemblySourceTimeStampAttribute.SourceTimeStamp">
            <summary>
            Gets the source code time-stamp value.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteLogCallback">
             <summary>
             This is the method signature for the SQLite core library logging callback
             function for use with sqlite3_log() and the SQLITE_CONFIG_LOG.
            
             WARNING: This delegate is used more-or-less directly by native code, do
                      not modify its type signature.
             </summary>
             <param name="pUserData">
             The extra data associated with this message, if any.
             </param>
             <param name="errorCode">
             The error code associated with this message.
             </param>
             <param name="pMessage">
             The message string to be logged.
             </param>
        </member>
        <member name="T:System.Data.SQLite.SQLite3">
            <summary>
            This class implements SQLiteBase completely, and is the guts of the code that interop's SQLite with .NET
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteBase">
            <summary>
            This internal class provides the foundation of SQLite support.  It defines all the abstract members needed to implement
            a SQLite data provider, and inherits from SQLiteConvert which allows for simple translations of string to and from SQLite.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConvert">
            <summary>
            This base class provides datatype conversion services for the SQLite provider.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.FallbackDefaultDbType">
            <summary>
            The fallback default database type when one cannot be obtained from an
            existing connection instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.FullFormat">
            <summary>
            The format string for DateTime values when using the InvariantCulture or CurrentCulture formats.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.FallbackDefaultTypeName">
            <summary>
            The fallback default database type name when one cannot be obtained from
            an existing connection instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.UnixEpoch">
            <summary>
            The value for the Unix epoch (e.g. January 1, 1970 at midnight, in UTC).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert.OleAutomationEpochAsJulianDay">
            <summary>
            The value of the OLE Automation epoch represented as a Julian day.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormats">
            <summary>
            An array of ISO-8601 DateTime formats that we support parsing.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormatUtc">
            <summary>
            The internal default format for UTC DateTime values when converting
            to a string.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormatLocal">
            <summary>
            The internal default format for local DateTime values when converting
            to a string.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._utf8">
            <summary>
            An UTF-8 Encoding instance, so we can convert strings to and from UTF-8
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormat">
            <summary>
            The default DateTime format for this instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeKind">
            <summary>
            The default DateTimeKind for this instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConvert._datetimeFormatString">
            <summary>
            The default DateTime format string for this instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.#ctor(System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String)">
            <summary>
            Initializes the conversion class
            </summary>
            <param name="fmt">The default date/time format to use for this instance</param>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="fmtString">The DateTime format string to use.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToUTF8(System.String)">
            <summary>
            Converts a string to a UTF-8 encoded byte array sized to include a null-terminating character.
            </summary>
            <param name="sourceText">The string to convert to UTF-8</param>
            <returns>A byte array containing the converted string plus an extra 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToUTF8(System.DateTime)">
            <summary>
            Convert a DateTime to a UTF-8 encoded, zero-terminated byte array.
            </summary>
            <remarks>
            This function is a convenience function, which first calls ToString() on the DateTime, and then calls ToUTF8() with the
            string result.
            </remarks>
            <param name="dateTimeValue">The DateTime to convert.</param>
            <returns>The UTF-8 encoded string, including a 0 terminating byte at the end of the array.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.UTF8ToString(System.IntPtr,System.Int32)">
            <summary>
            Converts a UTF-8 encoded IntPtr of the specified length into a .NET string
            </summary>
            <param name="nativestring">The pointer to the memory where the UTF-8 string is encoded</param>
            <param name="nativestringlen">The number of bytes to decode</param>
            <returns>A string containing the translated character(s)</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.String)">
            <summary>
            Converts a string into a DateTime, using the DateTimeFormat, DateTimeKind,
            and DateTimeFormatString specified for the connection when it was opened.
            </summary>
            <remarks>
            Acceptable ISO8601 DateTime formats are:
            <list type="bullet">
            <item><description>THHmmssK</description></item>
            <item><description>THHmmK</description></item>
            <item><description>HH:mm:ss.FFFFFFFK</description></item>
            <item><description>HH:mm:ssK</description></item>
            <item><description>HH:mmK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ssK</description></item>
            <item><description>yyyy-MM-dd HH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-ddTHH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ssK</description></item>
            <item><description>yyyyMMddHHmmssK</description></item>
            <item><description>yyyyMMddHHmmK</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFFK</description></item>
            <item><description>THHmmss</description></item>
            <item><description>THHmm</description></item>
            <item><description>HH:mm:ss.FFFFFFF</description></item>
            <item><description>HH:mm:ss</description></item>
            <item><description>HH:mm</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss</description></item>
            <item><description>yyyy-MM-dd HH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-ddTHH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss</description></item>
            <item><description>yyyyMMddHHmmss</description></item>
            <item><description>yyyyMMddHHmm</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFF</description></item>
            <item><description>yyyy-MM-dd</description></item>
            <item><description>yyyyMMdd</description></item>
            <item><description>yy-MM-dd</description></item>
            </list>
            If the string cannot be matched to one of the above formats -OR-
            the DateTimeFormatString if one was provided, an exception will
            be thrown.
            </remarks>
            <param name="dateText">The string containing either a long integer number of 100-nanosecond units since
            System.DateTime.MinValue, a Julian day double, an integer number of seconds since the Unix epoch, a
            culture-independent formatted date and time string, a formatted date and time string in the current
            culture, or an ISO8601-format string.</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.String,System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String)">
            <summary>
            Converts a string into a DateTime, using the specified DateTimeFormat,
            DateTimeKind and DateTimeFormatString.
            </summary>
            <remarks>
            Acceptable ISO8601 DateTime formats are:
            <list type="bullet">
            <item><description>THHmmssK</description></item>
            <item><description>THHmmK</description></item>
            <item><description>HH:mm:ss.FFFFFFFK</description></item>
            <item><description>HH:mm:ssK</description></item>
            <item><description>HH:mmK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-dd HH:mm:ssK</description></item>
            <item><description>yyyy-MM-dd HH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFFK</description></item>
            <item><description>yyyy-MM-ddTHH:mmK</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ssK</description></item>
            <item><description>yyyyMMddHHmmssK</description></item>
            <item><description>yyyyMMddHHmmK</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFFK</description></item>
            <item><description>THHmmss</description></item>
            <item><description>THHmm</description></item>
            <item><description>HH:mm:ss.FFFFFFF</description></item>
            <item><description>HH:mm:ss</description></item>
            <item><description>HH:mm</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-dd HH:mm:ss</description></item>
            <item><description>yyyy-MM-dd HH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss.FFFFFFF</description></item>
            <item><description>yyyy-MM-ddTHH:mm</description></item>
            <item><description>yyyy-MM-ddTHH:mm:ss</description></item>
            <item><description>yyyyMMddHHmmss</description></item>
            <item><description>yyyyMMddHHmm</description></item>
            <item><description>yyyyMMddTHHmmssFFFFFFF</description></item>
            <item><description>yyyy-MM-dd</description></item>
            <item><description>yyyyMMdd</description></item>
            <item><description>yy-MM-dd</description></item>
            </list>
            If the string cannot be matched to one of the above formats -OR-
            the DateTimeFormatString if one was provided, an exception will
            be thrown.
            </remarks>
            <param name="dateText">The string containing either a long integer number of 100-nanosecond units since
            System.DateTime.MinValue, a Julian day double, an integer number of seconds since the Unix epoch, a
            culture-independent formatted date and time string, a formatted date and time string in the current
            culture, or an ISO8601-format string.</param>
            <param name="format">The SQLiteDateFormats to use.</param>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="formatString">The DateTime format string to use.</param>
            <returns>A DateTime value</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.Double)">
            <summary>
            Converts a julianday value into a DateTime
            </summary>
            <param name="julianDay">The value to convert</param>
            <returns>A .NET DateTime</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.Double,System.DateTimeKind)">
            <summary>
            Converts a julianday value into a DateTime
            </summary>
            <param name="julianDay">The value to convert</param>
            <param name="kind">The DateTimeKind to use.</param>
            <returns>A .NET DateTime</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.Int32,System.DateTimeKind)">
            <summary>
            Converts the specified number of seconds from the Unix epoch into a
            <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="seconds">
            The number of whole seconds since the Unix epoch.
            </param>
            <param name="kind">
            Either Utc or Local time.
            </param>
            <returns>
            The new <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.Int64,System.DateTimeKind)">
            <summary>
            Converts the specified number of ticks since the epoch into a
            <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="ticks">
            The number of whole ticks since the epoch.
            </param>
            <param name="kind">
            Either Utc or Local time.
            </param>
            <returns>
            The new <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToJulianDay(System.DateTime)">
            <summary>
            Converts a DateTime struct to a JulianDay double
            </summary>
            <param name="value">The DateTime to convert</param>
            <returns>The JulianDay value the Datetime represents</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToUnixEpoch(System.DateTime)">
            <summary>
            Converts a DateTime struct to the whole number of seconds since the
            Unix epoch.
            </summary>
            <param name="value">The DateTime to convert</param>
            <returns>The whole number of seconds since the Unix epoch</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetDateTimeKindFormat(System.DateTimeKind,System.String)">
            <summary>
            Returns the DateTime format string to use for the specified DateTimeKind.
            If <paramref name="formatString" /> is not null, it will be returned verbatim.
            </summary>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="formatString">The DateTime format string to use.</param>
            <returns>
            The DateTime format string to use for the specified DateTimeKind.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToString(System.DateTime)">
            <summary>
            Converts a string into a DateTime, using the DateTimeFormat, DateTimeKind,
            and DateTimeFormatString specified for the connection when it was opened.
            </summary>
            <param name="dateValue">The DateTime value to convert</param>
            <returns>Either a string containing the long integer number of 100-nanosecond units since System.DateTime.MinValue, a
            Julian day double, an integer number of seconds since the Unix epoch, a culture-independent formatted date and time
            string, a formatted date and time string in the current culture, or an ISO8601-format date/time string.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToString(System.DateTime,System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String)">
            <summary>
            Converts a string into a DateTime, using the DateTimeFormat, DateTimeKind,
            and DateTimeFormatString specified for the connection when it was opened.
            </summary>
            <param name="dateValue">The DateTime value to convert</param>
            <param name="format">The SQLiteDateFormats to use.</param>
            <param name="kind">The DateTimeKind to use.</param>
            <param name="formatString">The DateTime format string to use.</param>
            <returns>Either a string containing the long integer number of 100-nanosecond units since System.DateTime.MinValue, a
            Julian day double, an integer number of seconds since the Unix epoch, a culture-independent formatted date and time
            string, a formatted date and time string in the current culture, or an ISO8601-format date/time string.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToDateTime(System.IntPtr,System.Int32)">
            <summary>
            Internal function to convert a UTF-8 encoded IntPtr of the specified length to a DateTime.
            </summary>
            <remarks>
            This is a convenience function, which first calls ToString() on the IntPtr to convert it to a string, then calls
            ToDateTime() on the string to return a DateTime.
            </remarks>
            <param name="ptr">A pointer to the UTF-8 encoded string</param>
            <param name="len">The length in bytes of the string</param>
            <returns>The parsed DateTime value</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.Split(System.String,System.Char)">
            <summary>
            Smart method of splitting a string.  Skips quoted elements, removes the quotes.
            </summary>
            <remarks>
            This split function works somewhat like the String.Split() function in that it breaks apart a string into
            pieces and returns the pieces as an array.  The primary differences are:
            <list type="bullet">
            <item><description>Only one character can be provided as a separator character</description></item>
            <item><description>Quoted text inside the string is skipped over when searching for the separator, and the quotes are removed.</description></item>
            </list>
            Thus, if splitting the following string looking for a comma:<br/>
            One,Two, "Three, Four", Five<br/>
            <br/>
            The resulting array would contain<br/>
            [0] One<br/>
            [1] Two<br/>
            [2] Three, Four<br/>
            [3] Five<br/>
            <br/>
            Note that the leading and trailing spaces were removed from each item during the split.
            </remarks>
            <param name="source">Source string to split apart</param>
            <param name="separator">Separator character</param>
            <returns>A string array of the split up elements</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.NewSplit(System.String,System.Char,System.Boolean,System.String@)">
            <summary>
            Splits the specified string into multiple strings based on a separator
            and returns the result as an array of strings.
            </summary>
            <param name="value">
            The string to split into pieces based on the separator character.  If
            this string is null, null will always be returned.  If this string is
            empty, an array of zero strings will always be returned.
            </param>
            <param name="separator">
            The character used to divide the original string into sub-strings.
            This character cannot be a backslash or a double-quote; otherwise, no
            work will be performed and null will be returned.
            </param>
            <param name="keepQuote">
            If this parameter is non-zero, all double-quote characters will be
            retained in the returned list of strings; otherwise, they will be
            dropped.
            </param>
            <param name="error">
            Upon failure, this parameter will be modified to contain an appropriate
            error message.
            </param>
            <returns>
            The new array of strings or null if the input string is null -OR- the
            separator character is a backslash or a double-quote -OR- the string
            contains an unbalanced backslash or double-quote character.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToStringWithProvider(System.Object,System.IFormatProvider)">
            <summary>
            Queries and returns the string representation for an object, using the
            specified (or current) format provider.
            </summary>
            <param name="obj">
            The object instance to return the string representation for.
            </param>
            <param name="provider">
            The format provider to use -OR- null if the current format provider for
            the thread should be used instead.
            </param>
            <returns>
            The string representation for the object instance -OR- null if the
            object instance is also null.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.Object,System.IFormatProvider,System.Boolean)">
            <summary>
            Attempts to convert an arbitrary object to the Boolean data type.
            Null object values are converted to false.  Throws an exception
            upon failure.
            </summary>
            <param name="obj">
            The object value to convert.
            </param>
            <param name="provider">
            The format provider to use.
            </param>
            <param name="viaFramework">
            If non-zero, a string value will be converted using the
            <see cref="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)"/>
            method; otherwise, the <see cref="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.String)"/>
            method will be used.
            </param>
            <returns>
            The converted boolean value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.Object)">
            <summary>
            Convert a value to true or false.
            </summary>
            <param name="source">A string or number representing true or false</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.ToBoolean(System.String)">
            <summary>
            Convert a string to true or false.
            </summary>
            <param name="source">A string representing true or false</param>
            <returns></returns>
            <remarks>
            "yes", "no", "y", "n", "0", "1", "on", "off" as well as Boolean.FalseString and Boolean.TrueString will all be
            converted to a proper boolean value.
            </remarks>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.SQLiteTypeToType(System.Data.SQLite.SQLiteType)">
            <summary>
            Converts a SQLiteType to a .NET Type object
            </summary>
            <param name="t">The SQLiteType to convert</param>
            <returns>Returns a .NET Type object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.TypeToDbType(System.Type)">
            <summary>
            For a given intrinsic type, return a DbType
            </summary>
            <param name="typ">The native type to convert</param>
            <returns>The corresponding (closest match) DbType</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DbTypeToColumnSize(System.Data.DbType)">
            <summary>
            Returns the ColumnSize for the given DbType
            </summary>
            <param name="typ">The DbType to get the size of</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetDefaultTypeName(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Determines the default database type name to be used when a
            per-connection value is not available.
            </summary>
            <param name="connection">
            The connection context for type mappings, if any.
            </param>
            <returns>
            The default database type name to use.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DefaultTypeNameWarning(System.Data.DbType,System.Data.SQLite.SQLiteConnectionFlags,System.String)">
            <summary>
            If applicable, issues a trace log message warning about falling back to
            the default database type name.
            </summary>
            <param name="dbType">
            The database value type.
            </param>
            <param name="flags">
            The flags associated with the parent connection object.
            </param>
            <param name="typeName">
            The textual name of the database type.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DefaultDbTypeWarning(System.String,System.Data.SQLite.SQLiteConnectionFlags,System.Nullable{System.Data.DbType})">
            <summary>
            If applicable, issues a trace log message warning about falling back to
            the default database value type.
            </summary>
            <param name="typeName">
            The textual name of the database type.
            </param>
            <param name="flags">
            The flags associated with the parent connection object.
            </param>
            <param name="dbType">
            The database value type.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DbTypeToTypeName(System.Data.SQLite.SQLiteConnection,System.Data.DbType,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            For a given database value type, return the "closest-match" textual database type name.
            </summary>
            <param name="connection">The connection context for custom type mappings, if any.</param>
            <param name="dbType">The database value type.</param>
            <param name="flags">The flags associated with the parent connection object.</param>
            <returns>The type name or an empty string if it cannot be determined.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.DbTypeToType(System.Data.DbType)">
            <summary>
            Convert a DbType to a Type
            </summary>
            <param name="typ">The DbType to convert from</param>
            <returns>The closest-match .NET type</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.TypeToAffinity(System.Type)">
            <summary>
            For a given type, return the closest-match SQLite TypeAffinity, which only understands a very limited subset of types.
            </summary>
            <param name="typ">The type to evaluate</param>
            <returns>The SQLite type affinity for that type.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetSQLiteDbTypeMap">
            <summary>
            Builds and returns a map containing the database column types
            recognized by this provider.
            </summary>
            <returns>
            A map containing the database column types recognized by this
            provider.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.IsStringDbType(System.Data.DbType)">
            <summary>
            Determines if a database type is considered to be a string.
            </summary>
            <param name="type">
            The database type to check.
            </param>
            <returns>
            Non-zero if the database type is considered to be a string, zero
            otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.SettingValueToString(System.Object)">
            <summary>
            Determines and returns the runtime configuration setting string that
            should be used in place of the specified object value.
            </summary>
            <param name="value">
            The object value to convert to a string.
            </param>
            <returns>
            Either the string to use in place of the object value -OR- null if it
            cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.GetDefaultDbType(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Determines the default <see cref="T:System.Data.DbType"/> value to be used when a
            per-connection value is not available.
            </summary>
            <param name="connection">
            The connection context for type mappings, if any.
            </param>
            <returns>
            The default <see cref="T:System.Data.DbType"/> value to use.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeNull(System.String)">
            <summary>
            Determines if the specified textual value appears to be a
            <see cref="T:System.DBNull"/> value.
            </summary>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like a <see cref="T:System.DBNull"/> value,
            zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeInt64(System.String)">
            <summary>
            Determines if the specified textual value appears to be an
            <see cref="T:System.Int64"/> value.
            </summary>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like an <see cref="T:System.Int64"/> value,
            zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeDouble(System.String)">
            <summary>
            Determines if the specified textual value appears to be a
            <see cref="T:System.Double"/> value.
            </summary>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like a <see cref="T:System.Double"/> value,
            zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.LooksLikeDateTime(System.Data.SQLite.SQLiteConvert,System.String)">
            <summary>
            Determines if the specified textual value appears to be a
            <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="convert">
            The <see cref="T:System.Data.SQLite.SQLiteConvert"/> object instance configured with
            the chosen <see cref="T:System.DateTime"/> format.
            </param>
            <param name="text">
            The textual value to inspect.
            </param>
            <returns>
            Non-zero if the text looks like a <see cref="T:System.DateTime"/> in the
            configured format, zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConvert.TypeNameToDbType(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            For a given textual database type name, return the "closest-match" database type.
            This method is called during query result processing; therefore, its performance
            is critical.
            </summary>
            <param name="connection">The connection context for custom type mappings, if any.</param>
            <param name="typeName">The textual name of the database type to match.</param>
            <param name="flags">The flags associated with the parent connection object.</param>
            <returns>The .NET DBType the text evaluates to.</returns>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBase.COR_E_EXCEPTION">
            <summary>
            The error code used for logging exceptions caught in user-provided
            code.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.SetMemoryStatus(System.Boolean)">
            <summary>
            Sets the status of the memory usage tracking subsystem in the SQLite core library.  By default, this is enabled.
            If this is disabled, memory usage tracking will not be performed.  This is not really a per-connection value, it is
            global to the process.
            </summary>
            <param name="value">Non-zero to enable memory usage tracking, zero otherwise.</param>
            <returns>A standard SQLite return code (i.e. zero for success and non-zero for failure).</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.ReleaseMemory">
            <summary>
            Attempts to free as much heap memory as possible for the database connection.
            </summary>
            <returns>A standard SQLite return code (i.e. zero for success and non-zero for failure).</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Shutdown">
            <summary>
            Shutdown the SQLite engine so that it can be restarted with different config options.
            We depend on auto initialization to recover.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.IsOpen">
            <summary>
            Determines if the associated native connection handle is open.
            </summary>
            <returns>
            Non-zero if a database connection is open.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Open(System.String,System.Data.SQLite.SQLiteConnectionFlags,System.Data.SQLite.SQLiteOpenFlagsEnum,System.Int32,System.Boolean)">
            <summary>
            Opens a database.
            </summary>
            <remarks>
            Implementers should call SQLiteFunction.BindFunctions() and save the array after opening a connection
            to bind all attributed user-defined functions and collating sequences to the new connection.
            </remarks>
            <param name="strFilename">The filename of the database to open.  SQLite automatically creates it if it doesn't exist.</param>
            <param name="connectionFlags">The flags associated with the parent connection object</param>
            <param name="openFlags">The open flags to use when creating the connection</param>
            <param name="maxPoolSize">The maximum size of the pool for the given filename</param>
            <param name="usePool">If true, the connection can be pulled from the connection pool</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Close(System.Boolean)">
            <summary>
            Closes the currently-open database.
            </summary>
            <remarks>
            After the database has been closed implemeters should call SQLiteFunction.UnbindFunctions() to deallocate all interop allocated
            memory associated with the user-defined functions and collating sequences tied to the closed connection.
            </remarks>
            <param name="canThrow">Non-zero if the operation is allowed to throw exceptions, zero otherwise.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.SetTimeout(System.Int32)">
            <summary>
            Sets the busy timeout on the connection.  SQLiteCommand will call this before executing any command.
            </summary>
            <param name="nTimeoutMS">The number of milliseconds to wait before returning SQLITE_BUSY</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.GetLastError">
            <summary>
            Returns the text of the last error issued by SQLite
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.GetLastError(System.String)">
            <summary>
            Returns the text of the last error issued by SQLite -OR- the specified default error text if
            none is available from the SQLite core library.
            </summary>
            <param name="defValue">
            The error text to return in the event that one is not available from the SQLite core library.
            </param>
            <returns>
            The error text.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.ClearPool">
            <summary>
            When pooling is enabled, force this connection to be disposed rather than returned to the pool
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.CountPool">
            <summary>
            When pooling is enabled, returns the number of pool entries matching the current file name.
            </summary>
            <returns>The number of pool entries matching the current file name.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Prepare(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteStatement,System.UInt32,System.String@)">
            <summary>
            Prepares a SQL statement for execution.
            </summary>
            <param name="cnn">The source connection preparing the command.  Can be null for any caller except LINQ</param>
            <param name="strSql">The SQL command text to prepare</param>
            <param name="previous">The previous statement in a multi-statement command, or null if no previous statement exists</param>
            <param name="timeoutMS">The timeout to wait before aborting the prepare</param>
            <param name="strRemain">The remainder of the statement that was not processed.  Each call to prepare parses the
            SQL up to to either the end of the text or to the first semi-colon delimiter.  The remaining text is returned
            here for a subsequent call to Prepare() until all the text has been processed.</param>
            <returns>Returns an initialized SQLiteStatement.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Step(System.Data.SQLite.SQLiteStatement)">
            <summary>
            Steps through a prepared statement.
            </summary>
            <param name="stmt">The SQLiteStatement to step through</param>
            <returns>True if a row was returned, False if not.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Reset(System.Data.SQLite.SQLiteStatement)">
            <summary>
            Resets a prepared statement so it can be executed again.  If the error returned is SQLITE_SCHEMA,
            transparently attempt to rebuild the SQL statement and throw an error if that was not possible.
            </summary>
            <param name="stmt">The statement to reset</param>
            <returns>Returns -1 if the schema changed while resetting, 0 if the reset was sucessful or 6 (SQLITE_LOCKED) if the reset failed due to a lock</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.Cancel">
            <summary>
            Attempts to interrupt the query currently executing on the associated
            native database connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.BindFunction(System.Data.SQLite.SQLiteFunctionAttribute,System.Data.SQLite.SQLiteFunction,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            This function binds a user-defined functions to the connection.
            </summary>
            <param name="functionAttribute">
            The <see cref="T:System.Data.SQLite.SQLiteFunctionAttribute"/> object instance containing
            the metadata for the function to be bound.
            </param>
            <param name="function">
            The <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance that implements the
            function to be bound.
            </param>
            <param name="flags">
            The flags associated with the parent connection object.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.CreateModule(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            Calls the native SQLite core library in order to create a disposable
            module containing the implementation of a virtual table.
            </summary>
            <param name="module">
            The module object to be used when creating the native disposable module.
            </param>
            <param name="flags">
            The flags for the associated <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.DisposeModule(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            Calls the native SQLite core library in order to cleanup the resources
            associated with a module containing the implementation of a virtual table.
            </summary>
            <param name="module">
            The module object previously passed to the <see cref="M:System.Data.SQLite.SQLiteBase.CreateModule(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteConnectionFlags)"/>
            method.
            </param>
            <param name="flags">
            The flags for the associated <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.DeclareVirtualTable(System.Data.SQLite.SQLiteModule,System.String,System.String@)">
            <summary>
            Calls the native SQLite core library in order to declare a virtual table
            in response to a call into the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/>
            or <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> virtual table methods.
            </summary>
            <param name="module">
            The virtual table module that is to be responsible for the virtual table
            being declared.
            </param>
            <param name="strSql">
            The string containing the SQL statement describing the virtual table to
            be declared.
            </param>
            <param name="error">
            Upon success, the contents of this parameter are undefined.  Upon failure,
            it should contain an appropriate error message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.DeclareVirtualFunction(System.Data.SQLite.SQLiteModule,System.Int32,System.String,System.String@)">
            <summary>
            Calls the native SQLite core library in order to declare a virtual table
            function in response to a call into the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/>
            or <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> virtual table methods.
            </summary>
            <param name="module">
            The virtual table module that is to be responsible for the virtual table
            function being declared.
            </param>
            <param name="argumentCount">
            The number of arguments to the function being declared.
            </param>
            <param name="name">
            The name of the function being declared.
            </param>
            <param name="error">
            Upon success, the contents of this parameter are undefined.  Upon failure,
            it should contain an appropriate error message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.SetLoadExtension(System.Boolean)">
            <summary>
            Enables or disabled extension loading by SQLite.
            </summary>
            <param name="bOnOff">
            True to enable loading of extensions, false to disable.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.LoadExtension(System.String,System.String)">
            <summary>
            Loads a SQLite extension library from the named file.
            </summary>
            <param name="fileName">
            The name of the dynamic link library file containing the extension.
            </param>
            <param name="procName">
            The name of the exported function used to initialize the extension.
            If null, the default "sqlite3_extension_init" will be used.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.SetExtendedResultCodes(System.Boolean)">
            <summary>
            Enables or disabled extened result codes returned by SQLite
            </summary>
            <param name="bOnOff">true to enable extended result codes, false to disable.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.ResultCode">
            <summary>
            Returns the numeric result code for the most recent failed SQLite API call
            associated with the database connection.
            </summary>
            <returns>Result code</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.ExtendedResultCode">
            <summary>
            Returns the extended numeric result code for the most recent failed SQLite API call
            associated with the database connection.
            </summary>
            <returns>Extended result code</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.LogMessage(System.Data.SQLite.SQLiteErrorCode,System.String)">
            <summary>
            Add a log message via the SQLite sqlite3_log interface.
            </summary>
            <param name="iErrCode">Error code to be logged with the message.</param>
            <param name="zMessage">String to be logged.  Unlike the SQLite sqlite3_log()
            interface, this should be pre-formatted.  Consider using the
            String.Format() function.</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.IsInitialized">
            <summary>
            Checks if the SQLite core library has been initialized in the current process.
            </summary>
            <returns>
            Non-zero if the SQLite core library has been initialized in the current process,
            zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.InitializeBackup(System.Data.SQLite.SQLiteConnection,System.String,System.String)">
            <summary>
            Creates a new SQLite backup object based on the provided destination
            database connection.  The source database connection is the one
            associated with this object.  The source and destination database
            connections cannot be the same.
            </summary>
            <param name="destCnn">The destination database connection.</param>
            <param name="destName">The destination database name.</param>
            <param name="sourceName">The source database name.</param>
            <returns>The newly created backup object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.StepBackup(System.Data.SQLite.SQLiteBackup,System.Int32,System.Boolean@)">
            <summary>
            Copies up to N pages from the source database to the destination
            database associated with the specified backup object.
            </summary>
            <param name="backup">The backup object to use.</param>
            <param name="nPage">
            The number of pages to copy or negative to copy all remaining pages.
            </param>
            <param name="retry">
            Set to true if the operation needs to be retried due to database
            locking issues.
            </param>
            <returns>
            True if there are more pages to be copied, false otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.RemainingBackup(System.Data.SQLite.SQLiteBackup)">
            <summary>
            Returns the number of pages remaining to be copied from the source
            database to the destination database associated with the specified
            backup object.
            </summary>
            <param name="backup">The backup object to check.</param>
            <returns>The number of pages remaining to be copied.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.PageCountBackup(System.Data.SQLite.SQLiteBackup)">
            <summary>
            Returns the total number of pages in the source database associated
            with the specified backup object.
            </summary>
            <param name="backup">The backup object to check.</param>
            <returns>The total number of pages in the source database.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.FinishBackup(System.Data.SQLite.SQLiteBackup)">
            <summary>
            Destroys the backup object, rolling back any backup that may be in
            progess.
            </summary>
            <param name="backup">The backup object to destroy.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.FallbackGetErrorString(System.Data.SQLite.SQLiteErrorCode)">
            <summary>
            Returns the error message for the specified SQLite return code using
            the internal static lookup table.
            </summary>
            <param name="rc">The SQLite return code.</param>
            <returns>The error message or null if it cannot be found.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBase.GetErrorString(System.Data.SQLite.SQLiteErrorCode)">
            <summary>
            Returns the error message for the specified SQLite return code using
            the sqlite3_errstr() function, falling back to the internal lookup
            table if necessary.
            </summary>
            <param name="rc">The SQLite return code.</param>
            <returns>The error message or null if it cannot be found.</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.Version">
            <summary>
            Returns a string representing the active version of SQLite
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.VersionNumber">
            <summary>
            Returns an integer representing the active version of SQLite
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.LastInsertRowId">
            <summary>
            Returns the rowid of the most recent successful INSERT into the database from this connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.Changes">
            <summary>
            Returns the number of changes the last executing insert/update caused.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.MemoryUsed">
            <summary>
            Returns the amount of memory (in bytes) currently in use by the SQLite core library.  This is not really a per-connection
            value, it is global to the process.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.MemoryHighwater">
            <summary>
            Returns the maximum amount of memory (in bytes) used by the SQLite core library since the high-water mark was last reset.
            This is not really a per-connection value, it is global to the process.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.OwnHandle">
            <summary>
            Returns non-zero if the underlying native connection handle is owned by this instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteBase.AutoCommit">
            <summary>
            Returns non-zero if the given database connection is in autocommit mode.
            Autocommit mode is on by default.  Autocommit mode is disabled by a BEGIN
            statement.  Autocommit mode is re-enabled by a COMMIT or ROLLBACK.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLite3._sql">
            <summary>
            The opaque pointer returned to us by the sqlite provider
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLite3._functions">
            <summary>
            The user-defined functions registered on this connection
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLite3._modules">
            <summary>
            The modules created using this connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.#ctor(System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String,System.IntPtr,System.String,System.Boolean)">
            <summary>
            Constructs the object used to interact with the SQLite core library
            using the UTF-8 text encoding.
            </summary>
            <param name="fmt">
            The DateTime format to be used when converting string values to a
            DateTime and binding DateTime parameters.
            </param>
            <param name="kind">
            The <see cref="T:System.DateTimeKind"/> to be used when creating DateTime
            values.
            </param>
            <param name="fmtString">
            The format string to be used when parsing and formatting DateTime
            values.
            </param>
            <param name="db">
            The native handle to be associated with the database connection.
            </param>
            <param name="fileName">
            The fully qualified file name associated with <paramref name="db "/>.
            </param>
            <param name="ownHandle">
            Non-zero if the newly created object instance will need to dispose
            of <paramref name="db"/> when it is no longer needed.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.DisposeModules">
            <summary>
            This method attempts to dispose of all the <see cref="T:System.Data.SQLite.SQLiteModule"/> derived
            object instances currently associated with the native database connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.Cancel">
            <summary>
            Attempts to interrupt the query currently executing on the associated
            native database connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.BindFunction(System.Data.SQLite.SQLiteFunctionAttribute,System.Data.SQLite.SQLiteFunction,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            This function binds a user-defined function to the connection.
            </summary>
            <param name="functionAttribute">
            The <see cref="T:System.Data.SQLite.SQLiteFunctionAttribute"/> object instance containing
            the metadata for the function to be bound.
            </param>
            <param name="function">
            The <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance that implements the
            function to be bound.
            </param>
            <param name="flags">
            The flags associated with the parent connection object.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.ReleaseMemory">
            <summary>
            Attempts to free as much heap memory as possible for the database connection.
            </summary>
            <returns>A standard SQLite return code (i.e. zero for success and non-zero for failure).</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.StaticReleaseMemory(System.Int32,System.Boolean,System.Boolean,System.Int32@,System.Boolean@,System.UInt32@)">
            <summary>
            Attempts to free N bytes of heap memory by deallocating non-essential memory
            allocations held by the database library. Memory used to cache database pages
            to improve performance is an example of non-essential memory.  This is a no-op
            returning zero if the SQLite core library was not compiled with the compile-time
            option SQLITE_ENABLE_MEMORY_MANAGEMENT.  Optionally, attempts to reset and/or
            compact the Win32 native heap, if applicable.
            </summary>
            <param name="nBytes">
            The requested number of bytes to free.
            </param>
            <param name="reset">
            Non-zero to attempt a heap reset.
            </param>
            <param name="compact">
            Non-zero to attempt heap compaction.
            </param>
            <param name="nFree">
            The number of bytes actually freed.  This value may be zero.
            </param>
            <param name="resetOk">
            This value will be non-zero if the heap reset was successful.
            </param>
            <param name="nLargest">
            The size of the largest committed free block in the heap, in bytes.
            This value will be zero unless heap compaction is enabled.
            </param>
            <returns>
            A standard SQLite return code (i.e. zero for success and non-zero
            for failure).
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.Shutdown">
            <summary>
            Shutdown the SQLite engine so that it can be restarted with different
            configuration options.  We depend on auto initialization to recover.
            </summary>
            <returns>Returns a standard SQLite result code.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.StaticShutdown(System.Boolean)">
            <summary>
            Shutdown the SQLite engine so that it can be restarted with different
            configuration options.  We depend on auto initialization to recover.
            </summary>
            <param name="directories">
            Non-zero to reset the database and temporary directories to their
            default values, which should be null for both.  This parameter has no
            effect on non-Windows operating systems.
            </param>
            <returns>Returns a standard SQLite result code.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.IsOpen">
            <summary>
            Determines if the associated native connection handle is open.
            </summary>
            <returns>
            Non-zero if the associated native connection handle is open.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.CreateModule(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            Calls the native SQLite core library in order to create a disposable
            module containing the implementation of a virtual table.
            </summary>
            <param name="module">
            The module object to be used when creating the native disposable module.
            </param>
            <param name="flags">
            The flags for the associated <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.DisposeModule(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            Calls the native SQLite core library in order to cleanup the resources
            associated with a module containing the implementation of a virtual table.
            </summary>
            <param name="module">
            The module object previously passed to the <see cref="M:System.Data.SQLite.SQLite3.CreateModule(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteConnectionFlags)"/>
            method.
            </param>
            <param name="flags">
            The flags for the associated <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.DeclareVirtualTable(System.Data.SQLite.SQLiteModule,System.String,System.String@)">
            <summary>
            Calls the native SQLite core library in order to declare a virtual table
            in response to a call into the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/>
            or <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> virtual table methods.
            </summary>
            <param name="module">
            The virtual table module that is to be responsible for the virtual table
            being declared.
            </param>
            <param name="strSql">
            The string containing the SQL statement describing the virtual table to
            be declared.
            </param>
            <param name="error">
            Upon success, the contents of this parameter are undefined.  Upon failure,
            it should contain an appropriate error message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.DeclareVirtualFunction(System.Data.SQLite.SQLiteModule,System.Int32,System.String,System.String@)">
            <summary>
            Calls the native SQLite core library in order to declare a virtual table
            function in response to a call into the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/>
            or <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> virtual table methods.
            </summary>
            <param name="module">
            The virtual table module that is to be responsible for the virtual table
            function being declared.
            </param>
            <param name="argumentCount">
            The number of arguments to the function being declared.
            </param>
            <param name="name">
            The name of the function being declared.
            </param>
            <param name="error">
            Upon success, the contents of this parameter are undefined.  Upon failure,
            it should contain an appropriate error message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.SetLoadExtension(System.Boolean)">
            <summary>
            Enables or disabled extension loading by SQLite.
            </summary>
            <param name="bOnOff">
            True to enable loading of extensions, false to disable.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.LoadExtension(System.String,System.String)">
            <summary>
            Loads a SQLite extension library from the named file.
            </summary>
            <param name="fileName">
            The name of the dynamic link library file containing the extension.
            </param>
            <param name="procName">
            The name of the exported function used to initialize the extension.
            If null, the default "sqlite3_extension_init" will be used.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.SetExtendedResultCodes(System.Boolean)">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:System.Data.SQLite.SQLite3.ResultCode">
            Gets the last SQLite error code
        </member>
        <member name="M:System.Data.SQLite.SQLite3.ExtendedResultCode">
            Gets the last SQLite extended error code
        </member>
        <member name="M:System.Data.SQLite.SQLite3.LogMessage(System.Data.SQLite.SQLiteErrorCode,System.String)">
            Add a log message via the SQLite sqlite3_log interface.
        </member>
        <member name="M:System.Data.SQLite.SQLite3.StaticLogMessage(System.Data.SQLite.SQLiteErrorCode,System.String)">
            Add a log message via the SQLite sqlite3_log interface.
        </member>
        <member name="M:System.Data.SQLite.SQLite3.SetLogCallback(System.Data.SQLite.SQLiteLogCallback)">
            <summary>
            Allows the setting of a logging callback invoked by SQLite when a
            log event occurs.  Only one callback may be set.  If NULL is passed,
            the logging callback is unregistered.
            </summary>
            <param name="func">The callback function to invoke.</param>
            <returns>Returns a result code</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.InitializeBackup(System.Data.SQLite.SQLiteConnection,System.String,System.String)">
            <summary>
            Creates a new SQLite backup object based on the provided destination
            database connection.  The source database connection is the one
            associated with this object.  The source and destination database
            connections cannot be the same.
            </summary>
            <param name="destCnn">The destination database connection.</param>
            <param name="destName">The destination database name.</param>
            <param name="sourceName">The source database name.</param>
            <returns>The newly created backup object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.StepBackup(System.Data.SQLite.SQLiteBackup,System.Int32,System.Boolean@)">
            <summary>
            Copies up to N pages from the source database to the destination
            database associated with the specified backup object.
            </summary>
            <param name="backup">The backup object to use.</param>
            <param name="nPage">
            The number of pages to copy, negative to copy all remaining pages.
            </param>
            <param name="retry">
            Set to true if the operation needs to be retried due to database
            locking issues; otherwise, set to false.
            </param>
            <returns>
            True if there are more pages to be copied, false otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.RemainingBackup(System.Data.SQLite.SQLiteBackup)">
            <summary>
            Returns the number of pages remaining to be copied from the source
            database to the destination database associated with the specified
            backup object.
            </summary>
            <param name="backup">The backup object to check.</param>
            <returns>The number of pages remaining to be copied.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.PageCountBackup(System.Data.SQLite.SQLiteBackup)">
            <summary>
            Returns the total number of pages in the source database associated
            with the specified backup object.
            </summary>
            <param name="backup">The backup object to check.</param>
            <returns>The total number of pages in the source database.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.FinishBackup(System.Data.SQLite.SQLiteBackup)">
            <summary>
            Destroys the backup object, rolling back any backup that may be in
            progess.
            </summary>
            <param name="backup">The backup object to destroy.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.IsInitialized">
            <summary>
            Determines if the SQLite core library has been initialized for the
            current process.
            </summary>
            <returns>
            A boolean indicating whether or not the SQLite core library has been
            initialized for the current process.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.StaticIsInitialized">
            <summary>
            Determines if the SQLite core library has been initialized for the
            current process.
            </summary>
            <returns>
            A boolean indicating whether or not the SQLite core library has been
            initialized for the current process.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLite3.GetValue(System.Data.SQLite.SQLiteStatement,System.Data.SQLite.SQLiteConnectionFlags,System.Int32,System.Data.SQLite.SQLiteType)">
            <summary>
            Helper function to retrieve a column of data from an active statement.
            </summary>
            <param name="stmt">The statement being step()'d through</param>
            <param name="flags">The flags associated with the connection.</param>
            <param name="index">The column index to retrieve</param>
            <param name="typ">The type of data contained in the column.  If Uninitialized, this function will retrieve the datatype information.</param>
            <returns>Returns the data in the column</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLite3.OwnHandle">
            <summary>
            Returns non-zero if the underlying native connection handle is owned
            by this instance.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLite3_UTF16">
            <summary>
            Alternate SQLite3 object, overriding many text behaviors to support UTF-16 (Unicode)
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLite3_UTF16.#ctor(System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String,System.IntPtr,System.String,System.Boolean)">
            <summary>
            Constructs the object used to interact with the SQLite core library
            using the UTF-8 text encoding.
            </summary>
            <param name="fmt">
            The DateTime format to be used when converting string values to a
            DateTime and binding DateTime parameters.
            </param>
            <param name="kind">
            The <see cref="T:System.DateTimeKind"/> to be used when creating DateTime
            values.
            </param>
            <param name="fmtString">
            The format string to be used when parsing and formatting DateTime
            values.
            </param>
            <param name="db">
            The native handle to be associated with the database connection.
            </param>
            <param name="fileName">
            The fully qualified file name associated with <paramref name="db"/>.
            </param>
            <param name="ownHandle">
            Non-zero if the newly created object instance will need to dispose
            of <paramref name="db"/> when it is no longer needed.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLite3_UTF16.ToString(System.IntPtr,System.Int32)">
            <summary>
            Overrides SQLiteConvert.ToString() to marshal UTF-16 strings instead of UTF-8
            </summary>
            <param name="b">A pointer to a UTF-16 string</param>
            <param name="nbytelen">The length (IN BYTES) of the string</param>
            <returns>A .NET string</returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteBackup">
            <summary>
            Represents a single SQL backup in SQLite.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBackup._sql">
            <summary>
            The underlying SQLite object this backup is bound to.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBackup._sqlite_backup">
            <summary>
            The actual backup handle.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBackup._destDb">
            <summary>
            The destination database for the backup.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBackup._zDestName">
            <summary>
            The destination database name for the backup.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBackup._sourceDb">
            <summary>
            The source database for the backup.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBackup._zSourceName">
            <summary>
            The source database name for the backup.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteBackup._stepResult">
            <summary>
            The last result from the StepBackup method of the SQLite3 class.
            This is used to determine if the call to the FinishBackup method of
            the SQLite3 class should throw an exception when it receives a non-Ok
            return code from the core SQLite library.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBackup.#ctor(System.Data.SQLite.SQLiteBase,System.Data.SQLite.SQLiteBackupHandle,System.IntPtr,System.Byte[],System.IntPtr,System.Byte[])">
            <summary>
            Initializes the backup.
            </summary>
            <param name="sqlbase">The base SQLite object.</param>
            <param name="backup">The backup handle.</param>
            <param name="destDb">The destination database for the backup.</param>
            <param name="zDestName">The destination database name for the backup.</param>
            <param name="sourceDb">The source database for the backup.</param>
            <param name="zSourceName">The source database name for the backup.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBackup.Dispose">
            <summary>
            Disposes and finalizes the backup.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.ISQLiteSchemaExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteSchemaExtensions.BuildTempSchema(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Creates temporary tables on the connection so schema information can be queried.
            </summary>
            <param name="connection">
            The connection upon which to build the schema tables.
            </param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConnectionFlags">
            <summary>
            The extra behavioral flags that can be applied to a connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.None">
            <summary>
            No extra flags.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogPrepare">
            <summary>
            Enable logging of all SQL statements to be prepared.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogPreBind">
            <summary>
            Enable logging of all bound parameter types and raw values.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogBind">
            <summary>
            Enable logging of all bound parameter strongly typed values.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogCallbackException">
            <summary>
            Enable logging of all exceptions caught from user-provided
            managed code called from native code via delegates.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogBackup">
            <summary>
            Enable logging of backup API errors.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoExtensionFunctions">
            <summary>
            Skip adding the extension functions provided by the native
            interop assembly.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.BindUInt32AsInt64">
            <summary>
            When binding parameter values with the <see cref="T:System.UInt32"/>
            type, use the interop method that accepts an <see cref="T:System.Int64"/>
            value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.BindAllAsText">
            <summary>
            When binding parameter values, always bind them as though they were
            plain text (i.e. no numeric, date/time, or other conversions should
            be attempted).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.GetAllAsText">
            <summary>
            When returning column values, always return them as though they were
            plain text (i.e. no numeric, date/time, or other conversions should
            be attempted).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoLoadExtension">
            <summary>
            Prevent this <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance from
            loading extensions.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoCreateModule">
            <summary>
            Prevent this <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance from
            creating virtual table modules.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoBindFunctions">
            <summary>
            Skip binding any functions provided by other managed assemblies when
            opening the connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoLogModule">
            <summary>
            Skip setting the logging related properties of the
            <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance that was passed to
            the <see cref="M:System.Data.SQLite.SQLiteConnection.CreateModule(System.Data.SQLite.SQLiteModule)"/> method.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogModuleError">
            <summary>
            Enable logging of all virtual table module errors seen by the
            <see cref="M:System.Data.SQLite.SQLiteModule.SetTableError(System.IntPtr,System.String)"/> method.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogModuleException">
            <summary>
            Enable logging of certain virtual table module exceptions that cannot
            be easily discovered via other means.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.TraceWarning">
            <summary>
            Enable tracing of potentially important [non-fatal] error conditions
            that cannot be easily reported through other means.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.ConvertInvariantText">
            <summary>
            When binding parameter values, always use the invariant culture when
            converting their values from strings.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.BindInvariantText">
            <summary>
            When binding parameter values, always use the invariant culture when
            converting their values to strings.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoConnectionPool">
            <summary>
            Disable using the connection pool by default.  If the "Pooling"
            connection string property is specified, its value will override
            this flag.  The precise outcome of combining this flag with the
            <see cref="F:System.Data.SQLite.SQLiteConnectionFlags.UseConnectionPool"/> flag is unspecified; however,
            one of the flags will be in effect.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.UseConnectionPool">
            <summary>
            Enable using the connection pool by default.  If the "Pooling"
            connection string property is specified, its value will override
            this flag.  The precise outcome of combining this flag with the
            <see cref="F:System.Data.SQLite.SQLiteConnectionFlags.NoConnectionPool"/> flag is unspecified; however,
            one of the flags will be in effect.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.UseConnectionTypes">
            <summary>
            Enable using per-connection mappings between type names and
            <see cref="T:System.Data.DbType"/> values.  Also see the
            <see cref="M:System.Data.SQLite.SQLiteConnection.ClearTypeMappings"/>,
            <see cref="M:System.Data.SQLite.SQLiteConnection.GetTypeMappings"/>, and
            <see cref="M:System.Data.SQLite.SQLiteConnection.AddTypeMapping(System.String,System.Data.DbType,System.Boolean)"/> methods.  These
            per-connection mappings, when present, override the corresponding
            global mappings.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoGlobalTypes">
            <summary>
            Disable using global mappings between type names and
            <see cref="T:System.Data.DbType"/> values.  This may be useful in some very narrow
            cases; however, if there are no per-connection type mappings, the
            fallback defaults will be used for both type names and their
            associated <see cref="T:System.Data.DbType"/> values.  Therefore, use of this flag
            is not recommended.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.StickyHasRows">
            <summary>
            When the <see cref="P:System.Data.SQLite.SQLiteDataReader.HasRows"/> property is used, it
            should return non-zero if there were ever any rows in the associated
            result sets.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.StrictEnlistment">
            <summary>
            Enable "strict" transaction enlistment semantics.  Setting this flag
            will cause an exception to be thrown if an attempt is made to enlist
            in a transaction with an unavailable or unsupported isolation level.
            In the future, more extensive checks may be enabled by this flag as
            well.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.MapIsolationLevels">
            <summary>
            Enable mapping of unsupported transaction isolation levels to the
            closest supported transaction isolation level.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.DetectTextAffinity">
            <summary>
            When returning column values, attempt to detect the affinity of
            textual values by checking if they fully conform to those of the
            <see cref="F:System.Data.SQLite.TypeAffinity.Null"/>,
            <see cref="F:System.Data.SQLite.TypeAffinity.Int64"/>,
            <see cref="F:System.Data.SQLite.TypeAffinity.Double"/>,
            or <see cref="F:System.Data.SQLite.TypeAffinity.DateTime"/> types.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.DetectStringType">
            <summary>
            When returning column values, attempt to detect the type of
            string values by checking if they fully conform to those of
            the <see cref="F:System.Data.SQLite.TypeAffinity.Null"/>,
            <see cref="F:System.Data.SQLite.TypeAffinity.Int64"/>,
            <see cref="F:System.Data.SQLite.TypeAffinity.Double"/>,
            or <see cref="F:System.Data.SQLite.TypeAffinity.DateTime"/> types.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.NoConvertSettings">
            <summary>
            Skip querying runtime configuration settings for use by the
            <see cref="T:System.Data.SQLite.SQLiteConvert"/> class, including the default
            <see cref="T:System.Data.DbType"/> value and default database type name.
            <b>NOTE: If the <see cref="P:System.Data.SQLite.SQLiteConnection.DefaultDbType"/>
            and/or <see cref="P:System.Data.SQLite.SQLiteConnection.DefaultTypeName"/>
            properties are not set explicitly nor set via their connection
            string properties and repeated calls to determine these runtime
            configuration settings are seen to be a problem, this flag
            should be set.</b>
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.BindAndGetAllAsText">
            <summary>
            When binding parameter values or returning column values, always
            treat them as though they were plain text (i.e. no numeric,
            date/time, or other conversions should be attempted).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.ConvertAndBindInvariantText">
            <summary>
            When binding parameter values, always use the invariant culture when
            converting their values to strings or from strings.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.BindAndGetAllAsInvariantText">
            <summary>
            When binding parameter values or returning column values, always
            treat them as though they were plain text (i.e. no numeric,
            date/time, or other conversions should be attempted) and always
            use the invariant culture when converting their values to strings.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.ConvertAndBindAndGetAllAsInvariantText">
            <summary>
            When binding parameter values or returning column values, always
            treat them as though they were plain text (i.e. no numeric,
            date/time, or other conversions should be attempted) and always
            use the invariant culture when converting their values to strings
            or from strings.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.LogAll">
            <summary>
            Enable all logging.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.Default">
            <summary>
            The default extra flags for new connections.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionFlags.DefaultAndLogAll">
            <summary>
            The default extra flags for new connections with all logging enabled.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteCommand">
            <summary>
            SQLite implementation of DbCommand.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand.DefaultConnectionString">
            <summary>
            The default connection string to be used when creating a temporary
            connection to execute a command via the static
            <see cref="M:System.Data.SQLite.SQLiteCommand.Execute(System.String,System.Data.SQLite.SQLiteExecuteType,System.String,System.Object[])"/> or
            <see cref="M:System.Data.SQLite.SQLiteCommand.Execute(System.String,System.Data.SQLite.SQLiteExecuteType,System.Data.CommandBehavior,System.String,System.Object[])"/>
            methods.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._commandText">
            <summary>
            The command text this command is based on
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._cnn">
            <summary>
            The connection the command is associated with
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._version">
            <summary>
            The version of the connection the command is associated with
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._activeReader">
            <summary>
            Indicates whether or not a DataReader is active on the command.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._commandTimeout">
            <summary>
            The timeout for the command, kludged because SQLite doesn't support per-command timeout values
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._designTimeVisible">
            <summary>
            Designer support
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._updateRowSource">
            <summary>
            Used by DbDataAdapter to determine updating behavior
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._parameterCollection">
            <summary>
            The collection of parameters for the command
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._statementList">
            <summary>
            The SQL command text, broken into individual SQL statements as they are executed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._remainingText">
            <summary>
            Unprocessed SQL text that has not been executed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteCommand._transaction">
            <summary>
            Transaction associated with this command
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.#ctor">
            <overloads>
             Constructs a new SQLiteCommand
             </overloads>
             <summary>
             Default constructor
             </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.#ctor(System.String)">
            <summary>
            Initializes the command with the given command text
            </summary>
            <param name="commandText">The SQL command text</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.#ctor(System.String,System.Data.SQLite.SQLiteConnection)">
            <summary>
            Initializes the command with the given SQL command text and attach the command to the specified
            connection.
            </summary>
            <param name="commandText">The SQL command text</param>
            <param name="connection">The connection to associate with the command</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.#ctor(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Initializes the command and associates it with the specified connection.
            </summary>
            <param name="connection">The connection to associate with the command</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.#ctor(System.String,System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction)">
            <summary>
            Initializes a command with the given SQL, connection and transaction
            </summary>
            <param name="commandText">The SQL command text</param>
            <param name="connection">The connection to associate with the command</param>
            <param name="transaction">The transaction the command should be associated with</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.Dispose(System.Boolean)">
            <summary>
            Disposes of the command and clears all member variables
            </summary>
            <param name="disposing">Whether or not the class is being explicitly or implicitly disposed</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.GetFlags(System.Data.SQLite.SQLiteCommand)">
            <summary>
            This method attempts to query the flags associated with the database
            connection in use.  If the database connection is disposed, the default
            flags will be returned.
            </summary>
            <param name="command">
            The command containing the databse connection to query the flags from.
            </param>
            <returns>
            The connection flags value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ClearCommands">
            <summary>
            Clears and destroys all statements currently prepared
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.BuildNextCommand">
            <summary>
            Builds an array of prepared statements for each complete SQL statement in the command text
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.Cancel">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.CreateDbParameter">
            <summary>
            Forwards to the local CreateParameter() function
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.CreateParameter">
            <summary>
            Create a new parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.InitializeForReader">
            <summary>
            This function ensures there are no active readers, that we have a valid connection,
            that the connection is open, that all statements are prepared and all parameters are assigned
            in preparation for allocating a data reader.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
            <summary>
            Creates a new SQLiteDataReader to execute/iterate the array of SQLite prepared statements
            </summary>
            <param name="behavior">The behavior the data reader should adopt</param>
            <returns>Returns a SQLiteDataReader object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.Execute(System.String,System.Data.SQLite.SQLiteExecuteType,System.String,System.Object[])">
            <summary>
            This method creates a new connection, executes the query using the given
            execution type, closes the connection, and returns the results.  If the
            connection string is null, a temporary in-memory database connection will
            be used.
            </summary>
            <param name="commandText">
            The text of the command to be executed.
            </param>
            <param name="executeType">
            The execution type for the command.  This is used to determine which method
            of the command object to call, which then determines the type of results
            returned, if any.
            </param>
            <param name="connectionString">
            The connection string to the database to be opened, used, and closed.  If
            this parameter is null, a temporary in-memory databse will be used.
            </param>
            <param name="args">
            The SQL parameter values to be used when building the command object to be
            executed, if any.
            </param>
            <returns>
            The results of the query -OR- null if no results were produced from the
            given execution type.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.Execute(System.String,System.Data.SQLite.SQLiteExecuteType,System.Data.CommandBehavior,System.String,System.Object[])">
            <summary>
            This method creates a new connection, executes the query using the given
            execution type and command behavior, closes the connection, and returns
            the results.  If the connection string is null, a temporary in-memory
            database connection will be used.
            </summary>
            <param name="commandText">
            The text of the command to be executed.
            </param>
            <param name="executeType">
            The execution type for the command.  This is used to determine which method
            of the command object to call, which then determines the type of results
            returned, if any.
            </param>
            <param name="commandBehavior">
            The command behavior flags for the command.
            </param>
            <param name="connectionString">
            The connection string to the database to be opened, used, and closed.  If
            this parameter is null, a temporary in-memory databse will be used.
            </param>
            <param name="args">
            The SQL parameter values to be used when building the command object to be
            executed, if any.
            </param>
            <returns>
            The results of the query -OR- null if no results were produced from the
            given execution type.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Overrides the default behavior to return a SQLiteDataReader specialization class
            </summary>
            <param name="behavior">The flags to be associated with the reader.</param>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ExecuteReader">
            <summary>
            Overrides the default behavior of DbDataReader to return a specialized SQLiteDataReader class
            </summary>
            <returns>A SQLiteDataReader</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ClearDataReader">
            <summary>
            Called by the SQLiteDataReader when the data reader is closed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ExecuteNonQuery">
            <summary>
            Execute the command and return the number of rows inserted/updated affected by it.
            </summary>
            <returns>The number of rows inserted/updated affected by it.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ExecuteNonQuery(System.Data.CommandBehavior)">
            <summary>
            Execute the command and return the number of rows inserted/updated affected by it.
            </summary>
            <param name="behavior">The flags to be associated with the reader.</param>
            <returns>The number of rows inserted/updated affected by it.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ExecuteScalar">
            <summary>
            Execute the command and return the first column of the first row of the resultset
            (if present), or null if no resultset was returned.
            </summary>
            <returns>The first column of the first row of the first resultset from the query.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.ExecuteScalar(System.Data.CommandBehavior)">
            <summary>
            Execute the command and return the first column of the first row of the resultset
            (if present), or null if no resultset was returned.
            </summary>
            <param name="behavior">The flags to be associated with the reader.</param>
            <returns>The first column of the first row of the first resultset from the query.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.Prepare">
            <summary>
            Does nothing.  Commands are prepared as they are executed the first time, and kept in prepared state afterwards.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommand.Clone">
            <summary>
            Clones a command, including all its parameters
            </summary>
            <returns>A new SQLiteCommand with the same commandtext, connection and parameters</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.CommandText">
            <summary>
            The SQL command text associated with the command
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.CommandTimeout">
            <summary>
            The amount of time to wait for the connection to become available before erroring out
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.CommandType">
            <summary>
            The type of the command.  SQLite only supports CommandType.Text
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.Connection">
            <summary>
            The connection associated with this command
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.DbConnection">
            <summary>
            Forwards to the local Connection property
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.Parameters">
            <summary>
            Returns the SQLiteParameterCollection for the given command
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.DbParameterCollection">
            <summary>
            Forwards to the local Parameters property
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.Transaction">
            <summary>
            The transaction associated with this command.  SQLite only supports one transaction per connection, so this property forwards to the
            command's underlying connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.DbTransaction">
            <summary>
            Forwards to the local Transaction property
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.UpdatedRowSource">
            <summary>
            Sets the method the SQLiteCommandBuilder uses to determine how to update inserted or updated rows in a DataTable.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommand.DesignTimeVisible">
            <summary>
            Determines if the command is visible at design time.  Defaults to True.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteCommandBuilder">
            <summary>
            SQLite implementation of DbCommandBuilder.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.#ctor(System.Data.SQLite.SQLiteDataAdapter)">
            <summary>
            Initializes the command builder and associates it with the specified data adapter.
            </summary>
            <param name="adp"></param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
            <summary>
            Minimal amount of parameter processing.  Primarily sets the DbType for the parameter equal to the provider type in the schema
            </summary>
            <param name="parameter">The parameter to use in applying custom behaviors to a row</param>
            <param name="row">The row to apply the parameter to</param>
            <param name="statementType">The type of statement</param>
            <param name="whereClause">Whether the application of the parameter is part of a WHERE clause</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetParameterName(System.String)">
            <summary>
            Returns a valid named parameter
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetParameterName(System.Int32)">
            <summary>
            Returns a named parameter for the given ordinal
            </summary>
            <param name="parameterOrdinal">The i of the parameter</param>
            <returns>Error</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetParameterPlaceholder(System.Int32)">
            <summary>
            Returns a placeholder character for the specified parameter i.
            </summary>
            <param name="parameterOrdinal">The index of the parameter to provide a placeholder for</param>
            <returns>Returns a named parameter</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
            <summary>
            Sets the handler for receiving row updating events.  Used by the DbCommandBuilder to autogenerate SQL
            statements that may not have previously been generated.
            </summary>
            <param name="adapter">A data adapter to receive events on.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetDeleteCommand">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetDeleteCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to delete rows from the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetUpdateCommand">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetUpdateCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to update rows in the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetInsertCommand">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetInsertCommand(System.Boolean)">
            <summary>
            Returns the automatically-generated SQLite command to insert rows into the database
            </summary>
            <param name="useColumnsForParameterNames"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.QuoteIdentifier(System.String)">
            <summary>
            Places brackets around an identifier
            </summary>
            <param name="unquotedIdentifier">The identifier to quote</param>
            <returns>The bracketed identifier</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.UnquoteIdentifier(System.String)">
            <summary>
            Removes brackets around an identifier
            </summary>
            <param name="quotedIdentifier">The quoted (bracketed) identifier</param>
            <returns>The undecorated identifier</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
            <summary>
            Override helper, which can help the base command builder choose the right keys for the given query
            </summary>
            <param name="sourceCommand"></param>
            <returns></returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommandBuilder.DataAdapter">
            <summary>
            Gets/sets the DataAdapter for this CommandBuilder
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommandBuilder.CatalogLocation">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommandBuilder.CatalogSeparator">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommandBuilder.QuotePrefix">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommandBuilder.QuoteSuffix">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteCommandBuilder.SchemaSeparator">
            <summary>
            Overridden to hide its property from the designer
            </summary>
        </member>
        <member name="T:System.Data.SQLite.ConnectionEventArgs">
            <summary>
            Event data for connection event handlers.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.EventType">
            <summary>
            The type of event being raised.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.EventArgs">
            <summary>
            The <see cref="T:System.Data.StateChangeEventArgs"/> associated with this event, if any.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.Transaction">
            <summary>
            The transaction associated with this event, if any.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.Command">
            <summary>
            The command associated with this event, if any.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.DataReader">
            <summary>
            The data reader associated with this event, if any.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.CriticalHandle">
            <summary>
            The critical handle associated with this event, if any.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.Text">
            <summary>
            Command or message text associated with this event, if any.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.ConnectionEventArgs.Data">
            <summary>
            Extra data associated with this event, if any.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.ConnectionEventArgs.#ctor(System.Data.SQLite.SQLiteConnectionEventType,System.Data.StateChangeEventArgs,System.Data.IDbTransaction,System.Data.IDbCommand,System.Data.IDataReader,System.Runtime.InteropServices.CriticalHandle,System.String,System.Object)">
            <summary>
            Constructs the object.
            </summary>
            <param name="eventType">The type of event being raised.</param>
            <param name="eventArgs">The base <see cref="F:System.Data.SQLite.ConnectionEventArgs.EventArgs"/> associated
            with this event, if any.</param>
            <param name="transaction">The transaction associated with this event, if any.</param>
            <param name="command">The command associated with this event, if any.</param>
            <param name="dataReader">The data reader associated with this event, if any.</param>
            <param name="criticalHandle">The critical handle associated with this event, if any.</param>
            <param name="text">The command or message text, if any.</param>
            <param name="data">The extra data, if any.</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConnectionEventHandler">
            <summary>
            Raised when an event pertaining to a connection occurs.
            </summary>
            <param name="sender">The connection involved.</param>
            <param name="e">Extra information about the event.</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConnection">
            <summary>
            SQLite implentation of DbConnection.
            </summary>
            <remarks>
            The <see cref="P:System.Data.SQLite.SQLiteConnection.ConnectionString"/> property can contain the following parameter(s), delimited with a semi-colon:
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Values</term>
            <term>Required</term>
            <term>Default</term>
            </listheader>
            <item>
            <description>Data Source</description>
            <description>
            This may be a file name, the string ":memory:", or any supported URI (starting with SQLite 3.7.7).
            Starting with release 1.0.86.0, in order to use more than one consecutive backslash (e.g. for a
            UNC path), each of the adjoining backslash characters must be doubled (e.g. "\\Network\Share\test.db"
            would become "\\\\Network\Share\test.db").
            </description>
            <description>Y</description>
            <description></description>
            </item>
            <item>
            <description>Version</description>
            <description>3</description>
            <description>N</description>
            <description>3</description>
            </item>
            <item>
            <description>UseUTF16Encoding</description>
            <description><b>True</b><br/><b>False</b></description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>DateTimeFormat</description>
            <description>
            <b>Ticks</b> - Use the value of DateTime.Ticks.<br/>
            <b>ISO8601</b> - Use the ISO-8601 format.  Uses the "yyyy-MM-dd HH:mm:ss.FFFFFFFK" format for UTC
            DateTime values and "yyyy-MM-dd HH:mm:ss.FFFFFFF" format for local DateTime values).<br/>
            <b>JulianDay</b> - The interval of time in days and fractions of a day since January 1, 4713 BC.<br/>
            <b>UnixEpoch</b> - The whole number of seconds since the Unix epoch (January 1, 1970).<br/>
            <b>InvariantCulture</b> - Any culture-independent string value that the .NET Framework can interpret as a valid DateTime.<br/>
            <b>CurrentCulture</b> - Any string value that the .NET Framework can interpret as a valid DateTime using the current culture.</description>
            <description>N</description>
            <description>ISO8601</description>
            </item>
            <item>
            <description>DateTimeKind</description>
            <description><b>Unspecified</b> - Not specified as either UTC or local time.<br/><b>Utc</b> - The time represented is UTC.<br/><b>Local</b> - The time represented is local time.</description>
            <description>N</description>
            <description>Unspecified</description>
            </item>
            <item>
            <description>DateTimeFormatString</description>
            <description>The exact DateTime format string to use for all formatting and parsing of all DateTime
            values for this connection.</description>
            <description>N</description>
            <description>null</description>
            </item>
            <item>
            <description>BaseSchemaName</description>
            <description>Some base data classes in the framework (e.g. those that build SQL queries dynamically)
            assume that an ADO.NET provider cannot support an alternate catalog (i.e. database) without supporting
            alternate schemas as well; however, SQLite does not fit into this model.  Therefore, this value is used
            as a placeholder and removed prior to preparing any SQL statements that may contain it.</description>
            <description>N</description>
            <description>sqlite_default_schema</description>
            </item>
            <item>
            <description>BinaryGUID</description>
            <description><b>True</b> - Store GUID columns in binary form<br/><b>False</b> - Store GUID columns as text</description>
            <description>N</description>
            <description>True</description>
            </item>
            <item>
            <description>Cache Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>2000</description>
            </item>
            <item>
            <description>Synchronous</description>
            <description><b>Normal</b> - Normal file flushing behavior<br/><b>Full</b> - Full flushing after all writes<br/><b>Off</b> - Underlying OS flushes I/O's</description>
            <description>N</description>
            <description>Full</description>
            </item>
            <item>
            <description>Page Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>1024</description>
            </item>
            <item>
            <description>Password</description>
            <description>{password} - Using this parameter requires that the CryptoAPI based codec be enabled at compile-time for both the native interop assembly and the core managed assemblies; otherwise, using this parameter may result in an exception being thrown when attempting to open the connection.</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>HexPassword</description>
            <description>{hexPassword} - Must contain a sequence of zero or more hexadecimal encoded byte values without a leading "0x" prefix.  Using this parameter requires that the CryptoAPI based codec be enabled at compile-time for both the native interop assembly and the core managed assemblies; otherwise, using this parameter may result in an exception being thrown when attempting to open the connection.</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>Enlist</description>
            <description><b>Y</b> - Automatically enlist in distributed transactions<br/><b>N</b> - No automatic enlistment</description>
            <description>N</description>
            <description>Y</description>
            </item>
            <item>
            <description>Pooling</description>
            <description>
            <b>True</b> - Use connection pooling.<br/>
            <b>False</b> - Do not use connection pooling.<br/><br/>
            <b>WARNING:</b> When using the default connection pool implementation,
            setting this property to True should be avoided by applications that make
            use of COM (either directly or indirectly) due to possible deadlocks that
            can occur during the finalization of some COM objects.
            </description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>FailIfMissing</description>
            <description><b>True</b> - Don't create the database if it does not exist, throw an error instead<br/><b>False</b> - Automatically create the database if it does not exist</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Page Count</description>
            <description>{size in pages} - Limits the maximum number of pages (limits the size) of the database</description>
            <description>N</description>
            <description>0</description>
            </item>
            <item>
            <description>Legacy Format</description>
            <description><b>True</b> - Use the more compatible legacy 3.x database format<br/><b>False</b> - Use the newer 3.3x database format which compresses numbers more effectively</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Default Timeout</description>
            <description>{time in seconds}<br/>The default command timeout</description>
            <description>N</description>
            <description>30</description>
            </item>
            <item>
            <description>Journal Mode</description>
            <description><b>Delete</b> - Delete the journal file after a commit<br/><b>Persist</b> - Zero out and leave the journal file on disk after a commit<br/><b>Off</b> - Disable the rollback journal entirely</description>
            <description>N</description>
            <description>Delete</description>
            </item>
            <item>
            <description>Read Only</description>
            <description><b>True</b> - Open the database for read only access<br/><b>False</b> - Open the database for normal read/write access</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Pool Size</description>
            <description>The maximum number of connections for the given connection string that can be in the connection pool</description>
            <description>N</description>
            <description>100</description>
            </item>
            <item>
            <description>Default IsolationLevel</description>
            <description>The default transaciton isolation level</description>
            <description>N</description>
            <description>Serializable</description>
            </item>
            <item>
            <description>Foreign Keys</description>
            <description>Enable foreign key constraints</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Flags</description>
            <description>Extra behavioral flags for the connection.  See the <see cref="T:System.Data.SQLite.SQLiteConnectionFlags"/> enumeration for possible values.</description>
            <description>N</description>
            <description>Default</description>
            </item>
            <item>
            <description>SetDefaults</description>
            <description>
            <b>True</b> - Apply the default connection settings to the opened database.<br/>
            <b>False</b> - Skip applying the default connection settings to the opened database.
            </description>
            <description>N</description>
            <description>True</description>
            </item>
            <item>
            <description>ToFullPath</description>
            <description>
            <b>True</b> - Attempt to expand the data source file name to a fully qualified path before opening.<br/>
            <b>False</b> - Skip attempting to expand the data source file name to a fully qualified path before opening.
            </description>
            <description>N</description>
            <description>True</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection.BadDbType">
            <summary>
            The "invalid value" for the <see cref="T:System.Data.DbType"/> enumeration used
            by the <see cref="P:System.Data.SQLite.SQLiteConnection.DefaultDbType"/> property.  This constant is shared
            by this class and the SQLiteConnectionStringBuilder class.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection.DefaultBaseSchemaName">
            <summary>
            The default "stub" (i.e. placeholder) base schema name to use when
            returning column schema information.  Used as the initial value of
            the BaseSchemaName property.  This should start with "sqlite_*"
            because those names are reserved for use by SQLite (i.e. they cannot
            be confused with the names of user objects).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._assembly">
            <summary>
            The managed assembly containing this type.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._syncRoot">
            <summary>
            Object used to synchronize access to the static instance data
            for this class.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._sharedFlags">
            <summary>
            The extra connection flags to be used for all opened connections.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._versionNumber">
            <summary>
            Used to hold the active library version number of SQLite.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._connectionState">
            <summary>
            State of the current connection
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._connectionString">
            <summary>
            The connection string
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._transactionLevel">
            <summary>
            Nesting level of the transactions open on the connection
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._disposing">
            <summary>
            If set, then the connection is currently being disposed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._defaultIsolation">
            <summary>
            The default isolation level for new transactions
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._enlistment">
            <summary>
            Whether or not the connection is enlisted in a distrubuted transaction
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._typeNames">
            <summary>
            The per-connection mappings between type names and <see cref="T:System.Data.DbType"/>
            values.  These mappings override the corresponding global mappings.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._sql">
            <summary>
            The base SQLite object to interop with
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._dataSource">
            <summary>
            The database filename minus path and extension
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._password">
            <summary>
            Temporary password storage, emptied after the database has been opened
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._baseSchemaName">
            <summary>
            The "stub" (i.e. placeholder) base schema name to use when returning
            column schema information.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._flags">
            <summary>
            The extra behavioral flags for this connection, if any.  See the
            <see cref="T:System.Data.SQLite.SQLiteConnectionFlags"/> enumeration for a list of
            possible values.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._cachedSettings">
            <summary>
            The cached values for all settings that have been fetched on behalf
            of this connection.  This cache may be cleared by calling the
            <see cref="M:System.Data.SQLite.SQLiteConnection.ClearCachedSettings"/> method.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._defaultDbType">
            <summary>
            The default databse type for this connection.  This value will only
            be used if the <see cref="F:System.Data.SQLite.SQLiteConnectionFlags.UseConnectionTypes"/>
            flag is set.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._defaultTypeName">
            <summary>
            The default databse type name for this connection.  This value will only
            be used if the <see cref="F:System.Data.SQLite.SQLiteConnectionFlags.UseConnectionTypes"/>
            flag is set.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._defaultTimeout">
            <summary>
            Default command timeout
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnection._parseViaFramework">
            <summary>
            Non-zero if the built-in (i.e. framework provided) connection string
            parser should be used when opening the connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.#ctor">
            <overloads>
             Constructs a new SQLiteConnection object
             </overloads>
             <summary>
             Default constructor
             </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.#ctor(System.String)">
            <summary>
            Initializes the connection with the specified connection string.
            </summary>
            <param name="connectionString">The connection string to use.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.#ctor(System.IntPtr,System.String,System.Boolean)">
            <summary>
            Initializes the connection with a pre-existing native connection handle.
            This constructor overload is intended to be used only by the private
            <see cref="M:System.Data.SQLite.SQLiteModule.CreateOrConnect(System.Boolean,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="db">
            The native connection handle to use.
            </param>
            <param name="fileName">
            The file name corresponding to the native connection handle.
            </param>
            <param name="ownHandle">
            Non-zero if this instance owns the native connection handle and
            should dispose of it when it is no longer needed.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes the connection with the specified connection string.
            </summary>
            <param name="connectionString">
            The connection string to use.
            </param>
            <param name="parseViaFramework">
            Non-zero to parse the connection string using the built-in (i.e.
            framework provided) parser when opening the connection.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.#ctor(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Clones the settings and connection string from an existing connection.  If the existing connection is already open, this
            function will open its own connection, enumerate any attached databases of the original connection, and automatically
            attach to them.
            </summary>
            <param name="connection">The connection to copy the settings from.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.OnChanged(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.ConnectionEventArgs)">
            <summary>
            Raises the <see cref="E:System.Data.SQLite.SQLiteConnection.Changed"/> event.
            </summary>
            <param name="connection">
            The connection associated with this event.  If this parameter is not
            null and the specified connection cannot raise events, then the
            registered event handlers will not be invoked.
            </param>
            <param name="e">
            A <see cref="T:System.Data.SQLite.ConnectionEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.CreateHandle(System.IntPtr)">
            <summary>
            Creates and returns a new managed database connection handle.  This
            method is intended to be used by implementations of the
            <see cref="T:System.Data.SQLite.ISQLiteConnectionPool"/> interface only.  In theory, it
            could be used by other classes; however, that usage is not supported.
            </summary>
            <param name="nativeHandle">
            This must be a native database connection handle returned by the
            SQLite core library and it must remain valid and open during the
            entire duration of the calling method.
            </param>
            <returns>
            The new managed database connection handle or null if it cannot be
            created.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.BackupDatabase(System.Data.SQLite.SQLiteConnection,System.String,System.String,System.Int32,System.Data.SQLite.SQLiteBackupCallback,System.Int32)">
            <summary>
            Backs up the database, using the specified database connection as the
            destination.
            </summary>
            <param name="destination">The destination database connection.</param>
            <param name="destinationName">The destination database name.</param>
            <param name="sourceName">The source database name.</param>
            <param name="pages">
            The number of pages to copy or negative to copy all remaining pages.
            </param>
            <param name="callback">
            The method to invoke between each step of the backup process.  This
            parameter may be null (i.e. no callbacks will be performed).
            </param>
            <param name="retryMilliseconds">
            The number of milliseconds to sleep after encountering a locking error
            during the backup process.  A value less than zero means that no sleep
            should be performed.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ClearCachedSettings">
            <summary>
            Clears the per-connection cached settings.
            </summary>
            <returns>
            The total number of per-connection settings cleared.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.TryGetCachedSetting(System.String,System.String,System.Object@)">
            <summary>
            Queries and returns the value of the specified setting, using the
            cached setting names and values for this connection, when available.
            </summary>
            <param name="name">
            The name of the setting.
            </param>
            <param name="default">
            The value to be returned if the setting has not been set explicitly
            or cannot be determined.
            </param>
            <param name="value">
            The value of the cached setting is stored here if found; otherwise,
            the value of <paramref name="default" /> is stored here.
            </param>
            <returns>
            Non-zero if the cached setting was found; otherwise, zero.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.SetCachedSetting(System.String,System.Object)">
            <summary>
            Adds or sets the cached setting specified by <paramref name="name" />
            to the value specified by <paramref name="value" />.
            </summary>
            <param name="name">
            The name of the cached setting to add or replace.
            </param>
            <param name="value">
            The new value of the cached setting.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ClearTypeMappings">
            <summary>
            Clears the per-connection type mappings.
            </summary>
            <returns>
            The total number of per-connection type mappings cleared.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetTypeMappings">
            <summary>
            Returns the per-connection type mappings.
            </summary>
            <returns>
            The per-connection type mappings -OR- null if they are unavailable.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.AddTypeMapping(System.String,System.Data.DbType,System.Boolean)">
            <summary>
            Adds a per-connection type mapping, possibly replacing one or more
            that already exist.
            </summary>
            <param name="typeName">
            The case-insensitive database type name (e.g. "MYDATE").  The value
            of this parameter cannot be null.  Using an empty string value (or
            a string value consisting entirely of whitespace) for this parameter
            is not recommended.
            </param>
            <param name="dataType">
            The <see cref="T:System.Data.DbType"/> value that should be associated with the
            specified type name.
            </param>
            <param name="primary">
            Non-zero if this mapping should be considered to be the primary one
            for the specified <see cref="T:System.Data.DbType"/>.
            </param>
            <returns>
            A negative value if nothing was done.  Zero if no per-connection type
            mappings were replaced (i.e. it was a pure add operation).  More than
            zero if some per-connection type mappings were replaced.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.BindFunction(System.Data.SQLite.SQLiteFunctionAttribute,System.Data.SQLite.SQLiteFunction)">
            <summary>
            Attempts to bind the specified <see cref="T:System.Data.SQLite.SQLiteFunction"/> object
            instance to this connection.
            </summary>
            <param name="functionAttribute">
            The <see cref="T:System.Data.SQLite.SQLiteFunctionAttribute"/> object instance containing
            the metadata for the function to be bound.
            </param>
            <param name="function">
            The <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance that implements the
            function to be bound.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Clone">
            <summary>
            Creates a clone of the connection.  All attached databases and user-defined functions are cloned.  If the existing connection is open, the cloned connection
            will also be opened.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.CreateFile(System.String)">
            <summary>
            Creates a database file.  This just creates a zero-byte file which SQLite
            will turn into a database when the file is opened properly.
            </summary>
            <param name="databaseFileName">The file to create</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.OnStateChange(System.Data.ConnectionState,System.Data.StateChangeEventArgs@)">
            <summary>
            Raises the state change event when the state of the connection changes
            </summary>
            <param name="newState">The new connection state.  If this is different
            from the previous state, the <see cref="E:System.Data.SQLite.SQLiteConnection.StateChange"/> event is
            raised.</param>
            <param name="eventArgs">The event data created for the raised event, if
            it was actually raised.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetFallbackDefaultIsolationLevel">
            <summary>
            Determines and returns the fallback default isolation level when one cannot be
            obtained from an existing connection instance.
            </summary>
            <returns>
            The fallback default isolation level for this connection instance -OR-
            <see cref="F:System.Data.IsolationLevel.Unspecified"/> if it cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetDefaultIsolationLevel">
            <summary>
            Determines and returns the default isolation level for this connection instance.
            </summary>
            <returns>
            The default isolation level for this connection instance -OR-
            <see cref="F:System.Data.IsolationLevel.Unspecified"/> if it cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.BeginTransaction(System.Data.IsolationLevel,System.Boolean)">
            <summary>
            OBSOLETE.  Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="isolationLevel">This parameter is ignored.</param>
            <param name="deferredLock">When TRUE, SQLite defers obtaining a write lock until a write operation is requested.
            When FALSE, a writelock is obtained immediately.  The default is TRUE, but in a multi-threaded multi-writer
            environment, one may instead choose to lock the database immediately to avoid any possible writer deadlock.</param>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.BeginTransaction(System.Boolean)">
            <summary>
            OBSOLETE.  Creates a new SQLiteTransaction if one isn't already active on the connection.
            </summary>
            <param name="deferredLock">When TRUE, SQLite defers obtaining a write lock until a write operation is requested.
            When FALSE, a writelock is obtained immediately.  The default is false, but in a multi-threaded multi-writer
            environment, one may instead choose to lock the database immediately to avoid any possible writer deadlock.</param>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new <see cref="T:System.Data.SQLite.SQLiteTransaction"/> if one isn't already active on the connection.
            </summary>
            <param name="isolationLevel">Supported isolation levels are Serializable, ReadCommitted and Unspecified.</param>
            <remarks>
            Unspecified will use the default isolation level specified in the connection string.  If no isolation level is specified in the
            connection string, Serializable is used.
            Serializable transactions are the default.  In this mode, the engine gets an immediate lock on the database, and no other threads
            may begin a transaction.  Other threads may read from the database, but not write.
            With a ReadCommitted isolation level, locks are deferred and elevated as needed.  It is possible for multiple threads to start
            a transaction in ReadCommitted mode, but if a thread attempts to commit a transaction while another thread
            has a ReadCommitted lock, it may timeout or cause a deadlock on both threads until both threads' CommandTimeout's are reached.
            </remarks>
            <returns>Returns a SQLiteTransaction object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Creates a new <see cref="T:System.Data.SQLite.SQLiteTransaction"/> if one isn't already
            active on the connection.
            </summary>
            <returns>Returns the new transaction object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Forwards to the local <see cref="M:System.Data.SQLite.SQLiteConnection.BeginTransaction(System.Data.IsolationLevel)"/> function
            </summary>
            <param name="isolationLevel">Supported isolation levels are Unspecified, Serializable, and ReadCommitted</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ChangeDatabase(System.String)">
            <summary>
            This method is not implemented; however, the <see cref="E:System.Data.SQLite.SQLiteConnection.Changed"/>
            event will still be raised.
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Close">
            <summary>
            When the database connection is closed, all commands linked to this connection are automatically reset.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ClearPool(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Clears the connection pool associated with the connection.  Any other active connections using the same database file
            will be discarded instead of returned to the pool when they are closed.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ClearAllPools">
            <summary>
            Clears all connection pools.  Any active connections will be discarded instead of sent to the pool when they are closed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.CreateCommand">
            <summary>
            Create a new <see cref="T:System.Data.SQLite.SQLiteCommand"/> and associate it with this connection.
            </summary>
            <returns>Returns a new command object already assigned to this connection.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.CreateDbCommand">
            <summary>
            Forwards to the local <see cref="M:System.Data.SQLite.SQLiteConnection.CreateCommand"/> function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ParseConnectionString(System.String)">
            <summary>
            Parses the connection string into component parts using the custom
            connection string parser.
            </summary>
            <param name="connectionString">The connection string to parse</param>
            <returns>An array of key-value pairs representing each parameter of the connection string</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ParseConnectionStringViaFramework(System.String,System.Boolean)">
            <summary>
            Parses a connection string using the built-in (i.e. framework provided)
            connection string parser class and returns the key/value pairs.  An
            exception may be thrown if the connection string is invalid or cannot be
            parsed.  When compiled for the .NET Compact Framework, the custom
            connection string parser is always used instead because the framework
            provided one is unavailable there.
            </summary>
            <param name="connectionString">
            The connection string to parse.
            </param>
            <param name="strict">
            Non-zero to throw an exception if any connection string values are not of
            the <see cref="T:System.String"/> type.
            </param>
            <returns>The list of key/value pairs.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Manual distributed transaction enlistment support
            </summary>
            <param name="transaction">The distributed transaction to enlist in</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.FindKey(System.Collections.Generic.SortedList{System.String,System.String},System.String,System.String)">
            <summary>
            Looks for a key in the array of key/values of the parameter string.  If not found, return the specified default value
            </summary>
            <param name="items">The list to look in</param>
            <param name="key">The key to find</param>
            <param name="defValue">The default value to return if the key is not found</param>
            <returns>The value corresponding to the specified key, or the default value if not found.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.TryParseEnum(System.Type,System.String,System.Boolean)">
            <summary>
            Attempts to convert the string value to an enumerated value of the specified type.
            </summary>
            <param name="type">The enumerated type to convert the string value to.</param>
            <param name="value">The string value to be converted.</param>
            <param name="ignoreCase">Non-zero to make the conversion case-insensitive.</param>
            <returns>The enumerated value upon success or null upon error.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.TryParseByte(System.String,System.Globalization.NumberStyles,System.Byte@)">
            <summary>
            Attempts to convert an input string into a byte value.
            </summary>
            <param name="value">
            The string value to be converted.
            </param>
            <param name="style">
            The number styles to use for the conversion.
            </param>
            <param name="result">
            Upon sucess, this will contain the parsed byte value.
            Upon failure, the value of this parameter is undefined.
            </param>
            <returns>
            Non-zero upon success; zero on failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.EnableExtensions(System.Boolean)">
            <summary>
            Enables or disabled extension loading.
            </summary>
            <param name="enable">
            True to enable loading of extensions, false to disable.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.LoadExtension(System.String)">
            <summary>
            Loads a SQLite extension library from the named dynamic link library file.
            </summary>
            <param name="fileName">
            The name of the dynamic link library file containing the extension.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.LoadExtension(System.String,System.String)">
            <summary>
            Loads a SQLite extension library from the named dynamic link library file.
            </summary>
            <param name="fileName">
            The name of the dynamic link library file containing the extension.
            </param>
            <param name="procName">
            The name of the exported function used to initialize the extension.
            If null, the default "sqlite3_extension_init" will be used.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.CreateModule(System.Data.SQLite.SQLiteModule)">
            <summary>
            Creates a disposable module containing the implementation of a virtual
            table.
            </summary>
            <param name="module">
            The module object to be used when creating the disposable module.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.FromHexString(System.String)">
            <summary>
            Parses a string containing a sequence of zero or more hexadecimal
            encoded byte values and returns the resulting byte array.  The
            "0x" prefix is not allowed on the input string.
            </summary>
            <param name="text">
            The input string containing zero or more hexadecimal encoded byte
            values.
            </param>
            <returns>
            A byte array containing the parsed byte values or null if an error
            was encountered.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ToHexString(System.Byte[])">
            <summary>
            Creates and returns a string containing the hexadecimal encoded byte
            values from the input array.
            </summary>
            <param name="array">
            The input array of bytes.
            </param>
            <returns>
            The resulting string or null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.FromHexString(System.String,System.String@)">
            <summary>
            Parses a string containing a sequence of zero or more hexadecimal
            encoded byte values and returns the resulting byte array.  The
            "0x" prefix is not allowed on the input string.
            </summary>
            <param name="text">
            The input string containing zero or more hexadecimal encoded byte
            values.
            </param>
            <param name="error">
            Upon failure, this will contain an appropriate error message.
            </param>
            <returns>
            A byte array containing the parsed byte values or null if an error
            was encountered.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetDefaultPooling">
            <summary>
            This method figures out what the default connection pool setting should
            be based on the connection flags.  When present, the "Pooling" connection
            string property value always overrides the value returned by this method.
            </summary>
            <returns>
            Non-zero if the connection pool should be enabled by default; otherwise,
            zero.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetEffectiveIsolationLevel(System.Data.IsolationLevel)">
            <summary>
            Determines the transaction isolation level that should be used by
            the caller, primarily based upon the one specified by the caller.
            If mapping of transaction isolation levels is enabled, the returned
            transaction isolation level may be significantly different than the
            originally specified one.
            </summary>
            <param name="isolationLevel">
            The originally specified transaction isolation level.
            </param>
            <returns>
            The transaction isolation level that should be used.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Open">
            <summary>
            Opens the connection using the parameters found in the <see cref="P:System.Data.SQLite.SQLiteConnection.ConnectionString"/>.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.OpenAndReturn">
            <summary>
            Opens the connection using the parameters found in the <see cref="P:System.Data.SQLite.SQLiteConnection.ConnectionString"/> and then returns it.
            </summary>
            <returns>The current connection object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Cancel">
            <summary>
            This method causes any pending database operation to abort and return at
            its earliest opportunity.  This routine is typically called in response
            to a user action such as pressing "Cancel" or Ctrl-C where the user wants
            a long query operation to halt immediately.  It is safe to call this
            routine from any thread.  However, it is not safe to call this routine
            with a database connection that is closed or might close before this method
            returns.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetMemoryStatistics(System.Collections.Generic.IDictionary{System.String,System.Int64}@)">
            <summary>
            Returns various global memory statistics for the SQLite core library via
            a dictionary of key/value pairs.  Currently, only the "MemoryUsed" and
            "MemoryHighwater" keys are returned and they have values that correspond
            to the values that could be obtained via the <see cref="P:System.Data.SQLite.SQLiteConnection.MemoryUsed"/>
            and <see cref="P:System.Data.SQLite.SQLiteConnection.MemoryHighwater"/> connection properties.
            </summary>
            <param name="statistics">
            This dictionary will be populated with the global memory statistics.  It
            will be created if necessary.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ReleaseMemory">
            <summary>
            Attempts to free as much heap memory as possible for this database connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ReleaseMemory(System.Int32,System.Boolean,System.Boolean,System.Int32@,System.Boolean@,System.UInt32@)">
            <summary>
            Attempts to free N bytes of heap memory by deallocating non-essential memory
            allocations held by the database library. Memory used to cache database pages
            to improve performance is an example of non-essential memory.  This is a no-op
            returning zero if the SQLite core library was not compiled with the compile-time
            option SQLITE_ENABLE_MEMORY_MANAGEMENT.  Optionally, attempts to reset and/or
            compact the Win32 native heap, if applicable.
            </summary>
            <param name="nBytes">
            The requested number of bytes to free.
            </param>
            <param name="reset">
            Non-zero to attempt a heap reset.
            </param>
            <param name="compact">
            Non-zero to attempt heap compaction.
            </param>
            <param name="nFree">
            The number of bytes actually freed.  This value may be zero.
            </param>
            <param name="resetOk">
            This value will be non-zero if the heap reset was successful.
            </param>
            <param name="nLargest">
            The size of the largest committed free block in the heap, in bytes.
            This value will be zero unless heap compaction is enabled.
            </param>
            <returns>
            A standard SQLite return code (i.e. zero for success and non-zero
            for failure).
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.SetMemoryStatus(System.Boolean)">
            <summary>
            Sets the status of the memory usage tracking subsystem in the SQLite core library.  By default, this is enabled.
            If this is disabled, memory usage tracking will not be performed.  This is not really a per-connection value, it is
            global to the process.
            </summary>
            <param name="value">Non-zero to enable memory usage tracking, zero otherwise.</param>
            <returns>A standard SQLite return code (i.e. zero for success and non-zero for failure).</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Shutdown">
            <summary>
            Passes a shutdown request to the SQLite core library.  Does not throw
            an exception if the shutdown request fails.
            </summary>
            <returns>
            A standard SQLite return code (i.e. zero for success and non-zero for
            failure).
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Shutdown(System.Boolean,System.Boolean)">
            <summary>
            Passes a shutdown request to the SQLite core library.  Throws an
            exception if the shutdown request fails and the no-throw parameter
            is non-zero.
            </summary>
            <param name="directories">
            Non-zero to reset the database and temporary directories to their
            default values, which should be null for both.
            </param>
            <param name="noThrow">
            When non-zero, throw an exception if the shutdown request fails.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.SetExtendedResultCodes(System.Boolean)">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ResultCode">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ExtendedResultCode">
            Enables or disabled extended result codes returned by SQLite
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.LogMessage(System.Data.SQLite.SQLiteErrorCode,System.String)">
            Add a log message via the SQLite sqlite3_log interface.
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.LogMessage(System.Int32,System.String)">
            Add a log message via the SQLite sqlite3_log interface.
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ChangePassword(System.String)">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ChangePassword(System.Byte[])">
            <summary>
            Change the password (or assign a password) to an open database.
            </summary>
            <remarks>
            No readers or writers may be active for this process.  The database must already be open
            and if it already was password protected, the existing password must already have been supplied.
            </remarks>
            <param name="newPassword">The new password to assign to the database</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.SetPassword(System.String)">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.SetPassword(System.Byte[])">
            <summary>
            Sets the password for a password-protected database.  A password-protected database is
            unusable for any operation until the password has been set.
            </summary>
            <param name="databasePassword">The password for the database</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.SetAvRetry(System.Int32@,System.Int32@)">
            <summary>
            Queries or modifies the number of retries or the retry interval (in milliseconds) for
            certain I/O operations that may fail due to anti-virus software.
            </summary>
            <param name="count">The number of times to retry the I/O operation.  A negative value
            will cause the current count to be queried and replace that negative value.</param>
            <param name="interval">The number of milliseconds to wait before retrying the I/O
            operation.  This number is multiplied by the number of retry attempts so far to come
            up with the final number of milliseconds to wait.  A negative value will cause the
            current interval to be queried and replace that negative value.</param>
            <returns>Zero for success, non-zero for error.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.SetChunkSize(System.Int32)">
            <summary>
            Sets the chunk size for the primary file associated with this database
            connection.
            </summary>
            <param name="size">
            The new chunk size for the main database, in bytes.
            </param>
            <returns>
            Zero for success, non-zero for error.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.UnwrapString(System.String)">
            <summary>
            Removes one set of surrounding single -OR- double quotes from the string
            value and returns the resulting string value.  If the string is null, empty,
            or contains quotes that are not balanced, nothing is done and the original
            string value will be returned.
            </summary>
            <param name="value">The string value to process.</param>
            <returns>
            The string value, modified to remove one set of surrounding single -OR-
            double quotes, if applicable.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.ExpandFileName(System.String,System.Boolean)">
            <summary>
            Expand the filename of the data source, resolving the |DataDirectory|
            macro as appropriate.
            </summary>
            <param name="sourceFile">The database filename to expand</param>
            <param name="toFullPath">
            Non-zero if the returned file name should be converted to a full path
            (except when using the .NET Compact Framework).
            </param>
            <returns>The expanded path and filename of the filename</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetSchema">
            <overloads>
             The following commands are used to extract schema information out of the database.  Valid schema types are:
             <list type="bullet">
             <item>
             <description>MetaDataCollections</description>
             </item>
             <item>
             <description>DataSourceInformation</description>
             </item>
             <item>
             <description>Catalogs</description>
             </item>
             <item>
             <description>Columns</description>
             </item>
             <item>
             <description>ForeignKeys</description>
             </item>
             <item>
             <description>Indexes</description>
             </item>
             <item>
             <description>IndexColumns</description>
             </item>
             <item>
             <description>Tables</description>
             </item>
             <item>
             <description>Views</description>
             </item>
             <item>
             <description>ViewColumns</description>
             </item>
             </list>
             </overloads>
             <summary>
             Returns the MetaDataCollections schema
             </summary>
             <returns>A DataTable of the MetaDataCollections schema</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetSchema(System.String)">
            <summary>
            Returns schema information of the specified collection
            </summary>
            <param name="collectionName">The schema collection to retrieve</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.GetSchema(System.String,System.String[])">
            <summary>
            Retrieves schema information using the specified constraint(s) for the specified collection
            </summary>
            <param name="collectionName">The collection to retrieve</param>
            <param name="restrictionValues">The restrictions to impose</param>
            <returns>A DataTable of the specified collection</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_MetaDataCollections">
            <summary>
            Builds a MetaDataCollections schema datatable
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_DataSourceInformation">
            <summary>
            Builds a DataSourceInformation datatable
            </summary>
            <returns>DataTable</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_Columns(System.String,System.String,System.String)">
            <summary>
            Build a Columns schema
            </summary>
            <param name="strCatalog">The catalog (attached database) to query, can be null</param>
            <param name="strTable">The table to retrieve schema information for, must not be null</param>
            <param name="strColumn">The column to retrieve schema information for, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_Indexes(System.String,System.String,System.String)">
            <summary>
            Returns index information for the given database and catalog
            </summary>
            <param name="strCatalog">The catalog (attached database) to query, can be null</param>
            <param name="strIndex">The name of the index to retrieve information for, can be null</param>
            <param name="strTable">The table to retrieve index information for, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_Tables(System.String,System.String,System.String)">
            <summary>
            Retrieves table schema information for the database and catalog
            </summary>
            <param name="strCatalog">The catalog (attached database) to retrieve tables on</param>
            <param name="strTable">The table to retrieve, can be null</param>
            <param name="strType">The table type, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_Views(System.String,System.String)">
            <summary>
            Retrieves view schema information for the database
            </summary>
            <param name="strCatalog">The catalog (attached database) to retrieve views on</param>
            <param name="strView">The view name, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_Catalogs(System.String)">
            <summary>
            Retrieves catalog (attached databases) schema information for the database
            </summary>
            <param name="strCatalog">The catalog to retrieve, can be null</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_IndexColumns(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the base column information for indexes in a database
            </summary>
            <param name="strCatalog">The catalog to retrieve indexes for (can be null)</param>
            <param name="strTable">The table to restrict index information by (can be null)</param>
            <param name="strIndex">The index to restrict index information by (can be null)</param>
            <param name="strColumn">The source column to restrict index information by (can be null)</param>
            <returns>A DataTable containing the results</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_ViewColumns(System.String,System.String,System.String)">
            <summary>
            Returns detailed column information for a specified view
            </summary>
            <param name="strCatalog">The catalog to retrieve columns for (can be null)</param>
            <param name="strView">The view to restrict column information by (can be null)</param>
            <param name="strColumn">The source column to restrict column information by (can be null)</param>
            <returns>A DataTable containing the results</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnection.Schema_ForeignKeys(System.String,System.String,System.String)">
            <summary>
            Retrieves foreign key information from the specified set of filters
            </summary>
            <param name="strCatalog">An optional catalog to restrict results on</param>
            <param name="strTable">An optional table to restrict results on</param>
            <param name="strKeyName">An optional foreign key name to restrict results on</param>
            <returns>A DataTable with the results of the query</returns>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection._handlers">
            <summary>
            Static variable to store the connection event handlers to call.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection.StateChange">
            <summary>
            This event is raised whenever the database is opened or closed.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection.Changed">
            <summary>
            This event is raised when events related to the lifecycle of a
            SQLiteConnection object occur.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.ConnectionPool">
            <summary>
            This property is used to obtain or set the custom connection pool
            implementation to use, if any.  Setting this property to null will
            cause the default connection pool implementation to be used.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.PoolCount">
            <summary>
            Returns the number of pool entries for the file name associated with this connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.ConnectionString">
            <summary>
            The connection string containing the parameters for the connection
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameter</term>
            <term>Values</term>
            <term>Required</term>
            <term>Default</term>
            </listheader>
            <item>
            <description>Data Source</description>
            <description>
            This may be a file name, the string ":memory:", or any supported URI (starting with SQLite 3.7.7).
            Starting with release 1.0.86.0, in order to use more than one consecutive backslash (e.g. for a
            UNC path), each of the adjoining backslash characters must be doubled (e.g. "\\Network\Share\test.db"
            would become "\\\\Network\Share\test.db").
            </description>
            <description>Y</description>
            <description></description>
            </item>
            <item>
            <description>Version</description>
            <description>3</description>
            <description>N</description>
            <description>3</description>
            </item>
            <item>
            <description>UseUTF16Encoding</description>
            <description><b>True</b><br/><b>False</b></description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>DateTimeFormat</description>
            <description>
            <b>Ticks</b> - Use the value of DateTime.Ticks.<br/>
            <b>ISO8601</b> - Use the ISO-8601 format.  Uses the "yyyy-MM-dd HH:mm:ss.FFFFFFFK" format for UTC
            DateTime values and "yyyy-MM-dd HH:mm:ss.FFFFFFF" format for local DateTime values).<br/>
            <b>JulianDay</b> - The interval of time in days and fractions of a day since January 1, 4713 BC.<br/>
            <b>UnixEpoch</b> - The whole number of seconds since the Unix epoch (January 1, 1970).<br/>
            <b>InvariantCulture</b> - Any culture-independent string value that the .NET Framework can interpret as a valid DateTime.<br/>
            <b>CurrentCulture</b> - Any string value that the .NET Framework can interpret as a valid DateTime using the current culture.</description>
            <description>N</description>
            <description>ISO8601</description>
            </item>
            <item>
            <description>DateTimeKind</description>
            <description><b>Unspecified</b> - Not specified as either UTC or local time.<br/><b>Utc</b> - The time represented is UTC.<br/><b>Local</b> - The time represented is local time.</description>
            <description>N</description>
            <description>Unspecified</description>
            </item>
            <item>
            <description>DateTimeFormatString</description>
            <description>The exact DateTime format string to use for all formatting and parsing of all DateTime
            values for this connection.</description>
            <description>N</description>
            <description>null</description>
            </item>
            <item>
            <description>BaseSchemaName</description>
            <description>Some base data classes in the framework (e.g. those that build SQL queries dynamically)
            assume that an ADO.NET provider cannot support an alternate catalog (i.e. database) without supporting
            alternate schemas as well; however, SQLite does not fit into this model.  Therefore, this value is used
            as a placeholder and removed prior to preparing any SQL statements that may contain it.</description>
            <description>N</description>
            <description>sqlite_default_schema</description>
            </item>
            <item>
            <description>BinaryGUID</description>
            <description><b>True</b> - Store GUID columns in binary form<br/><b>False</b> - Store GUID columns as text</description>
            <description>N</description>
            <description>True</description>
            </item>
            <item>
            <description>Cache Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>2000</description>
            </item>
            <item>
            <description>Synchronous</description>
            <description><b>Normal</b> - Normal file flushing behavior<br/><b>Full</b> - Full flushing after all writes<br/><b>Off</b> - Underlying OS flushes I/O's</description>
            <description>N</description>
            <description>Full</description>
            </item>
            <item>
            <description>Page Size</description>
            <description>{size in bytes}</description>
            <description>N</description>
            <description>1024</description>
            </item>
            <item>
            <description>Password</description>
            <description>{password} - Using this parameter requires that the CryptoAPI based codec be enabled at compile-time for both the native interop assembly and the core managed assemblies; otherwise, using this parameter may result in an exception being thrown when attempting to open the connection.</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>HexPassword</description>
            <description>{hexPassword} - Must contain a sequence of zero or more hexadecimal encoded byte values without a leading "0x" prefix.  Using this parameter requires that the CryptoAPI based codec be enabled at compile-time for both the native interop assembly and the core managed assemblies; otherwise, using this parameter may result in an exception being thrown when attempting to open the connection.</description>
            <description>N</description>
            <description></description>
            </item>
            <item>
            <description>Enlist</description>
            <description><b>Y</b> - Automatically enlist in distributed transactions<br/><b>N</b> - No automatic enlistment</description>
            <description>N</description>
            <description>Y</description>
            </item>
            <item>
            <description>Pooling</description>
            <description>
            <b>True</b> - Use connection pooling.<br/>
            <b>False</b> - Do not use connection pooling.<br/><br/>
            <b>WARNING:</b> When using the default connection pool implementation,
            setting this property to True should be avoided by applications that
            make use of COM (either directly or indirectly) due to possible
            deadlocks that can occur during the finalization of some COM objects.
            </description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>FailIfMissing</description>
            <description><b>True</b> - Don't create the database if it does not exist, throw an error instead<br/><b>False</b> - Automatically create the database if it does not exist</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Page Count</description>
            <description>{size in pages} - Limits the maximum number of pages (limits the size) of the database</description>
            <description>N</description>
            <description>0</description>
            </item>
            <item>
            <description>Legacy Format</description>
            <description><b>True</b> - Use the more compatible legacy 3.x database format<br/><b>False</b> - Use the newer 3.3x database format which compresses numbers more effectively</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Default Timeout</description>
            <description>{time in seconds}<br/>The default command timeout</description>
            <description>N</description>
            <description>30</description>
            </item>
            <item>
            <description>Journal Mode</description>
            <description><b>Delete</b> - Delete the journal file after a commit<br/><b>Persist</b> - Zero out and leave the journal file on disk after a commit<br/><b>Off</b> - Disable the rollback journal entirely</description>
            <description>N</description>
            <description>Delete</description>
            </item>
            <item>
            <description>Read Only</description>
            <description><b>True</b> - Open the database for read only access<br/><b>False</b> - Open the database for normal read/write access</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Max Pool Size</description>
            <description>The maximum number of connections for the given connection string that can be in the connection pool</description>
            <description>N</description>
            <description>100</description>
            </item>
            <item>
            <description>Default IsolationLevel</description>
            <description>The default transaciton isolation level</description>
            <description>N</description>
            <description>Serializable</description>
            </item>
            <item>
            <description>Foreign Keys</description>
            <description>Enable foreign key constraints</description>
            <description>N</description>
            <description>False</description>
            </item>
            <item>
            <description>Flags</description>
            <description>Extra behavioral flags for the connection.  See the <see cref="T:System.Data.SQLite.SQLiteConnectionFlags"/> enumeration for possible values.</description>
            <description>N</description>
            <description>Default</description>
            </item>
            <item>
            <description>SetDefaults</description>
            <description>
            <b>True</b> - Apply the default connection settings to the opened database.<br/>
            <b>False</b> - Skip applying the default connection settings to the opened database.
            </description>
            <description>N</description>
            <description>True</description>
            </item>
            <item>
            <description>ToFullPath</description>
            <description>
            <b>True</b> - Attempt to expand the data source file name to a fully qualified path before opening.<br/>
            <b>False</b> - Skip attempting to expand the data source file name to a fully qualified path before opening.
            </description>
            <description>N</description>
            <description>True</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.DataSource">
            <summary>
            Returns the data source file name without extension or path.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.Database">
            <summary>
            Returns the string "main".
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.DefaultTimeout">
            <summary>
            Gets/sets the default command timeout for newly-created commands.  This is especially useful for
            commands used internally such as inside a SQLiteTransaction, where setting the timeout is not possible.
            This can also be set in the ConnectionString with "Default Timeout"
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.ParseViaFramework">
            <summary>
            Non-zero if the built-in (i.e. framework provided) connection string
            parser should be used when opening the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.Flags">
            <summary>
            Gets/sets the extra behavioral flags for this connection.  See the
            <see cref="T:System.Data.SQLite.SQLiteConnectionFlags"/> enumeration for a list of
            possible values.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.DefaultDbType">
            <summary>
            Gets/sets the default database type for this connection.  This value
            will only be used when not null.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.DefaultTypeName">
            <summary>
            Gets/sets the default database type name for this connection.  This
            value will only be used when not null.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.OwnHandle">
            <summary>
            Returns non-zero if the underlying native connection handle is
            owned by this instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.ServerVersion">
            <summary>
            Returns the version of the underlying SQLite database engine
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.LastInsertRowId">
            <summary>
            Returns the rowid of the most recent successful INSERT into the database from this connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.Changes">
            <summary>
            Returns the number of rows changed by the last INSERT, UPDATE, or DELETE statement executed on
            this connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.AutoCommit">
            <summary>
            Returns non-zero if the given database connection is in autocommit mode.
            Autocommit mode is on by default.  Autocommit mode is disabled by a BEGIN
            statement.  Autocommit mode is re-enabled by a COMMIT or ROLLBACK.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.MemoryUsed">
            <summary>
            Returns the amount of memory (in bytes) currently in use by the SQLite core library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.MemoryHighwater">
            <summary>
            Returns the maximum amount of memory (in bytes) used by the SQLite core library since the high-water mark was last reset.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.DefineConstants">
            <summary>
            Returns a string containing the define constants (i.e. compile-time
            options) used to compile the core managed assembly, delimited with
            spaces.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.SQLiteVersion">
            <summary>
            Returns the version of the underlying SQLite core library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.SQLiteSourceId">
            <summary>
            This method returns the string whose value is the same as the
            SQLITE_SOURCE_ID C preprocessor macro used when compiling the
            SQLite core library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.SQLiteCompileOptions">
            <summary>
            Returns a string containing the compile-time options used to
            compile the SQLite core native library, delimited with spaces.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.InteropVersion">
            <summary>
            This method returns the version of the interop SQLite assembly
            used.  If the SQLite interop assembly is not in use or the
            necessary information cannot be obtained for any reason, a null
            value may be returned.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.InteropSourceId">
            <summary>
            This method returns the string whose value contains the unique
            identifier for the source checkout used to build the interop
            assembly.  If the SQLite interop assembly is not in use or the
            necessary information cannot be obtained for any reason, a null
            value may be returned.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.InteropCompileOptions">
            <summary>
            Returns a string containing the compile-time options used to
            compile the SQLite interop assembly, delimited with spaces.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.ProviderVersion">
            <summary>
            This method returns the version of the managed components used
            to interact with the SQLite core library.  If the necessary
            information cannot be obtained for any reason, a null value may
            be returned.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.ProviderSourceId">
            <summary>
            This method returns the string whose value contains the unique
            identifier for the source checkout used to build the managed
            components currently executing.  If the necessary information
            cannot be obtained for any reason, a null value may be returned.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.SharedFlags">
            <summary>
            The extra connection flags to be used for all opened connections.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.State">
            <summary>
            Returns the state of the connection.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection.Authorize">
            <summary>
            This event is raised whenever SQLite encounters an action covered by the
            authorizer during query preparation.  Changing the value of the
            <see cref="F:System.Data.SQLite.AuthorizerEventArgs.ReturnCode"/> property will determine if
            the specific action will be allowed, ignored, or denied.  For the entire
            duration of the event, the associated connection and statement objects
            must not be modified, either directly or indirectly, by the called code.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection.Update">
            <summary>
            This event is raised whenever SQLite makes an update/delete/insert into the database on
            this connection.  It only applies to the given connection.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection.Commit">
            <summary>
            This event is raised whenever SQLite is committing a transaction.
            Return non-zero to trigger a rollback.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection.Trace">
            <summary>
            This event is raised whenever SQLite statement first begins executing on
            this connection.  It only applies to the given connection.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteConnection.RollBack">
            <summary>
            This event is raised whenever SQLite is rolling back a transaction.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnection.DbProviderFactory">
            <summary>
            Returns the <see cref="T:System.Data.SQLite.SQLiteFactory"/> instance.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SynchronizationModes">
            <summary>
            The I/O file cache flushing behavior for the connection
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SynchronizationModes.Normal">
            <summary>
            Normal file flushing at critical sections of the code
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SynchronizationModes.Full">
            <summary>
            Full file flushing after every write operation
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SynchronizationModes.Off">
            <summary>
            Use the default operating system's file flushing, SQLite does not explicitly flush the file buffers after writing
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteAuthorizerEventHandler">
            <summary>
            Raised when authorization is required to perform an action contained
            within a SQL query.
            </summary>
            <param name="sender">The connection performing the action.</param>
            <param name="e">A <see cref="T:System.Data.SQLite.AuthorizerEventArgs"/> that contains the
            event data.</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteCommitHandler">
            <summary>
            Raised when a transaction is about to be committed.  To roll back a transaction, set the
            rollbackTrans boolean value to true.
            </summary>
            <param name="sender">The connection committing the transaction</param>
            <param name="e">Event arguments on the transaction</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteUpdateEventHandler">
            <summary>
            Raised when data is inserted, updated and deleted on a given connection
            </summary>
            <param name="sender">The connection committing the transaction</param>
            <param name="e">The event parameters which triggered the event</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteTraceEventHandler">
            <summary>
            Raised when a statement first begins executing on a given connection
            </summary>
            <param name="sender">The connection executing the statement</param>
            <param name="e">Event arguments of the trace</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteBackupCallback">
            <summary>
            Raised between each backup step.
            </summary>
            <param name="source">
            The source database connection.
            </param>
            <param name="sourceName">
            The source database name.
            </param>
            <param name="destination">
            The destination database connection.
            </param>
            <param name="destinationName">
            The destination database name.
            </param>
            <param name="pages">
            The number of pages copied with each step.
            </param>
            <param name="remainingPages">
            The number of pages remaining to be copied.
            </param>
            <param name="totalPages">
            The total number of pages in the source database.
            </param>
            <param name="retry">
            Set to true if the operation needs to be retried due to database
            locking issues; otherwise, set to false.
            </param>
            <returns>
            True to continue with the backup process or false to halt the backup
            process, rolling back any changes that have been made so far.
            </returns>
        </member>
        <member name="T:System.Data.SQLite.AuthorizerEventArgs">
            <summary>
            The data associated with a call into the authorizer.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.AuthorizerEventArgs.UserData">
            <summary>
            The user-defined native data associated with this event.  Currently,
            this will always contain the value of <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.AuthorizerEventArgs.ActionCode">
            <summary>
            The action code responsible for the current call into the authorizer.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.AuthorizerEventArgs.Argument1">
            <summary>
            The first string argument for the current call into the authorizer.
            The exact value will vary based on the action code, see the
            <see cref="T:System.Data.SQLite.SQLiteAuthorizerActionCode"/> enumeration for possible
            values.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.AuthorizerEventArgs.Argument2">
            <summary>
            The second string argument for the current call into the authorizer.
            The exact value will vary based on the action code, see the
            <see cref="T:System.Data.SQLite.SQLiteAuthorizerActionCode"/> enumeration for possible
            values.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.AuthorizerEventArgs.Database">
            <summary>
            The database name for the current call into the authorizer, if
            applicable.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.AuthorizerEventArgs.Context">
            <summary>
            The name of the inner-most trigger or view that is responsible for
            the access attempt or a null value if this access attempt is directly
            from top-level SQL code.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.AuthorizerEventArgs.ReturnCode">
            <summary>
            The return code for the current call into the authorizer.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.AuthorizerEventArgs.#ctor">
            <summary>
            Constructs an instance of this class with default property values.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.AuthorizerEventArgs.#ctor(System.IntPtr,System.Data.SQLite.SQLiteAuthorizerActionCode,System.String,System.String,System.String,System.String,System.Data.SQLite.SQLiteAuthorizerReturnCode)">
            <summary>
            Constructs an instance of this class with specific property values.
            </summary>
            <param name="pUserData">
            The user-defined native data associated with this event.
            </param>
            <param name="actionCode">
            The authorizer action code.
            </param>
            <param name="argument1">
            The first authorizer argument.
            </param>
            <param name="argument2">
            The second authorizer argument.
            </param>
            <param name="database">
            The database name, if applicable.
            </param>
            <param name="context">
            The name of the inner-most trigger or view that is responsible for
            the access attempt or a null value if this access attempt is directly
            from top-level SQL code.
            </param>
            <param name="returnCode">
            The authorizer return code.
            </param>
        </member>
        <member name="T:System.Data.SQLite.UpdateEventType">
            <summary>
            Whenever an update event is triggered on a connection, this enum will indicate
            exactly what type of operation is being performed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UpdateEventType.Delete">
            <summary>
            A row is being deleted from the given database and table
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UpdateEventType.Insert">
            <summary>
            A row is being inserted into the table.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UpdateEventType.Update">
            <summary>
            A row is being updated in the table.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.UpdateEventArgs">
            <summary>
            Passed during an Update callback, these event arguments detail the type of update operation being performed
            on the given connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UpdateEventArgs.Database">
            <summary>
            The name of the database being updated (usually "main" but can be any attached or temporary database)
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UpdateEventArgs.Table">
            <summary>
            The name of the table being updated
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UpdateEventArgs.Event">
            <summary>
            The type of update being performed (insert/update/delete)
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UpdateEventArgs.RowId">
            <summary>
            The RowId affected by this update.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.CommitEventArgs">
            <summary>
            Event arguments raised when a transaction is being committed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CommitEventArgs.AbortTransaction">
            <summary>
            Set to true to abort the transaction and trigger a rollback
            </summary>
        </member>
        <member name="T:System.Data.SQLite.TraceEventArgs">
            <summary>
            Passed during an Trace callback, these event arguments contain the UTF-8 rendering of the SQL statement text
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TraceEventArgs.Statement">
            <summary>
            SQL statement text as the statement first begins executing
            </summary>
        </member>
        <member name="T:System.Data.SQLite.ISQLiteConnectionPool">
            <summary>
            This interface represents a custom connection pool implementation
            usable by System.Data.SQLite.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteConnectionPool.GetCounts(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Counts the number of pool entries matching the specified file name.
            </summary>
            <param name="fileName">
            The file name to match or null to match all files.
            </param>
            <param name="counts">
            The pool entry counts for each matching file.
            </param>
            <param name="openCount">
            The total number of connections successfully opened from any pool.
            </param>
            <param name="closeCount">
            The total number of connections successfully closed from any pool.
            </param>
            <param name="totalCount">
            The total number of pool entries for all matching files.
            </param>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteConnectionPool.ClearPool(System.String)">
            <summary>
            Disposes of all pooled connections associated with the specified
            database file name.
            </summary>
            <param name="fileName">
            The database file name.
            </param>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteConnectionPool.ClearAllPools">
            <summary>
            Disposes of all pooled connections.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteConnectionPool.Add(System.String,System.Object,System.Int32)">
            <summary>
            Adds a connection to the pool of those associated with the
            specified database file name.
            </summary>
            <param name="fileName">
            The database file name.
            </param>
            <param name="handle">
            The database connection handle.
            </param>
            <param name="version">
            The connection pool version at the point the database connection
            handle was received from the connection pool.  This is also the
            connection pool version that the database connection handle was
            created under.
            </param>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteConnectionPool.Remove(System.String,System.Int32,System.Int32@)">
            <summary>
            Removes a connection from the pool of those associated with the
            specified database file name with the intent of using it to
            interact with the database.
            </summary>
            <param name="fileName">
            The database file name.
            </param>
            <param name="maxPoolSize">
            The new maximum size of the connection pool for the specified
            database file name.
            </param>
            <param name="version">
            The connection pool version associated with the returned database
            connection handle, if any.
            </param>
            <returns>
            The database connection handle associated with the specified
            database file name or null if it cannot be obtained.
            </returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConnectionPool">
            <summary>
            This default method implementations in this class should not be used by
            applications that make use of COM (either directly or indirectly) due
            to possible deadlocks that can occur during finalization of some COM
            objects.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool._syncRoot">
            <summary>
            This field is used to synchronize access to the private static data
            in this class.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool._connectionPool">
            <summary>
            When this field is non-null, it will be used to provide the
            implementation of all the connection pool methods; otherwise,
            the default method implementations will be used.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool._queueList">
            <summary>
            The dictionary of connection pools, based on the normalized file
            name of the SQLite database.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool._poolVersion">
            <summary>
            The default version number new pools will get.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool._poolOpened">
            <summary>
            The number of connections successfully opened from any pool.
            This value is incremented by the Remove method.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool._poolClosed">
            <summary>
            The number of connections successfully closed from any pool.
            This value is incremented by the Add method.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.GetCounts(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32}@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Counts the number of pool entries matching the specified file name.
            </summary>
            <param name="fileName">
            The file name to match or null to match all files.
            </param>
            <param name="counts">
            The pool entry counts for each matching file.
            </param>
            <param name="openCount">
            The total number of connections successfully opened from any pool.
            </param>
            <param name="closeCount">
            The total number of connections successfully closed from any pool.
            </param>
            <param name="totalCount">
            The total number of pool entries for all matching files.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.ClearPool(System.String)">
            <summary>
            Disposes of all pooled connections associated with the specified
            database file name.
            </summary>
            <param name="fileName">
            The database file name.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.ClearAllPools">
            <summary>
            Disposes of all pooled connections.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.Add(System.String,System.Data.SQLite.SQLiteConnectionHandle,System.Int32)">
            <summary>
            Adds a connection to the pool of those associated with the
            specified database file name.
            </summary>
            <param name="fileName">
            The database file name.
            </param>
            <param name="handle">
            The database connection handle.
            </param>
            <param name="version">
            The connection pool version at the point the database connection
            handle was received from the connection pool.  This is also the
            connection pool version that the database connection handle was
            created under.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.Remove(System.String,System.Int32,System.Int32@)">
            <summary>
            Removes a connection from the pool of those associated with the
            specified database file name with the intent of using it to
            interact with the database.
            </summary>
            <param name="fileName">
            The database file name.
            </param>
            <param name="maxPoolSize">
            The new maximum size of the connection pool for the specified
            database file name.
            </param>
            <param name="version">
            The connection pool version associated with the returned database
            connection handle, if any.
            </param>
            <returns>
            The database connection handle associated with the specified
            database file name or null if it cannot be obtained.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.GetConnectionPool">
            <summary>
            This method is used to obtain a reference to the custom connection
            pool implementation currently in use, if any.
            </summary>
            <returns>
            The custom connection pool implementation or null if the default
            connection pool implementation should be used.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.SetConnectionPool(System.Data.SQLite.ISQLiteConnectionPool)">
            <summary>
            This method is used to set the reference to the custom connection
            pool implementation to use, if any.
            </summary>
            <param name="connectionPool">
            The custom connection pool implementation to use or null if the
            default connection pool implementation should be used.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.ResizePool(System.Data.SQLite.SQLiteConnectionPool.PoolQueue,System.Boolean)">
            <summary>
            We do not have to thread-lock anything in this function, because it
            is only called by other functions above which already take the lock.
            </summary>
            <param name="queue">
            The pool queue to resize.
            </param>
            <param name="add">
            If a function intends to add to the pool, this is true, which
            forces the resize to take one more than it needs from the pool.
            </param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConnectionPool.PoolQueue">
            <summary>
            Keeps track of connections made on a specified file.  The PoolVersion
            dictates whether old objects get returned to the pool or discarded
            when no longer in use.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool.PoolQueue.Queue">
            <summary>
            The queue of weak references to the actual database connection
            handles.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool.PoolQueue.PoolVersion">
            <summary>
            This pool version associated with the database connection
            handles in this pool queue.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionPool.PoolQueue.MaxPoolSize">
            <summary>
            The maximum size of this pool queue.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionPool.PoolQueue.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a connection pool queue using the specified version
            and maximum size.  Normally, all the database connection
            handles in this pool are associated with a single database file
            name.
            </summary>
            <param name="version">
            The initial pool version for this connection pool queue.
            </param>
            <param name="maxSize">
            The initial maximum size for this connection pool queue.
            </param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConnectionStringBuilder">
            <summary>
            SQLite implementation of DbConnectionStringBuilder.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionStringBuilder._properties">
            <summary>
            Properties of this class
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionStringBuilder.#ctor">
            <overloads>
            Constructs a new instance of the class
            </overloads>
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Constructs a new instance of the class using the specified connection string.
            </summary>
            <param name="connectionString">The connection string to parse</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionStringBuilder.Initialize(System.String)">
            <summary>
            Private initializer, which assigns the connection string and resets the builder
            </summary>
            <param name="cnnString">The connection string to assign</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Helper function for retrieving values from the connectionstring
            </summary>
            <param name="keyword">The keyword to retrieve settings for</param>
            <param name="value">The resulting parameter value</param>
            <returns>Returns true if the value was found and returned</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteConnectionStringBuilder.FallbackGetProperties(System.Collections.Hashtable)">
            <summary>
            Fallback method for MONO, which doesn't implement DbConnectionStringBuilder.GetProperties()
            </summary>
            <param name="propertyList">The hashtable to fill with property descriptors</param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.Version">
            <summary>
            Gets/Sets the default version of the SQLite engine to instantiate.  Currently the only valid value is 3, indicating version 3 of the sqlite library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.SyncMode">
            <summary>
            Gets/Sets the synchronization mode (file flushing) of the connection string.  Default is "Normal".
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.UseUTF16Encoding">
            <summary>
            Gets/Sets the encoding for the connection string.  The default is "False" which indicates UTF-8 encoding.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.Pooling">
            <summary>
            Gets/Sets whether or not to use connection pooling.  The default is "False"
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.BinaryGUID">
            <summary>
            Gets/Sets whethor not to store GUID's in binary format.  The default is True
            which saves space in the database.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DataSource">
            <summary>
            Gets/Sets the filename to open on the connection string.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.Uri">
            <summary>
            An alternate to the data source property
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.FullUri">
            <summary>
            An alternate to the data source property that uses the SQLite URI syntax.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DefaultTimeout">
            <summary>
            Gets/sets the default command timeout for newly-created commands.  This is especially useful for 
            commands used internally such as inside a SQLiteTransaction, where setting the timeout is not possible.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.Enlist">
            <summary>
            Determines whether or not the connection will automatically participate
            in the current distributed transaction (if one exists)
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.FailIfMissing">
            <summary>
            If set to true, will throw an exception if the database specified in the connection
            string does not exist.  If false, the database will be created automatically.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.LegacyFormat">
            <summary>
            If enabled, uses the legacy 3.xx format for maximum compatibility, but results in larger
            database sizes.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.ReadOnly">
            <summary>
            When enabled, the database will be opened for read-only access and writing will be disabled.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.Password">
            <summary>
            Gets/sets the database encryption password
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.HexPassword">
            <summary>
            Gets/sets the database encryption hexadecimal password
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.PageSize">
            <summary>
            Gets/Sets the page size for the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.MaxPageCount">
            <summary>
            Gets/Sets the maximum number of pages the database may hold
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.CacheSize">
            <summary>
            Gets/Sets the cache size for the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DateTimeFormat">
            <summary>
            Gets/Sets the DateTime format for the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DateTimeKind">
            <summary>
            Gets/Sets the DateTime kind for the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DateTimeFormatString">
            <summary>
            Gets/sets the DateTime format string used for formatting
            and parsing purposes.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.BaseSchemaName">
            <summary>
            Gets/Sets the placeholder base schema name used for
            .NET Framework compatibility purposes.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.JournalMode">
            <summary>
            Determines how SQLite handles the transaction journal file.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DefaultIsolationLevel">
            <summary>
            Sets the default isolation level for transactions on the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DefaultDbType">
            <summary>
            Gets/sets the default database type for the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.DefaultTypeName">
            <summary>
            Gets/sets the default type name for the connection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.ForeignKeys">
            <summary>
            If enabled, use foreign key constraints
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.Flags">
            <summary>
            Gets/Sets the extra behavioral flags.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.SetDefaults">
            <summary>
            If enabled, apply the default connection settings to opened databases.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.ToFullPath">
            <summary>
            If enabled, attempt to resolve the provided data source file name to a
            full path before opening.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteConnectionStringBuilder.NoSharedFlags">
            <summary>
            If enabled, skip using the configured shared connection flags.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.TypeAffinity">
            <summary>
            SQLite has very limited types, and is inherently text-based.  The first 5 types below represent the sum of all types SQLite
            understands.  The DateTime extension to the spec is for internal use only.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.Uninitialized">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.Int64">
            <summary>
            All integers in SQLite default to Int64
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.Double">
            <summary>
            All floating point numbers in SQLite default to double
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.Text">
            <summary>
            The default data type of SQLite is text
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.Blob">
            <summary>
            Typically blob types are only seen when returned from a function
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.Null">
            <summary>
            Null types can be returned from functions
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.DateTime">
            <summary>
            Used internally by this provider
            </summary>
        </member>
        <member name="F:System.Data.SQLite.TypeAffinity.None">
            <summary>
            Used internally by this provider
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteConnectionEventType">
            <summary>
            These are the event types associated with the
            <see cref="T:System.Data.SQLite.SQLiteConnectionEventHandler"/>
            delegate (and its corresponding event) and the
            <see cref="T:System.Data.SQLite.ConnectionEventArgs"/> class.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.Invalid">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.Unknown">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.Opening">
            <summary>
            The connection is being opened.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.ConnectionString">
            <summary>
            The connection string has been parsed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.Opened">
            <summary>
            The connection was opened.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.ChangeDatabase">
            <summary>
            The <see cref="F:System.Data.SQLite.SQLiteConnectionEventType.ChangeDatabase"/> method was called on the
            connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.NewTransaction">
            <summary>
            A transaction was created using the connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.EnlistTransaction">
            <summary>
            The connection was enlisted into a transaction.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.NewCommand">
            <summary>
            A command was created using the connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.NewDataReader">
            <summary>
            A data reader was created using the connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.NewCriticalHandle">
            <summary>
            An instance of a <see cref="T:System.Runtime.InteropServices.CriticalHandle"/> derived class has
            been created to wrap a native resource.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.Closing">
            <summary>
            The connection is being closed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.Closed">
            <summary>
            The connection was closed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.DisposingCommand">
            <summary>
            A command is being disposed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.DisposingDataReader">
            <summary>
            A data reader is being disposed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteConnectionEventType.ClosingDataReader">
            <summary>
            A data reader is being closed.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteDateFormats">
             <summary>
             This implementation of SQLite for ADO.NET can process date/time fields in
             databases in one of six formats.
             </summary>
             <remarks>
             ISO8601 format is more compatible, readable, fully-processable, but less
             accurate as it does not provide time down to fractions of a second.
             JulianDay is the numeric format the SQLite uses internally and is arguably
             the most compatible with 3rd party tools.  It is not readable as text
             without post-processing.  Ticks less compatible with 3rd party tools that
             query the database, and renders the DateTime field unreadable as text
             without post-processing.  UnixEpoch is more compatible with Unix systems.
             InvariantCulture allows the configured format for the invariant culture
             format to be used and is human readable.  CurrentCulture allows the
             configured format for the current culture to be used and is also human
             readable.
            
             The preferred order of choosing a DateTime format is JulianDay, ISO8601,
             and then Ticks.  Ticks is mainly present for legacy code support.
             </remarks>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDateFormats.Ticks">
            <summary>
            Use the value of DateTime.Ticks.  This value is not recommended and is not well supported with LINQ.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDateFormats.ISO8601">
            <summary>
            Use the ISO-8601 format.  Uses the "yyyy-MM-dd HH:mm:ss.FFFFFFFK" format for UTC DateTime values and
            "yyyy-MM-dd HH:mm:ss.FFFFFFF" format for local DateTime values).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDateFormats.JulianDay">
            <summary>
            The interval of time in days and fractions of a day since January 1, 4713 BC.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDateFormats.UnixEpoch">
            <summary>
            The whole number of seconds since the Unix epoch (January 1, 1970).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDateFormats.InvariantCulture">
            <summary>
            Any culture-independent string value that the .NET Framework can interpret as a valid DateTime.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDateFormats.CurrentCulture">
            <summary>
            Any string value that the .NET Framework can interpret as a valid DateTime using the current culture.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDateFormats.Default">
            <summary>
            The default format for this provider.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteJournalModeEnum">
             <summary>
             This enum determines how SQLite treats its journal file.
             </summary>
             <remarks>
             By default SQLite will create and delete the journal file when needed during a transaction.
             However, for some computers running certain filesystem monitoring tools, the rapid
             creation and deletion of the journal file can cause those programs to fail, or to interfere with SQLite.
            
             If a program or virus scanner is interfering with SQLite's journal file, you may receive errors like "unable to open database file"
             when starting a transaction.  If this is happening, you may want to change the default journal mode to Persist.
             </remarks>
        </member>
        <member name="F:System.Data.SQLite.SQLiteJournalModeEnum.Default">
            <summary>
            The default mode, this causes SQLite to use the existing journaling mode for the database.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteJournalModeEnum.Delete">
            <summary>
            SQLite will create and destroy the journal file as-needed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteJournalModeEnum.Persist">
            <summary>
            When this is set, SQLite will keep the journal file even after a transaction has completed.  It's contents will be erased,
            and the journal re-used as often as needed.  If it is deleted, it will be recreated the next time it is needed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteJournalModeEnum.Off">
            <summary>
            This option disables the rollback journal entirely.  Interrupted transactions or a program crash can cause database
            corruption in this mode!
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteJournalModeEnum.Truncate">
            <summary>
            SQLite will truncate the journal file to zero-length instead of deleting it.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteJournalModeEnum.Memory">
            <summary>
            SQLite will store the journal in volatile RAM.  This saves disk I/O but at the expense of database safety and integrity.
            If the application using SQLite crashes in the middle of a transaction when the MEMORY journaling mode is set, then the
            database file will very likely go corrupt.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteJournalModeEnum.Wal">
            <summary>
            SQLite uses a write-ahead log instead of a rollback journal to implement transactions.  The WAL journaling mode is persistent;
            after being set it stays in effect across multiple database connections and after closing and reopening the database. A database
            in WAL journaling mode can only be accessed by SQLite version 3.7.0 or later.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteSynchronousEnum">
            <summary>
            Possible values for the "synchronous" database setting.  This setting determines
            how often the database engine calls the xSync method of the VFS.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteSynchronousEnum.Default">
            <summary>
            Use the default "synchronous" database setting.  Currently, this should be
            the same as using the FULL mode.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteSynchronousEnum.Off">
            <summary>
            The database engine continues without syncing as soon as it has handed
            data off to the operating system.  If the application running SQLite
            crashes, the data will be safe, but the database might become corrupted
            if the operating system crashes or the computer loses power before that
            data has been written to the disk surface.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteSynchronousEnum.Normal">
            <summary>
            The database engine will still sync at the most critical moments, but
            less often than in FULL mode.  There is a very small (though non-zero)
            chance that a power failure at just the wrong time could corrupt the
            database in NORMAL mode.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteSynchronousEnum.Full">
            <summary>
            The database engine will use the xSync method of the VFS to ensure that
            all content is safely written to the disk surface prior to continuing.
            This ensures that an operating system crash or power failure will not
            corrupt the database.  FULL synchronous is very safe, but it is also
            slower.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteExecuteType">
            <summary>
            The requested command execution type.  This controls which method of the
            <see cref="T:System.Data.SQLite.SQLiteCommand"/> object will be called.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteExecuteType.None">
            <summary>
            Do nothing.  No method will be called.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteExecuteType.NonQuery">
            <summary>
            The command is not expected to return a result -OR- the result is not
            needed.  The <see cref="M:System.Data.SQLite.SQLiteCommand.ExecuteNonQuery"/> or
            <see cref="M:System.Data.SQLite.SQLiteCommand.ExecuteNonQuery(System.Data.CommandBehavior)"/>  method
            will be called.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteExecuteType.Scalar">
            <summary>
            The command is expected to return a scalar result -OR- the result should
            be limited to a scalar result.  The <see cref="M:System.Data.SQLite.SQLiteCommand.ExecuteScalar"/>
            or <see cref="M:System.Data.SQLite.SQLiteCommand.ExecuteScalar(System.Data.CommandBehavior)"/> method will
            be called.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteExecuteType.Reader">
            <summary>
            The command is expected to return <see cref="T:System.Data.SQLite.SQLiteDataReader"/> result.
            The <see cref="M:System.Data.SQLite.SQLiteCommand.ExecuteReader"/> or
            <see cref="M:System.Data.SQLite.SQLiteCommand.ExecuteReader(System.Data.CommandBehavior)"/> method will
            be called.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteExecuteType.Default">
            <summary>
            Use the default command execution type.  Using this value is the same
            as using the <see cref="F:System.Data.SQLite.SQLiteExecuteType.NonQuery"/> value.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteAuthorizerActionCode">
            <summary>
            The action code responsible for the current call into the authorizer.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.None">
            <summary>
            No action is being performed.  This value should not be used from
            external code.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Copy">
            <summary>
            No longer used.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateIndex">
             <summary>
             An index will be created.  The action-specific arguments are the
             index name and the table name.
            
             </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateTable">
            <summary>
            A table will be created.  The action-specific arguments are the
            table name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateTempIndex">
            <summary>
            A temporary index will be created.  The action-specific arguments
            are the index name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateTempTable">
            <summary>
            A temporary table will be created.  The action-specific arguments
            are the table name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateTempTrigger">
            <summary>
            A temporary trigger will be created.  The action-specific arguments
            are the trigger name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateTempView">
            <summary>
            A temporary view will be created.  The action-specific arguments are
            the view name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateTrigger">
            <summary>
            A trigger will be created.  The action-specific arguments are the
            trigger name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateView">
            <summary>
            A view will be created.  The action-specific arguments are the view
            name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Delete">
            <summary>
            A DELETE statement will be executed.  The action-specific arguments
            are the table name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropIndex">
            <summary>
            An index will be dropped.  The action-specific arguments are the
            index name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropTable">
            <summary>
            A table will be dropped.  The action-specific arguments are the tables
            name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropTempIndex">
            <summary>
            A temporary index will be dropped.  The action-specific arguments are
            the index name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropTempTable">
            <summary>
            A temporary table will be dropped.  The action-specific arguments are
            the table name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropTempTrigger">
            <summary>
            A temporary trigger will be dropped.  The action-specific arguments
            are the trigger name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropTempView">
            <summary>
            A temporary view will be dropped.  The action-specific arguments are
            the view name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropTrigger">
            <summary>
            A trigger will be dropped.  The action-specific arguments are the
            trigger name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropView">
            <summary>
            A view will be dropped.  The action-specific arguments are the view
            name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Insert">
            <summary>
            An INSERT statement will be executed.  The action-specific arguments
            are the table name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Pragma">
            <summary>
            A PRAGMA statement will be executed.  The action-specific arguments
            are the name of the PRAGMA and the new value or a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Read">
            <summary>
            A table column will be read.  The action-specific arguments are the
            table name and the column name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Select">
            <summary>
            A SELECT statement will be executed.  The action-specific arguments
            are both null values.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Transaction">
            <summary>
            A transaction will be started, committed, or rolled back.  The
            action-specific arguments are the name of the operation (BEGIN,
            COMMIT, or ROLLBACK) and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Update">
            <summary>
            An UPDATE statement will be executed.  The action-specific arguments
            are the table name and the column name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Attach">
            <summary>
            A database will be attached to the connection.  The action-specific
            arguments are the database file name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Detach">
            <summary>
            A database will be detached from the connection.  The action-specific
            arguments are the database name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.AlterTable">
            <summary>
            The schema of a table will be altered.  The action-specific arguments
            are the database name and the table name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Reindex">
            <summary>
            An index will be deleted and then recreated.  The action-specific
            arguments are the index name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Analyze">
            <summary>
            A table will be analyzed to gathers statistics about it.  The
            action-specific arguments are the table name and a null value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.CreateVtable">
            <summary>
            A virtual table will be created.  The action-specific arguments are
            the table name and the module name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.DropVtable">
            <summary>
            A virtual table will be dropped.  The action-specific arguments are
            the table name and the module name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Function">
            <summary>
            A SQL function will be called.  The action-specific arguments are a
            null value and the function name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Savepoint">
            <summary>
            A savepoint will be created, released, or rolled back.  The
            action-specific arguments are the name of the operation (BEGIN,
            RELEASE, or ROLLBACK) and the savepoint name.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerActionCode.Recursive">
            <summary>
            A recursive query will be executed.  The action-specific arguments
            are two null values.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteAuthorizerReturnCode">
            <summary>
            The return code for the current call into the authorizer.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerReturnCode.Ok">
            <summary>
            The action will be allowed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerReturnCode.Deny">
            <summary>
            The overall action will be disallowed and an error message will be
            returned from the query preparation method.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteAuthorizerReturnCode.Ignore">
            <summary>
            The specific action will be disallowed; however, the overall action
            will continue.  The exact effects of this return code vary depending
            on the specific action, please refer to the SQLite core library
            documentation for futher details.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteType">
            <summary>
            Class used internally to determine the datatype of a column in a resultset
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteType.Type">
            <summary>
            The DbType of the column, or DbType.Object if it cannot be determined
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteType.Affinity">
            <summary>
            The affinity of a column, used for expressions or when Type is DbType.Object
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteType.#ctor">
            <summary>
            Constructs a default instance of this type.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteType.#ctor(System.Data.SQLite.TypeAffinity,System.Data.DbType)">
            <summary>
            Constructs an instance of this type with the specified field values.
            </summary>
            <param name="affinity">
            The type affinity to use for the new instance.
            </param>
            <param name="type">
            The database type to use for the new instance.
            </param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteDataAdapter">
            <summary>
            SQLite implementation of DbDataAdapter.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataAdapter.#ctor">
            <overloads>
            This class is just a shell around the DbDataAdapter.  Nothing from
            DbDataAdapter is overridden here, just a few constructors are defined.
            </overloads>
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataAdapter.#ctor(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Constructs a data adapter using the specified select command.
            </summary>
            <param name="cmd">
            The select command to associate with the adapter.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataAdapter.#ctor(System.String,System.Data.SQLite.SQLiteConnection)">
            <summary>
            Constructs a data adapter with the supplied select command text and
            associated with the specified connection.
            </summary>
            <param name="commandText">
            The select command text to associate with the data adapter.
            </param>
            <param name="connection">
            The connection to associate with the select command.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataAdapter.#ctor(System.String,System.String)">
            <summary>
            Constructs a data adapter with the specified select command text,
            and using the specified database connection string.
            </summary>
            <param name="commandText">
            The select command text to use to construct a select command.
            </param>
            <param name="connectionString">
            A connection string suitable for passing to a new SQLiteConnection,
            which is associated with the select command.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataAdapter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a data adapter with the specified select command text,
            and using the specified database connection string.
            </summary>
            <param name="commandText">
            The select command text to use to construct a select command.
            </param>
            <param name="connectionString">
            A connection string suitable for passing to a new SQLiteConnection,
            which is associated with the select command.
            </param>
            <param name="parseViaFramework">
            Non-zero to parse the connection string using the built-in (i.e.
            framework provided) parser when opening the connection.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Raised by the underlying DbDataAdapter when a row is being updated
            </summary>
            <param name="value">The event's specifics</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Raised by DbDataAdapter after a row is updated
            </summary>
            <param name="value">The event's specifics</param>
        </member>
        <member name="E:System.Data.SQLite.SQLiteDataAdapter.RowUpdating">
            <summary>
            Row updating event handler
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteDataAdapter.RowUpdated">
            <summary>
            Row updated event handler
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataAdapter.SelectCommand">
            <summary>
            Gets/sets the select command for this DataAdapter
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataAdapter.InsertCommand">
            <summary>
            Gets/sets the insert command for this DataAdapter
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataAdapter.UpdateCommand">
            <summary>
            Gets/sets the update command for this DataAdapter
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataAdapter.DeleteCommand">
            <summary>
            Gets/sets the delete command for this DataAdapter
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteDataReader">
            <summary>
            SQLite implementation of DbDataReader.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._command">
            <summary>
            Underlying command this reader is attached to
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._flags">
            <summary>
            The flags pertaining to the associated connection (via the command).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._activeStatementIndex">
            <summary>
            Index of the current statement in the command being processed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._activeStatement">
            <summary>
            Current statement being Read()
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._readingState">
            <summary>
            State of the current statement being processed.
            -1 = First Step() executed, so the first Read() will be ignored
             0 = Actively reading
             1 = Finished reading
             2 = Non-row-returning statement, no records
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._rowsAffected">
            <summary>
            Number of records affected by the insert/update statements executed on the command
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._fieldCount">
            <summary>
            Count of fields (columns) in the row-returning statement currently being processed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._stepCount">
            <summary>
            The number of calls to Step() that have returned true (i.e. the number of rows that
            have been read in the current result set).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._fieldIndexes">
            <summary>
            Maps the field (column) names to their corresponding indexes within the results.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._fieldTypeArray">
            <summary>
            Datatypes of active fields (columns) in the current statement, used for type-restricting data
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._commandBehavior">
            <summary>
            The behavior of the datareader
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._disposeCommand">
            <summary>
            If set, then dispose of the command object when the reader is finished
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._throwOnDisposed">
            <summary>
            If set, then raise an exception when the object is accessed after being disposed.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._keyInfo">
            <summary>
            An array of rowid's for the active statement if CommandBehavior.KeyInfo is specified
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._version">
            <summary>
            Matches the version of the connection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteDataReader._baseSchemaName">
            <summary>
            The "stub" (i.e. placeholder) base schema name to use when returning
            column schema information.  Matches the base schema name used by the
            associated connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.#ctor(System.Data.SQLite.SQLiteCommand,System.Data.CommandBehavior)">
            <summary>
            Internal constructor, initializes the datareader and sets up to begin executing statements
            </summary>
            <param name="cmd">The SQLiteCommand this data reader is for</param>
            <param name="behave">The expected behavior of the data reader</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.Dispose(System.Boolean)">
            <summary>
            Dispose of all resources used by this datareader.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.Close">
            <summary>
            Closes the datareader, potentially closing the connection as well if CommandBehavior.CloseConnection was specified.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.CheckClosed">
            <summary>
            Throw an error if the datareader is closed
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.CheckValidRow">
            <summary>
            Throw an error if a row is not loaded
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetEnumerator">
            <summary>
            Enumerator support
            </summary>
            <returns>Returns a DbEnumerator object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.RefreshFlags">
            <summary>
            Forces the connection flags cached by this data reader to be refreshed
            from the underlying connection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.VerifyType(System.Int32,System.Data.DbType)">
             <summary>
             SQLite is inherently un-typed.  All datatypes in SQLite are natively strings.  The definition of the columns of a table
             and the affinity of returned types are all we have to go on to type-restrict data in the reader.
            
             This function attempts to verify that the type of data being requested of a column matches the datatype of the column.  In
             the case of columns that are not backed into a table definition, we attempt to match up the affinity of a column (int, double, string or blob)
             to a set of known types that closely match that affinity.  It's not an exact science, but its the best we can do.
             </summary>
             <returns>
             This function throws an InvalidTypeCast() exception if the requested type doesn't match the column's definition or affinity.
             </returns>
             <param name="i">The index of the column to type-check</param>
             <param name="typ">The type we want to get out of the column</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetBoolean(System.Int32)">
            <summary>
            Retrieves the column as a boolean value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>bool</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetByte(System.Int32)">
            <summary>
            Retrieves the column as a single byte value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>byte</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Retrieves a column as an array of bytes (blob)
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <param name="fieldOffset">The zero-based index of where to begin reading the data</param>
            <param name="buffer">The buffer to write the bytes into</param>
            <param name="bufferoffset">The zero-based index of where to begin writing into the array</param>
            <param name="length">The number of bytes to retrieve</param>
            <returns>The actual number of bytes written into the array</returns>
            <remarks>
            To determine the number of bytes in the column, pass a null value for the buffer.  The total length will be returned.
            </remarks>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetChar(System.Int32)">
            <summary>
            Returns the column as a single character
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>char</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Retrieves a column as an array of chars (blob)
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <param name="fieldoffset">The zero-based index of where to begin reading the data</param>
            <param name="buffer">The buffer to write the characters into</param>
            <param name="bufferoffset">The zero-based index of where to begin writing into the array</param>
            <param name="length">The number of bytes to retrieve</param>
            <returns>The actual number of characters written into the array</returns>
            <remarks>
            To determine the number of characters in the column, pass a null value for the buffer.  The total length will be returned.
            </remarks>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Retrieves the name of the back-end datatype of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetDateTime(System.Int32)">
            <summary>
            Retrieve the column as a date/time value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetDecimal(System.Int32)">
            <summary>
            Retrieve the column as a decimal value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>decimal</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetDouble(System.Int32)">
            <summary>
            Returns the column as a double
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>double</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetFieldType(System.Int32)">
            <summary>
            Returns the .NET type of a given column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Type</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetFloat(System.Int32)">
            <summary>
            Returns a column as a float value
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>float</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the column as a Guid
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Guid</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetInt16(System.Int32)">
            <summary>
            Returns the column as a short
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int16</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetInt32(System.Int32)">
            <summary>
            Retrieves the column as an int
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int32</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetInt64(System.Int32)">
            <summary>
            Retrieves the column as a long
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>Int64</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetName(System.Int32)">
            <summary>
            Retrieves the name of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetOrdinal(System.String)">
            <summary>
            Retrieves the i of a column, given its name
            </summary>
            <param name="name">The name of the column to retrieve</param>
            <returns>The int i of the column</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetSchemaTable">
            <summary>
            Schema information in SQLite is difficult to map into .NET conventions, so a lot of work must be done
            to gather the necessary information so it can be represented in an ADO.NET manner.
            </summary>
            <returns>Returns a DataTable containing the schema information for the active SELECT statement being processed.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetString(System.Int32)">
            <summary>
            Retrieves the column as a string
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>string</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetValue(System.Int32)">
            <summary>
            Retrieves the column as an object corresponding to the underlying datatype of the column
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetValues(System.Object[])">
            <summary>
            Retreives the values of multiple columns, up to the size of the supplied array
            </summary>
            <param name="values">The array to fill with values from the columns in the current resultset</param>
            <returns>The number of columns retrieved</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetValues">
            <summary>
            Returns a collection containing all the column names and values for the
            current row of data in the current resultset, if any.  If there is no
            current row or no current resultset, an exception may be thrown.
            </summary>
            <returns>
            The collection containing the column name and value information for the
            current row of data in the current resultset or null if this information
            cannot be obtained.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.IsDBNull(System.Int32)">
            <summary>
            Returns True if the specified column is null
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>True or False</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.NextResult">
            <summary>
            Moves to the next resultset in multiple row-returning SQL command.
            </summary>
            <returns>True if the command was successful and a new resultset is available, False otherwise.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetConnection(System.Data.SQLite.SQLiteDataReader)">
            <summary>
            This method attempts to query the database connection associated with
            the data reader in use.  If the underlying command or connection is
            unavailable, a null value will be returned.
            </summary>
            <returns>
            The connection object -OR- null if it is unavailable.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetSQLiteType(System.Data.SQLite.SQLiteType,System.String)">
            <summary>
            Retrieves the SQLiteType for a given column and row value.
            </summary>
            <param name="oldType">
            The original SQLiteType structure, based only on the column.
            </param>
            <param name="text">
            The textual value of the column for a given row.
            </param>
            <returns>
            The SQLiteType structure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.GetSQLiteType(System.Data.SQLite.SQLiteConnectionFlags,System.Int32)">
            <summary>
            Retrieves the SQLiteType for a given column, and caches it to avoid repetetive interop calls.
            </summary>
            <param name="flags">The flags associated with the parent connection object.</param>
            <param name="i">The index of the column to retrieve</param>
            <returns>A SQLiteType structure</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteDataReader.Read">
            <summary>
            Reads the next row from the resultset
            </summary>
            <returns>True if a new row was successfully loaded and is ready for processing</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.Depth">
            <summary>
            Not implemented.  Returns 0
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.FieldCount">
            <summary>
            Returns the number of columns in the current resultset
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.StepCount">
            <summary>
            Returns the number of rows seen so far in the current result set.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.VisibleFieldCount">
            <summary>
            Returns the number of visible fields in the current resultset
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.HasRows">
            <summary>
            Returns True if the resultset has rows that can be fetched
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.IsClosed">
            <summary>
            Returns True if the data reader is closed
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.RecordsAffected">
            <summary>
            Retrieve the count of records affected by an update/insert command.  Only valid once the data reader is closed!
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.Item(System.String)">
            <summary>
            Indexer to retrieve data from a column given its name
            </summary>
            <param name="name">The name of the column to retrieve data for</param>
            <returns>The value contained in the column</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteDataReader.Item(System.Int32)">
            <summary>
            Indexer to retrieve data from a column given its i
            </summary>
            <param name="i">The index of the column to retrieve</param>
            <returns>The value contained in the column</returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteException">
            <summary>
            SQLite exception class.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private constructor for use with serialization.
            </summary>
            <param name="info">
            Holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            Contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.#ctor(System.Data.SQLite.SQLiteErrorCode,System.String)">
            <summary>
            Public constructor for generating a SQLite exception given the error
            code and message.
            </summary>
            <param name="errorCode">
            The SQLite return code to report.
            </param>
            <param name="message">
            Message text to go along with the return code message text.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.#ctor(System.String)">
            <summary>
            Public constructor that uses the base class constructor for the error
            message.
            </summary>
            <param name="message">Error message text.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.#ctor">
            <summary>
            Public constructor that uses the default base class constructor.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.#ctor(System.String,System.Exception)">
            <summary>
            Public constructor that uses the base class constructor for the error
            message and inner exception.
            </summary>
            <param name="message">Error message text.</param>
            <param name="innerException">The original (inner) exception.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds extra information to the serialized object data specific to this
            class type.  This is only used for serialization.
            </summary>
            <param name="info">
            Holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            Contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.GetErrorString(System.Data.SQLite.SQLiteErrorCode)">
            <summary>
            Returns the error message for the specified SQLite return code.
            </summary>
            <param name="errorCode">The SQLite return code.</param>
            <returns>The error message or null if it cannot be found.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteException.GetStockErrorMessage(System.Data.SQLite.SQLiteErrorCode,System.String)">
            <summary>
            Returns the composite error message based on the SQLite return code
            and the optional detailed error message.
            </summary>
            <param name="errorCode">The SQLite return code.</param>
            <param name="message">Optional detailed error message.</param>
            <returns>Error message text for the return code.</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteException.ResultCode">
            <summary>
            Gets the associated SQLite result code for this exception as a
            <see cref="T:System.Data.SQLite.SQLiteErrorCode"/>.  This property returns the same
            underlying value as the <see cref="P:System.Data.SQLite.SQLiteException.ErrorCode"/> property.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteException.ErrorCode">
            <summary>
            Gets the associated SQLite return code for this exception as an
            <see cref="T:System.Int32"/>.  For desktop versions of the .NET Framework,
            this property overrides the property of the same name within the
            <see cref="T:System.Runtime.InteropServices.ExternalException"/>
            class.  This property returns the same underlying value as the
            <see cref="P:System.Data.SQLite.SQLiteException.ResultCode"/> property.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteErrorCode">
            <summary>
            SQLite error codes.  Actually, this enumeration represents a return code,
            which may also indicate success in one of several ways (e.g. SQLITE_OK,
            SQLITE_ROW, and SQLITE_DONE).  Therefore, the name of this enumeration is
            something of a misnomer.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Unknown">
            <summary>
            The error code is unknown.  This error code
            is only used by the managed wrapper itself.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Ok">
            <summary>
            Successful result
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Error">
            <summary>
            SQL error or missing database
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Internal">
            <summary>
            Internal logic error in SQLite
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Perm">
            <summary>
            Access permission denied
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Abort">
            <summary>
            Callback routine requested an abort
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Busy">
            <summary>
            The database file is locked
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Locked">
            <summary>
            A table in the database is locked
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.NoMem">
            <summary>
            A malloc() failed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.ReadOnly">
            <summary>
            Attempt to write a readonly database
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Interrupt">
            <summary>
            Operation terminated by sqlite3_interrupt()
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.IoErr">
            <summary>
            Some kind of disk I/O error occurred
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Corrupt">
            <summary>
            The database disk image is malformed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.NotFound">
            <summary>
            Unknown opcode in sqlite3_file_control()
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Full">
            <summary>
            Insertion failed because database is full
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.CantOpen">
            <summary>
            Unable to open the database file
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Protocol">
            <summary>
            Database lock protocol error
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Empty">
            <summary>
            Database is empty
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Schema">
            <summary>
            The database schema changed
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.TooBig">
            <summary>
            String or BLOB exceeds size limit
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Constraint">
            <summary>
            Abort due to constraint violation
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Mismatch">
            <summary>
            Data type mismatch
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Misuse">
            <summary>
            Library used incorrectly
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.NoLfs">
            <summary>
            Uses OS features not supported on host
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Auth">
            <summary>
            Authorization denied
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Format">
            <summary>
            Auxiliary database format error
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Range">
            <summary>
            2nd parameter to sqlite3_bind out of range
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.NotADb">
            <summary>
            File opened that is not a database file
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Notice">
            <summary>
            Notifications from sqlite3_log()
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Warning">
            <summary>
            Warnings from sqlite3_log()
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Row">
            <summary>
            sqlite3_step() has another row ready
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.Done">
            <summary>
            sqlite3_step() has finished executing
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteErrorCode.NonExtendedMask">
            <summary>
            Used to mask off extended result codes
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteFactory">
            <summary>
            SQLite implementation of <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
            <summary>
            SQLite implementation of <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.#ctor">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFactory.Instance">
            <summary>
            Static instance member which returns an instanced <see cref="T:System.Data.SQLite.SQLiteFactory"/> class.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.CreateCommand">
            <summary>
            Creates and returns a new <see cref="T:System.Data.SQLite.SQLiteCommand"/> object.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.CreateCommandBuilder">
            <summary>
            Creates and returns a new <see cref="T:System.Data.SQLite.SQLiteCommandBuilder"/> object.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.CreateConnection">
            <summary>
            Creates and returns a new <see cref="T:System.Data.SQLite.SQLiteConnection"/> object.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.CreateConnectionStringBuilder">
            <summary>
            Creates and returns a new <see cref="T:System.Data.SQLite.SQLiteConnectionStringBuilder"/> object.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.CreateDataAdapter">
            <summary>
            Creates and returns a new <see cref="T:System.Data.SQLite.SQLiteDataAdapter"/> object.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.CreateParameter">
            <summary>
            Creates and returns a new <see cref="T:System.Data.SQLite.SQLiteParameter"/> object.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFactory.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Will provide a <see cref="T:System.IServiceProvider"/> object in .NET 3.5.
            </summary>
            <param name="serviceType">The class or interface type to query for.</param>
            <returns></returns>
        </member>
        <member name="E:System.Data.SQLite.SQLiteFactory.Log">
            <summary>
            This event is raised whenever SQLite raises a logging event.
            Note that this should be set as one of the first things in the
            application.  This event is provided for backward compatibility only.
            New code should use the <see cref="T:System.Data.SQLite.SQLiteLog"/> class instead.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteFunction">
             <summary>
             This abstract class is designed to handle user-defined functions easily.  An instance of the derived class is made for each
             connection to the database.
             </summary>
             <remarks>
             Although there is one instance of a class derived from SQLiteFunction per database connection, the derived class has no access
             to the underlying connection.  This is necessary to deter implementers from thinking it would be a good idea to make database
             calls during processing.
            
             It is important to distinguish between a per-connection instance, and a per-SQL statement context.  One instance of this class
             services all SQL statements being stepped through on that connection, and there can be many.  One should never store per-statement
             information in member variables of user-defined function classes.
            
             For aggregate functions, always create and store your per-statement data in the contextData object on the 1st step.  This data will
             be automatically freed for you (and Dispose() called if the item supports IDisposable) when the statement completes.
             </remarks>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._base">
            <summary>
            The base connection this function is attached to
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._contextDataList">
            <summary>
            Internal array used to keep track of aggregate function context data
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._flags">
            <summary>
            The connection flags associated with this object (this should be the
            same value as the flags associated with the parent connection object).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._InvokeFunc">
            <summary>
            Holds a reference to the callback function for user functions
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._StepFunc">
            <summary>
            Holds a reference to the callbakc function for stepping in an aggregate function
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._FinalFunc">
            <summary>
            Holds a reference to the callback function for finalizing an aggregate function
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._CompareFunc">
            <summary>
            Holds a reference to the callback function for collation sequences
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._context">
            <summary>
            Current context of the current callback.  Only valid during a callback
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteFunction._registeredFunctions">
            <summary>
            This static list contains all the user-defined functions declared using the proper attributes.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.#ctor">
            <summary>
            Internal constructor, initializes the function's internal variables.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.#ctor(System.Data.SQLite.SQLiteDateFormats,System.DateTimeKind,System.String,System.Boolean)">
            <summary>
            Constructs an instance of this class using the specified data-type
            conversion parameters.
            </summary>
            <param name="format">
            The DateTime format to be used when converting string values to a
            DateTime and binding DateTime parameters.
            </param>
            <param name="kind">
            The <see cref="T:System.DateTimeKind"/> to be used when creating DateTime
            values.
            </param>
            <param name="formatString">
            The format string to be used when parsing and formatting DateTime
            values.
            </param>
            <param name="utf16">
            Non-zero to create a UTF-16 data-type conversion context; otherwise,
            a UTF-8 data-type conversion context will be created.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.Dispose">
            <summary>
            Disposes of any active contextData variables that were not automatically cleaned up.  Sometimes this can happen if
            someone closes the connection while a DataReader is open.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.Dispose(System.Boolean)">
            <summary>
            Placeholder for a user-defined disposal routine
            </summary>
            <param name="disposing">True if the object is being disposed explicitly</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.Invoke(System.Object[])">
            <summary>
            Scalar functions override this method to do their magic.
            </summary>
            <remarks>
            Parameters passed to functions have only an affinity for a certain data type, there is no underlying schema available
            to force them into a certain type.  Therefore the only types you will ever see as parameters are
            DBNull.Value, Int64, Double, String or byte[] array.
            </remarks>
            <param name="args">The arguments for the command to process</param>
            <returns>You may return most simple types as a return value, null or DBNull.Value to return null, DateTime, or
            you may return an Exception-derived class if you wish to return an error to SQLite.  Do not actually throw the error,
            just return it!</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.Step(System.Object[],System.Int32,System.Object@)">
            <summary>
            Aggregate functions override this method to do their magic.
            </summary>
            <remarks>
            Typically you'll be updating whatever you've placed in the contextData field and returning as quickly as possible.
            </remarks>
            <param name="args">The arguments for the command to process</param>
            <param name="stepNumber">The 1-based step number.  This is incrememted each time the step method is called.</param>
            <param name="contextData">A placeholder for implementers to store contextual data pertaining to the current context.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.Final(System.Object)">
            <summary>
            Aggregate functions override this method to finish their aggregate processing.
            </summary>
            <remarks>
            If you implemented your aggregate function properly,
            you've been recording and keeping track of your data in the contextData object provided, and now at this stage you should have
            all the information you need in there to figure out what to return.
            NOTE:  It is possible to arrive here without receiving a previous call to Step(), in which case the contextData will
            be null.  This can happen when no rows were returned.  You can either return null, or 0 or some other custom return value
            if that is the case.
            </remarks>
            <param name="contextData">Your own assigned contextData, provided for you so you can return your final results.</param>
            <returns>You may return most simple types as a return value, null or DBNull.Value to return null, DateTime, or
            you may return an Exception-derived class if you wish to return an error to SQLite.  Do not actually throw the error,
            just return it!
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.Compare(System.String,System.String)">
            <summary>
            User-defined collation sequences override this method to provide a custom string sorting algorithm.
            </summary>
            <param name="param1">The first string to compare</param>
            <param name="param2">The second strnig to compare</param>
            <returns>1 if param1 is greater than param2, 0 if they are equal, or -1 if param1 is less than param2</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.ConvertParams(System.Int32,System.IntPtr)">
            <summary>
            Converts an IntPtr array of context arguments to an object array containing the resolved parameters the pointers point to.
            </summary>
            <remarks>
            Parameters passed to functions have only an affinity for a certain data type, there is no underlying schema available
            to force them into a certain type.  Therefore the only types you will ever see as parameters are
            DBNull.Value, Int64, Double, String or byte[] array.
            </remarks>
            <param name="nArgs">The number of arguments</param>
            <param name="argsptr">A pointer to the array of arguments</param>
            <returns>An object array of the arguments once they've been converted to .NET values</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.SetReturnValue(System.IntPtr,System.Object)">
            <summary>
            Takes the return value from Invoke() and Final() and figures out how to return it to SQLite's context.
            </summary>
            <param name="context">The context the return value applies to</param>
            <param name="returnValue">The parameter to return to SQLite</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.ScalarCallback(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal scalar callback function, which wraps the raw context pointer and calls the virtual Invoke() method.
            WARNING: Must not throw exceptions.
            </summary>
            <param name="context">A raw context pointer</param>
            <param name="nArgs">Number of arguments passed in</param>
            <param name="argsptr">A pointer to the array of arguments</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.CompareCallback(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal collation sequence function, which wraps up the raw string pointers and executes the Compare() virtual function.
            WARNING: Must not throw exceptions.
            </summary>
            <param name="ptr">Not used</param>
            <param name="len1">Length of the string pv1</param>
            <param name="ptr1">Pointer to the first string to compare</param>
            <param name="len2">Length of the string pv2</param>
            <param name="ptr2">Pointer to the second string to compare</param>
            <returns>Returns -1 if the first string is less than the second.  0 if they are equal, or 1 if the first string is greater
            than the second.  Returns 0 if an exception is caught.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.CompareCallback16(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Internal collation sequence function, which wraps up the raw string pointers and executes the Compare() virtual function.
            WARNING: Must not throw exceptions.
            </summary>
            <param name="ptr">Not used</param>
            <param name="len1">Length of the string pv1</param>
            <param name="ptr1">Pointer to the first string to compare</param>
            <param name="len2">Length of the string pv2</param>
            <param name="ptr2">Pointer to the second string to compare</param>
            <returns>Returns -1 if the first string is less than the second.  0 if they are equal, or 1 if the first string is greater
            than the second.  Returns 0 if an exception is caught.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.StepCallback(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The internal aggregate Step function callback, which wraps the raw context pointer and calls the virtual Step() method.
            WARNING: Must not throw exceptions.
            </summary>
            <remarks>
            This function takes care of doing the lookups and getting the important information put together to call the Step() function.
            That includes pulling out the user's contextData and updating it after the call is made.  We use a sorted list for this so
            binary searches can be done to find the data.
            </remarks>
            <param name="context">A raw context pointer</param>
            <param name="nArgs">Number of arguments passed in</param>
            <param name="argsptr">A pointer to the array of arguments</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.FinalCallback(System.IntPtr)">
            <summary>
            An internal aggregate Final function callback, which wraps the context pointer and calls the virtual Final() method.
            WARNING: Must not throw exceptions.
            </summary>
            <param name="context">A raw context pointer</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.#cctor">
            <summary>
            Using reflection, enumerate all assemblies in the current appdomain looking for classes that
            have a SQLiteFunctionAttribute attribute, and registering them accordingly.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.RegisterFunction(System.Type)">
            <summary>
            Manual method of registering a function.  The type must still have the SQLiteFunctionAttributes in order to work
            properly, but this is a workaround for the Compact Framework where enumerating assemblies is not currently supported.
            </summary>
            <param name="typ">The type of the function to register</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.BindFunctions(System.Data.SQLite.SQLiteBase,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            Called by SQLiteBase derived classes, this function binds all user-defined functions to a connection.
            It is done this way so that all user-defined functions will access the database using the same encoding scheme
            as the connection (UTF-8 or UTF-16).
            </summary>
            <remarks>
            The wrapper functions that interop with SQLite will create a unique cookie value, which internally is a pointer to
            all the wrapped callback functions.  The interop function uses it to map CDecl callbacks to StdCall callbacks.
            </remarks>
            <param name="sqlbase">The base object on which the functions are to bind</param>
            <param name="flags">The flags associated with the parent connection object</param>
            <returns>Returns a logical list of functions which the connection should retain until it is closed.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunction.BindFunction(System.Data.SQLite.SQLiteBase,System.Data.SQLite.SQLiteFunctionAttribute,System.Data.SQLite.SQLiteFunction,System.Data.SQLite.SQLiteConnectionFlags)">
            <summary>
            This function binds a user-defined functions to a connection.
            </summary>
            <param name="sqliteBase">
            The <see cref="T:System.Data.SQLite.SQLiteBase"/> object instance associated with the
            <see cref="T:System.Data.SQLite.SQLiteConnection"/> that the function should be bound to.
            </param>
            <param name="functionAttribute">
            The <see cref="T:System.Data.SQLite.SQLiteFunctionAttribute"/> object instance containing
            the metadata for the function to be bound.
            </param>
            <param name="function">
            The <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance that implements the
            function to be bound.
            </param>
            <param name="flags">
            The flags associated with the parent connection object.
            </param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteFunction.SQLiteConvert">
            <summary>
            Returns a reference to the underlying connection's SQLiteConvert class, which can be used to convert
            strings and DateTime's into the current connection's encoding schema.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteFunctionEx">
            <summary>
            Extends SQLiteFunction and allows an inherited class to obtain the collating sequence associated with a function call.
            </summary>
            <remarks>
            User-defined functions can call the GetCollationSequence() method in this class and use it to compare strings and char arrays.
            </remarks>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunctionEx.GetCollationSequence">
            <summary>
            Obtains the collating sequence in effect for the given function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Data.SQLite.FunctionType">
            <summary>
            The type of user-defined function to declare
            </summary>
        </member>
        <member name="F:System.Data.SQLite.FunctionType.Scalar">
            <summary>
            Scalar functions are designed to be called and return a result immediately.  Examples include ABS(), Upper(), Lower(), etc.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.FunctionType.Aggregate">
            <summary>
            Aggregate functions are designed to accumulate data until the end of a call and then return a result gleaned from the accumulated data.
            Examples include SUM(), COUNT(), AVG(), etc.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.FunctionType.Collation">
            <summary>
            Collation sequences are used to sort textual data in a custom manner, and appear in an ORDER BY clause.  Typically text in an ORDER BY is
            sorted using a straight case-insensitive comparison function.  Custom collating sequences can be used to alter the behavior of text sorting
            in a user-defined manner.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteCallback">
            <summary>
            An internal callback delegate declaration.
            </summary>
            <param name="context">Raw native context pointer for the user function.</param>
            <param name="argc">Total number of arguments to the user function.</param>
            <param name="argv">Raw native pointer to the array of raw native argument pointers.</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteFinalCallback">
            <summary>
            An internal final callback delegate declaration.
            </summary>
            <param name="context">Raw context pointer for the user function</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteCollation">
            <summary>
            Internal callback delegate for implementing collation sequences
            </summary>
            <param name="puser">Not used</param>
            <param name="len1">Length of the string pv1</param>
            <param name="pv1">Pointer to the first string to compare</param>
            <param name="len2">Length of the string pv2</param>
            <param name="pv2">Pointer to the second string to compare</param>
            <returns>Returns -1 if the first string is less than the second.  0 if they are equal, or 1 if the first string is greater
            than the second.</returns>
        </member>
        <member name="T:System.Data.SQLite.CollationTypeEnum">
            <summary>
            The type of collating sequence
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationTypeEnum.Binary">
            <summary>
            The built-in BINARY collating sequence
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationTypeEnum.NoCase">
            <summary>
            The built-in NOCASE collating sequence
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationTypeEnum.Reverse">
            <summary>
            The built-in REVERSE collating sequence
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationTypeEnum.Custom">
            <summary>
            A custom user-defined collating sequence
            </summary>
        </member>
        <member name="T:System.Data.SQLite.CollationEncodingEnum">
            <summary>
            The encoding type the collation sequence uses
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationEncodingEnum.UTF8">
            <summary>
            The collation sequence is UTF8
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationEncodingEnum.UTF16LE">
            <summary>
            The collation sequence is UTF16 little-endian
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationEncodingEnum.UTF16BE">
            <summary>
            The collation sequence is UTF16 big-endian
            </summary>
        </member>
        <member name="T:System.Data.SQLite.CollationSequence">
            <summary>
            A struct describing the collating sequence a function is executing in
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationSequence.Name">
            <summary>
            The name of the collating sequence
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationSequence.Type">
            <summary>
            The type of collating sequence
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationSequence.Encoding">
            <summary>
            The text encoding of the collation sequence
            </summary>
        </member>
        <member name="F:System.Data.SQLite.CollationSequence._func">
            <summary>
            Context of the function that requested the collating sequence
            </summary>
        </member>
        <member name="M:System.Data.SQLite.CollationSequence.Compare(System.String,System.String)">
            <summary>
            Calls the base collating sequence to compare two strings
            </summary>
            <param name="s1">The first string to compare</param>
            <param name="s2">The second string to compare</param>
            <returns>-1 if s1 is less than s2, 0 if s1 is equal to s2, and 1 if s1 is greater than s2</returns>
        </member>
        <member name="M:System.Data.SQLite.CollationSequence.Compare(System.Char[],System.Char[])">
            <summary>
            Calls the base collating sequence to compare two character arrays
            </summary>
            <param name="c1">The first array to compare</param>
            <param name="c2">The second array to compare</param>
            <returns>-1 if c1 is less than c2, 0 if c1 is equal to c2, and 1 if c1 is greater than c2</returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteFunctionAttribute">
            <summary>
            A simple custom attribute to enable us to easily find user-defined functions in
            the loaded assemblies and initialize them in SQLite as connections are made.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunctionAttribute.#ctor">
            <summary>
            Default constructor, initializes the internal variables for the function.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteFunctionAttribute.#ctor(System.String,System.Int32,System.Data.SQLite.FunctionType)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="name">
            The name of the function, as seen by the SQLite core library.
            </param>
            <param name="argumentCount">
            The number of arguments that the function will accept.
            </param>
            <param name="functionType">
            The type of function being declared.  This will either be Scalar,
            Aggregate, or Collation.
            </param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteFunctionAttribute.Name">
            <summary>
            The function's name as it will be used in SQLite command text.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteFunctionAttribute.Arguments">
            <summary>
            The number of arguments this function expects.  -1 if the number of arguments is variable.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteFunctionAttribute.FuncType">
            <summary>
            The type of function this implementation will be.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteFunctionAttribute.InstanceType">
            <summary>
            The <see cref="T:System.Type"/> object instance that describes the class
            containing the implementation for the associated function.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteKeyReader">
            <summary>
            This class provides key info for a given SQLite statement.
            <remarks>
            Providing key information for a given statement is non-trivial :(
            </remarks>
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteKeyReader.#ctor(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteDataReader,System.Data.SQLite.SQLiteStatement)">
            <summary>
            This function does all the nasty work at determining what keys need to be returned for
            a given statement.
            </summary>
            <param name="cnn"></param>
            <param name="reader"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteKeyReader.Sync">
            <summary>
            Make sure all the subqueries are open and ready and sync'd with the current rowid
            of the table they're supporting
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteKeyReader.Reset">
            <summary>
            Release any readers on any subqueries
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteKeyReader.AppendSchemaTable(System.Data.DataTable)">
            <summary>
            Append all the columns we've added to the original query to the schema
            </summary>
            <param name="tbl"></param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteKeyReader.Count">
            <summary>
            How many additional columns of keyinfo we're holding
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteKeyReader.KeyInfo">
            <summary>
            Used to support CommandBehavior.KeyInfo
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteKeyReader.KeyQuery">
            <summary>
            A single sub-query for a given table/database.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.LogEventArgs">
            <summary>
            Event data for logging event handlers.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.LogEventArgs.ErrorCode">
            <summary>
            The error code.  The type of this object value should be
            <see cref="T:System.Int32"/> or <see cref="T:System.Data.SQLite.SQLiteErrorCode"/>.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.LogEventArgs.Message">
            <summary>
            SQL statement text as the statement first begins executing
            </summary>
        </member>
        <member name="F:System.Data.SQLite.LogEventArgs.Data">
            <summary>
            Extra data associated with this event, if any.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.LogEventArgs.#ctor(System.IntPtr,System.Object,System.String,System.Object)">
            <summary>
            Constructs the object.
            </summary>
            <param name="pUserData">Should be null.</param>
            <param name="errorCode">
            The error code.  The type of this object value should be
            <see cref="T:System.Int32"/> or <see cref="T:System.Data.SQLite.SQLiteErrorCode"/>.
            </param>
            <param name="message">The error message, if any.</param>
            <param name="data">The extra data, if any.</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteLogEventHandler">
            <summary>
            Raised when a log event occurs.
            </summary>
            <param name="sender">The current connection</param>
            <param name="e">Event arguments of the trace</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteLog">
            <summary>
            Manages the SQLite custom logging functionality and the associated
            callback for the whole process.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteLog.syncRoot">
            <summary>
            Object used to synchronize access to the static instance data
            for this class.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteLog._domainUnload">
            <summary>
            Member variable to store the AppDomain.DomainUnload event handler.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteLog._defaultHandler">
            <summary>
            The default log event handler.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteLog._callback">
            <summary>
            The log callback passed to native SQLite engine.  This must live
            as long as the SQLite library has a pointer to it.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteLog._sql">
            <summary>
            The base SQLite object to interop with.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteLog._enabled">
            <summary>
            This will be non-zero if logging is currently enabled.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.Initialize">
            <summary>
            Initializes the SQLite logging facilities.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.DomainUnload(System.Object,System.EventArgs)">
            <summary>
            Handles the AppDomain being unloaded.
            </summary>
            <param name="sender">Should be null.</param>
            <param name="e">The data associated with this event.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.LogMessage(System.String)">
            <summary>
            Log a message to all the registered log event handlers without going
            through the SQLite library.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.LogMessage(System.Data.SQLite.SQLiteErrorCode,System.String)">
            <summary>
            Log a message to all the registered log event handlers without going
            through the SQLite library.
            </summary>
            <param name="errorCode">The SQLite error code.</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.LogMessage(System.Int32,System.String)">
            <summary>
            Log a message to all the registered log event handlers without going
            through the SQLite library.
            </summary>
            <param name="errorCode">The integer error code.</param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.LogMessage(System.Object,System.String)">
            <summary>
            Log a message to all the registered log event handlers without going
            through the SQLite library.
            </summary>
            <param name="errorCode">
            The error code.  The type of this object value should be
            System.Int32 or SQLiteErrorCode.
            </param>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.InitializeDefaultHandler">
            <summary>
            Creates and initializes the default log event handler.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.AddDefaultHandler">
            <summary>
            Adds the default log event handler to the list of handlers.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.RemoveDefaultHandler">
            <summary>
            Removes the default log event handler from the list of handlers.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.LogCallback(System.IntPtr,System.Int32,System.IntPtr)">
             <summary>
             Internal proxy function that calls any registered application log
             event handlers.
            
             WARNING: This method is used more-or-less directly by native code,
                      do not modify its type signature.
             </summary>
             <param name="pUserData">
             The extra data associated with this message, if any.
             </param>
             <param name="errorCode">
             The error code associated with this message.
             </param>
             <param name="pMessage">
             The message string to be logged.
             </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteLog.LogEventHandler(System.Object,System.Data.SQLite.LogEventArgs)">
            <summary>
            Default logger.  Currently, uses the Trace class (i.e. sends events
            to the current trace listeners, if any).
            </summary>
            <param name="sender">Should be null.</param>
            <param name="e">The data associated with this event.</param>
        </member>
        <member name="E:System.Data.SQLite.SQLiteLog._handlers">
            <summary>
            Member variable to store the application log handler to call.
            </summary>
        </member>
        <member name="E:System.Data.SQLite.SQLiteLog.Log">
            <summary>
            This event is raised whenever SQLite raises a logging event.
            Note that this should be set as one of the first things in the
            application.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteLog.Enabled">
            <summary>
            If this property is true, logging is enabled; otherwise, logging is
            disabled.  When logging is disabled, no logging events will fire.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteMetaDataCollectionNames">
            <summary>
            MetaDataCollections specific to SQLite
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.Catalogs">
            <summary>
            Returns a list of databases attached to the connection
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.Columns">
            <summary>
            Returns column information for the specified table
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.Indexes">
            <summary>
            Returns index information for the optionally-specified table
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.IndexColumns">
            <summary>
            Returns base columns for the given index
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.Tables">
            <summary>
            Returns the tables in the given catalog
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.Views">
            <summary>
            Returns user-defined views in the given catalog
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.ViewColumns">
            <summary>
            Returns underlying column information on the given view
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.ForeignKeys">
            <summary>
            Returns foreign key information for the given catalog
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteMetaDataCollectionNames.Triggers">
            <summary>
            Returns the triggers on the database
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteParameter">
            <summary>
            SQLite implementation of DbParameter.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameter._dbType">
            <summary>
            The data type of the parameter
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameter._rowVersion">
            <summary>
            The version information for mapping the parameter
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameter._objValue">
            <summary>
            The value of the data in the parameter
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameter._sourceColumn">
            <summary>
            The source column for the parameter
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameter._parameterName">
            <summary>
            The column name
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameter._dataSize">
            <summary>
            The data size, unused by SQLite
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String)">
            <summary>
            Constructs a named parameter given the specified parameter name
            </summary>
            <param name="parameterName">The parameter name</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructs a named parameter given the specified parameter name and initial value
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Constructs a named parameter of the specified type
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.String)">
            <summary>
            Constructs a named parameter of the specified type and source column reference
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, source column and row version
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType)">
            <summary>
            Constructs an unnamed parameter of the specified data type
            </summary>
            <param name="dbType">The datatype of the parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Object)">
            <summary>
            Constructs an unnamed parameter of the specified data type and sets the initial value
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="value">The initial value of the parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified data type and source column
            </summary>
            <param name="dbType">The datatype of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified data type, source column and row version
            </summary>
            <param name="dbType">The data type</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Constructs a named parameter of the specified type and size
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs a named parameter of the specified type, size and source column
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Constructs a named parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="isNullable">Ignored</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="value">The initial value to assign the parameter</param>   
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
            <summary>
            Constructs a named parameter, yet another flavor
            </summary>
            <param name="parameterName">The name of the parameter</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="direction">Only input parameters are supported in SQLite</param>
            <param name="precision">Ignored</param>
            <param name="scale">Ignored</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
            <param name="sourceColumnNullMapping">Whether or not this parameter is for comparing NULL's</param>
            <param name="value">The intial value to assign the parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Int32)">
            <summary>
            Constructs an unnamed parameter of the specified type and size
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Int32,System.String)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, and source column
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.#ctor(System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Constructs an unnamed parameter of the specified type, size, source column and row version
            </summary>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the parameter</param>
            <param name="sourceColumn">The source column</param>
            <param name="rowVersion">The row version information</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.ResetDbType">
            <summary>
            Resets the DbType of the parameter so it can be inferred from the value
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameter.Clone">
            <summary>
            Clones a parameter
            </summary>
            <returns>A new, unassociated SQLiteParameter</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.IsNullable">
            <summary>
            Whether or not the parameter can contain a null value
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.DbType">
            <summary>
            Returns the datatype of the parameter
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.Direction">
            <summary>
            Supports only input parameters
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.ParameterName">
            <summary>
            Returns the parameter name
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.Size">
            <summary>
            Returns the size of the parameter
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.SourceColumn">
            <summary>
            Gets/sets the source column
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.SourceColumnNullMapping">
            <summary>
            Used by DbCommandBuilder to determine the mapping for nullable fields
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.SourceVersion">
            <summary>
            Gets and sets the row version
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameter.Value">
            <summary>
            Gets and sets the parameter value.  If no datatype was specified, the datatype will assume the type from the value given.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteParameterCollection">
            <summary>
            SQLite implementation of DbParameterCollection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameterCollection._command">
            <summary>
            The underlying command to which this collection belongs
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameterCollection._parameterList">
            <summary>
            The internal array of parameters in this collection
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteParameterCollection._unboundFlag">
            <summary>
            Determines whether or not all parameters have been bound to their statement(s)
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.#ctor(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Initializes the collection
            </summary>
            <param name="cmd">The command to which the collection belongs</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.GetEnumerator">
            <summary>
            Retrieves an enumerator for the collection
            </summary>
            <returns>An enumerator for the underlying array</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Add(System.String,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <param name="sourceColumn">The source column</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <param name="parameterSize">The size of the value</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Add(System.String,System.Data.DbType)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameterName">The parameter name</param>
            <param name="parameterType">The data type</param>
            <returns>A SQLiteParameter object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Add(System.Data.SQLite.SQLiteParameter)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="parameter">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Add(System.Object)">
            <summary>
            Adds a parameter to the collection
            </summary>
            <param name="value">The parameter to add</param>
            <returns>A zero-based index of where the parameter is located in the array</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a named/unnamed parameter and its value to the parameter collection.
            </summary>
            <param name="parameterName">Name of the parameter, or null to indicate an unnamed parameter</param>
            <param name="value">The initial value of the parameter</param>
            <returns>Returns the SQLiteParameter object created during the call.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.AddRange(System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Adds an array of parameters to the collection
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of parameters to the collection
            </summary>
            <param name="values">The array of parameters to add</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Clear">
            <summary>
            Clears the array and resets the collection
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Contains(System.String)">
            <summary>
            Determines if the named parameter exists in the collection
            </summary>
            <param name="parameterName">The name of the parameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Contains(System.Object)">
            <summary>
            Determines if the parameter exists in the collection
            </summary>
            <param name="value">The SQLiteParameter to check</param>
            <returns>True if the parameter is in the collection</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Not implemented
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.GetParameter(System.String)">
            <summary>
            Retrieve a parameter by name from the collection
            </summary>
            <param name="parameterName">The name of the parameter to fetch</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.GetParameter(System.Int32)">
            <summary>
            Retrieves a parameter by its index in the collection
            </summary>
            <param name="index">The index of the parameter to retrieve</param>
            <returns>A DbParameter object</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.IndexOf(System.String)">
            <summary>
            Returns the index of a parameter given its name
            </summary>
            <param name="parameterName">The name of the parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of a parameter
            </summary>
            <param name="value">The parameter to find</param>
            <returns>-1 if not found, otherwise a zero-based index of the parameter</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a parameter into the array at the specified location
            </summary>
            <param name="index">The zero-based index to insert the parameter at</param>
            <param name="value">The parameter to insert</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Remove(System.Object)">
            <summary>
            Removes a parameter from the collection
            </summary>
            <param name="value">The parameter to remove</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes a parameter from the collection given its name
            </summary>
            <param name="parameterName">The name of the parameter to remove</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a parameter from the collection given its index
            </summary>
            <param name="index">The zero-based parameter index to remove</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Re-assign the named parameter to a new parameter object
            </summary>
            <param name="parameterName">The name of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Re-assign a parameter at the specified index
            </summary>
            <param name="index">The zero-based index of the parameter to replace</param>
            <param name="value">The new parameter</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.Unbind">
            <summary>
            Un-binds all parameters from their statements
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteParameterCollection.MapParameters(System.Data.SQLite.SQLiteStatement)">
            <summary>
            This function attempts to map all parameters in the collection to all statements in a Command.
            Since named parameters may span multiple statements, this function makes sure all statements are bound
            to the same named parameter.  Unnamed parameters are bound in sequence.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameterCollection.IsSynchronized">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameterCollection.IsFixedSize">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameterCollection.IsReadOnly">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameterCollection.SyncRoot">
            <summary>
            Returns null
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameterCollection.Count">
            <summary>
            Returns a count of parameters in the collection
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameterCollection.Item(System.String)">
            <summary>
            Overloaded to specialize the return value of the default indexer
            </summary>
            <param name="parameterName">Name of the parameter to get/set</param>
            <returns>The specified named SQLite parameter</returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteParameterCollection.Item(System.Int32)">
            <summary>
            Overloaded to specialize the return value of the default indexer
            </summary>
            <param name="index">The index of the parameter to get/set</param>
            <returns>The specified SQLite parameter</returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteStatement">
            <summary>
            Represents a single SQL statement in SQLite.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._sql">
            <summary>
            The underlying SQLite object this statement is bound to
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._sqlStatement">
            <summary>
            The command text of this SQL statement
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._sqlite_stmt">
            <summary>
            The actual statement pointer
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._unnamedParameters">
            <summary>
            An index from which unnamed parameters begin
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._paramNames">
            <summary>
            Names of the parameters as SQLite understands them to be
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._paramValues">
            <summary>
            Parameters for this statement
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._command">
            <summary>
            Command this statement belongs to (if any)
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteStatement._flags">
            <summary>
            The flags associated with the parent connection object.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteStatement.#ctor(System.Data.SQLite.SQLiteBase,System.Data.SQLite.SQLiteConnectionFlags,System.Data.SQLite.SQLiteStatementHandle,System.String,System.Data.SQLite.SQLiteStatement)">
            <summary>
            Initializes the statement and attempts to get all information about parameters in the statement
            </summary>
            <param name="sqlbase">The base SQLite object</param>
            <param name="flags">The flags associated with the parent connection object</param>
            <param name="stmt">The statement</param>
            <param name="strCommand">The command text for this statement</param>
            <param name="previous">The previous command in a multi-statement command</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteStatement.Dispose">
            <summary>
            Disposes and finalizes the statement
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteStatement.TryGetChanges(System.Int32@)">
            <summary>
            If the underlying database connection is open, fetches the number of changed rows
            resulting from the most recent query; otherwise, does nothing.
            </summary>
            <param name="changes">
            The number of changes when true is returned.
            Undefined if false is returned.
            </param>
            <returns>Non-zero if the number of changed rows was fetched.</returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteStatement.MapParameter(System.String,System.Data.SQLite.SQLiteParameter)">
            <summary>
            Called by SQLiteParameterCollection, this function determines if the specified parameter name belongs to
            this statement, and if so, keeps a reference to the parameter so it can be bound later.
            </summary>
            <param name="s">The parameter name to map</param>
            <param name="p">The parameter to assign it</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteStatement.BindParameters">
            <summary>
             Bind all parameters, making sure the caller didn't miss any
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteStatement.BindParameter(System.Int32,System.Data.SQLite.SQLiteParameter)">
            <summary>
            Perform the bind operation for an individual parameter
            </summary>
            <param name="index">The index of the parameter to bind</param>
            <param name="param">The parameter we're binding</param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteTransaction">
            <summary>
            SQLite implementation of DbTransaction.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteTransaction._cnn">
            <summary>
            The connection to which this transaction is bound
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteTransaction.#ctor(System.Data.SQLite.SQLiteConnection,System.Boolean)">
            <summary>
            Constructs the transaction object, binding it to the supplied connection
            </summary>
            <param name="connection">The connection to open a transaction on</param>
            <param name="deferredLock">TRUE to defer the writelock, or FALSE to lock immediately</param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteTransaction.Dispose(System.Boolean)">
            <summary>
            Disposes the transaction.  If it is currently active, any changes are rolled back.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteTransaction.Commit">
            <summary>
            Commits the current transaction.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteTransaction.Rollback">
            <summary>
            Rolls back the active transaction.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteTransaction.Connection">
            <summary>
            Returns the underlying connection to which this transaction applies.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteTransaction.DbConnection">
            <summary>
            Forwards to the local Connection property
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteTransaction.IsolationLevel">
            <summary>
            Gets the isolation level of the transaction.  SQLite only supports Serializable transactions.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods.DllFileExtension">
            <summary>
            The file extension used for dynamic link libraries.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods.ConfigFileExtension">
            <summary>
            The file extension used for the XML configuration file.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods.XmlConfigFileName">
            <summary>
            This is the name of the XML configuration file specific to the
            System.Data.SQLite assembly.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods.staticSyncRoot">
            <summary>
            This lock is used to protect the static _SQLiteNativeModuleFileName,
            _SQLiteNativeModuleHandle, and processorArchitecturePlatforms fields.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods.processorArchitecturePlatforms">
            <summary>
            This dictionary stores the mappings between processor architecture
            names and platform names.  These mappings are now used for two
            purposes.  First, they are used to determine if the assembly code
            base should be used instead of the location, based upon whether one
            or more of the named sub-directories exist within the assembly code
            base.  Second, they are used to assist in loading the appropriate
            SQLite interop assembly into the current process.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.#cctor">
            <summary>
            For now, this method simply calls the Initialize method.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.Initialize">
            <summary>
            Attempts to initialize this class by pre-loading the native SQLite
            library for the processor architecture of the current process.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.GetXmlConfigFileName">
            <summary>
            Queries and returns the XML configuration file name for the assembly
            containing the managed System.Data.SQLite components.
            </summary>
            <returns>
            The XML configuration file name -OR- null if it cannot be determined
            or does not exist.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.GetSettingValue(System.String,System.String)">
            <summary>
            Queries and returns the value of the specified setting, using the XML
            configuration file and/or the environment variables for the current
            process and/or the current system, when available.
            </summary>
            <param name="name">
            The name of the setting.
            </param>
            <param name="default">
            The value to be returned if the setting has not been set explicitly
            or cannot be determined.
            </param>
            <returns>
            The value of the setting -OR- the default value specified by
            <paramref name="default" /> if it has not been set explicitly or
            cannot be determined.  By default, all references to existing
            environment variables will be expanded to their corresponding values
            within the value to be returned unless either the "No_Expand" or
            "No_Expand_<paramref name="name" />" environment variable is set [to
            anything].
            </returns>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.GetAssemblyDirectory">
            <summary>
            Queries and returns the directory for the assembly currently being
            executed.
            </summary>
            <returns>
            The directory for the assembly currently being executed -OR- null if
            it cannot be determined.
            </returns>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods.PROCESSOR_ARCHITECTURE">
            <summary>
            The name of the environment variable containing the processor
            architecture of the current process.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.LoadLibrary(System.String)">
            <summary>
            This is the P/Invoke method that wraps the native Win32 LoadLibrary
            function.  See the MSDN documentation for full details on what it
            does.
            </summary>
            <param name="fileName">
            The name of the executable library.
            </param>
            <returns>
            The native module handle upon success -OR- IntPtr.Zero on failure.
            </returns>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods._SQLiteNativeModuleFileName">
            <summary>
            The native module file name for the native SQLite library or null.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.UnsafeNativeMethods._SQLiteNativeModuleHandle">
            <summary>
            The native module handle for the native SQLite library or the value
            IntPtr.Zero.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.SearchForDirectory(System.String@,System.String@)">
            <summary>
            Searches for the native SQLite library in the directory containing
            the assembly currently being executed as well as the base directory
            for the current application domain.
            </summary>
            <param name="baseDirectory">
            Upon success, this parameter will be modified to refer to the base
            directory containing the native SQLite library.
            </param>
            <param name="processorArchitecture">
            Upon success, this parameter will be modified to refer to the name
            of the immediate directory (i.e. the offset from the base directory)
            containing the native SQLite library.
            </param>
            <returns>
            Non-zero (success) if the native SQLite library was found; otherwise,
            zero (failure).
            </returns>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.GetBaseDirectory">
            <summary>
            Queries and returns the base directory of the current application
            domain.
            </summary>
            <returns>
            The base directory for the current application domain -OR- null if it
            cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.FixUpDllFileName(System.String)">
            <summary>
            Determines if the dynamic link library file name requires a suffix
            and adds it if necessary.
            </summary>
            <param name="fileName">
            The original dynamic link library file name to inspect.
            </param>
            <returns>
            The dynamic link library file name, possibly modified to include an
            extension.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.GetProcessorArchitecture">
            <summary>
            Queries and returns the processor architecture of the current
            process.
            </summary>
            <returns>
            The processor architecture of the current process -OR- null if it
            cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.GetPlatformName(System.String)">
            <summary>
            Given the processor architecture, returns the name of the platform.
            </summary>
            <param name="processorArchitecture">
            The processor architecture to be translated to a platform name.
            </param>
            <returns>
            The platform name for the specified processor architecture -OR- null
            if it cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.UnsafeNativeMethods.PreLoadSQLiteDll(System.String,System.String,System.String@,System.IntPtr@)">
            <summary>
            Attempts to load the native SQLite library based on the specified
            directory and processor architecture.
            </summary>
            <param name="baseDirectory">
            The base directory to use, null for default (the base directory of
            the current application domain).  This directory should contain the
            processor architecture specific sub-directories.
            </param>
            <param name="processorArchitecture">
            The requested processor architecture, null for default (the
            processor architecture of the current process).  This caller should
            almost always specify null for this parameter.
            </param>
            <param name="nativeModuleFileName">
            The candidate native module file name to load will be stored here,
            if necessary.
            </param>
            <param name="nativeModuleHandle">
            The native module handle as returned by LoadLibrary will be stored
            here, if necessary.  This value will be IntPtr.Zero if the call to
            LoadLibrary fails.
            </param>
            <returns>
            Non-zero if the native module was loaded successfully; otherwise,
            zero.
            </returns>
        </member>
        <member name="T:System.Data.SQLite.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SR.DataTypes">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;
            &lt;DocumentElement&gt;
              &lt;DataTypes&gt;
                &lt;TypeName&gt;smallint&lt;/TypeName&gt;
                &lt;ProviderDbType&gt;10&lt;/ProviderDbType&gt;
                &lt;ColumnSize&gt;5&lt;/ColumnSize&gt;
                &lt;DataType&gt;System.Int16&lt;/DataType&gt;
                &lt;CreateFormat&gt;smallint&lt;/CreateFormat&gt;
                &lt;IsAutoIncrementable&gt;false&lt;/IsAutoIncrementable&gt;
                &lt;IsCaseSensitive&gt;false&lt;/IsCaseSensitive&gt;
                &lt;IsFixedLength&gt;true&lt;/IsFixedLength&gt;
                &lt;IsFixedPrecisionScale&gt;true&lt;/IsFixedPrecisionScale&gt;
                &lt;IsLong&gt;false&lt;/IsLong&gt;
                &lt;IsNullable&gt;true&lt;/ [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:System.Data.SQLite.SR.Keywords">
            <summary>
              Looks up a localized string similar to ALL,ALTER,AND,AS,AUTOINCREMENT,BETWEEN,BY,CASE,CHECK,COLLATE,COMMIT,CONSTRAINT,CREATE,CROSS,DEFAULT,DEFERRABLE,DELETE,DISTINCT,DROP,ELSE,ESCAPE,EXCEPT,FOREIGN,FROM,FULL,GROUP,HAVING,IN,INDEX,INNER,INSERT,INTERSECT,INTO,IS,ISNULL,JOIN,LEFT,LIMIT,NATURAL,NOT,NOTNULL,NULL,ON,OR,ORDER,OUTER,PRIMARY,REFERENCES,RIGHT,ROLLBACK,SELECT,SET,TABLE,THEN,TO,TRANSACTION,UNION,UNIQUE,UPDATE,USING,VALUES,WHEN,WHERE.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SR.MetaDataCollections">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;DocumentElement&gt;
              &lt;MetaDataCollections&gt;
                &lt;CollectionName&gt;MetaDataCollections&lt;/CollectionName&gt;
                &lt;NumberOfRestrictions&gt;0&lt;/NumberOfRestrictions&gt;
                &lt;NumberOfIdentifierParts&gt;0&lt;/NumberOfIdentifierParts&gt;
              &lt;/MetaDataCollections&gt;
              &lt;MetaDataCollections&gt;
                &lt;CollectionName&gt;DataSourceInformation&lt;/CollectionName&gt;
                &lt;NumberOfRestrictions&gt;0&lt;/NumberOfRestrictions&gt;
                &lt;NumberOfIdentifierParts&gt;0&lt;/NumberOfIdentifierParts&gt;
              &lt;/MetaDataCollections&gt;
              &lt;MetaDataC [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteContext">
            <summary>
            This class represents a context from the SQLite core library that can
            be passed to the sqlite3_result_*() and associated functions.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.ISQLiteNativeHandle">
            <summary>
            This interface represents a native handle provided by the SQLite core
            library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.ISQLiteNativeHandle.NativeHandle">
            <summary>
            The native handle value.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteContext.pContext">
            <summary>
            The native context handle.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.#ctor(System.IntPtr)">
            <summary>
            Constructs an instance of this class using the specified native
            context handle.
            </summary>
            <param name="pContext">
            The native context handle to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetNull">
            <summary>
            Sets the context result to NULL.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetDouble(System.Double)">
            <summary>
            Sets the context result to the specified <see cref="T:System.Double"/>
            value.
            </summary>
            <param name="value">
            The <see cref="T:System.Double"/> value to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetInt(System.Int32)">
            <summary>
            Sets the context result to the specified <see cref="T:System.Int32"/>
            value.
            </summary>
            <param name="value">
            The <see cref="T:System.Int32"/> value to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetInt64(System.Int64)">
            <summary>
            Sets the context result to the specified <see cref="T:System.Int64"/>
            value.
            </summary>
            <param name="value">
            The <see cref="T:System.Int64"/> value to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetString(System.String)">
            <summary>
            Sets the context result to the specified <see cref="T:System.String"/>
            value.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> value to use.  This value will be
            converted to the UTF-8 encoding prior to being used.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetError(System.String)">
            <summary>
            Sets the context result to the specified <see cref="T:System.String"/>
            value containing an error message.
            </summary>
            <param name="value">
            The <see cref="T:System.String"/> value containing the error message text.
            This value will be converted to the UTF-8 encoding prior to being
            used.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetErrorCode(System.Data.SQLite.SQLiteErrorCode)">
            <summary>
            Sets the context result to the specified <see cref="T:System.Data.SQLite.SQLiteErrorCode"/>
            value.
            </summary>
            <param name="value">
            The <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetErrorTooBig">
            <summary>
            Sets the context result to contain the error code SQLITE_TOOBIG.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetErrorNoMemory">
            <summary>
            Sets the context result to contain the error code SQLITE_NOMEM.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetBlob(System.Byte[])">
            <summary>
            Sets the context result to the specified <see cref="T:System.Byte"/> array
            value.
            </summary>
            <param name="value">
            The <see cref="T:System.Byte"/> array value to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetZeroBlob(System.Int32)">
            <summary>
            Sets the context result to a BLOB of zeros of the specified size.
            </summary>
            <param name="value">
            The number of zero bytes to use for the BLOB context result.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteContext.SetValue(System.Data.SQLite.SQLiteValue)">
            <summary>
            Sets the context result to the specified <see cref="T:System.Data.SQLite.SQLiteValue"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Data.SQLite.SQLiteValue"/> to use.
            </param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteContext.NativeHandle">
            <summary>
            Returns the underlying SQLite native handle associated with this
            object instance.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteValue">
            <summary>
            This class represents a value from the SQLite core library that can be
            passed to the sqlite3_value_*() and associated functions.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteValue.pValue">
            <summary>
            The native value handle.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.#ctor(System.IntPtr)">
            <summary>
            Constructs an instance of this class using the specified native
            value handle.
            </summary>
            <param name="pValue">
            The native value handle to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.PreventNativeAccess">
            <summary>
            Invalidates the native value handle, thereby preventing further
            access to it from this object instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.ArrayFromSizeAndIntPtr(System.Int32,System.IntPtr)">
            <summary>
            Converts a logical array of native pointers to native sqlite3_value
            structures into a managed array of <see cref="T:System.Data.SQLite.SQLiteValue"/>
            object instances.
            </summary>
            <param name="argc">
            The number of elements in the logical array of native sqlite3_value
            structures.
            </param>
            <param name="argv">
            The native pointer to the logical array of native sqlite3_value
            structures to convert.
            </param>
            <returns>
            The managed array of <see cref="T:System.Data.SQLite.SQLiteValue"/> object instances or
            null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.GetTypeAffinity">
            <summary>
            Gets and returns the type affinity associated with this value.
            </summary>
            <returns>
            The type affinity associated with this value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.GetBytes">
            <summary>
            Gets and returns the number of bytes associated with this value, if
            it refers to a UTF-8 encoded string.
            </summary>
            <returns>
            The number of bytes associated with this value.  The returned value
            may be zero.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.GetInt">
            <summary>
            Gets and returns the <see cref="T:System.Int32"/> associated with this
            value.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/> associated with this value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.GetInt64">
            <summary>
            Gets and returns the <see cref="T:System.Int64"/> associated with
            this value.
            </summary>
            <returns>
            The <see cref="T:System.Int64"/> associated with this value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.GetDouble">
            <summary>
            Gets and returns the <see cref="T:System.Double"/> associated with this
            value.
            </summary>
            <returns>
            The <see cref="T:System.Double"/> associated with this value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.GetString">
            <summary>
            Gets and returns the <see cref="T:System.String"/> associated with this
            value.
            </summary>
            <returns>
            The <see cref="T:System.String"/> associated with this value.  The value is
            converted from the UTF-8 encoding prior to being returned.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.GetBlob">
            <summary>
            Gets and returns the <see cref="T:System.Byte"/> array associated with this
            value.
            </summary>
            <returns>
            The <see cref="T:System.Byte"/> array associated with this value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteValue.Persist">
            <summary>
            Uses the native value handle to obtain and store the managed value
            for this object instance, thus saving it for later use.  The type
            of the managed value is determined by the type affinity of the
            native value.  If the type affinity is not recognized by this
            method, no work is done and false is returned.
            </summary>
            <returns>
            Non-zero if the native value was persisted successfully.
            </returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteValue.NativeHandle">
            <summary>
            Returns the underlying SQLite native handle associated with this
            object instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteValue.Persisted">
            <summary>
            Returns non-zero if the native SQLite value has been successfully
            persisted as a managed value within this object instance (i.e. the
            <see cref="P:System.Data.SQLite.SQLiteValue.Value"/> property may then be read successfully).
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteValue.Value">
            <summary>
            If the managed value for this object instance is available (i.e. it
            has been previously persisted via the <see cref="M:System.Data.SQLite.SQLiteValue.Persist"/>) method,
            that value is returned; otherwise, an exception is thrown.  The
            returned value may be null.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteIndexConstraintOp">
            <summary>
            These are the allowed values for the operators that are part of a
            constraint term in the WHERE clause of a query that uses a virtual
            table.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintOp.EqualTo">
            <summary>
            This value represents the equality operator.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintOp.GreaterThan">
            <summary>
            This value represents the greater than operator.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintOp.LessThanOrEqualTo">
            <summary>
            This value represents the less than or equal to operator.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintOp.LessThan">
            <summary>
            This value represents the less than operator.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintOp.GreaterThanOrEqualTo">
            <summary>
            This value represents the greater than or equal to operator.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintOp.Match">
            <summary>
            This value represents the MATCH operator.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteIndexConstraint">
            <summary>
            This class represents the native sqlite3_index_constraint structure
            from the SQLite core library.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexConstraint.#ctor(System.Data.SQLite.UnsafeNativeMethods.sqlite3_index_constraint)">
            <summary>
            Constructs an instance of this class using the specified native
            sqlite3_index_constraint structure.
            </summary>
            <param name="constraint">
            The native sqlite3_index_constraint structure to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexConstraint.#ctor(System.Int32,System.Data.SQLite.SQLiteIndexConstraintOp,System.Byte,System.Int32)">
            <summary>
            Constructs an instance of this class using the specified field
            values.
            </summary>
            <param name="iColumn">
            Column on left-hand side of constraint.
            </param>
            <param name="op">
            Constraint operator (<see cref="T:System.Data.SQLite.SQLiteIndexConstraintOp"/>).
            </param>
            <param name="usable">
            True if this constraint is usable.
            </param>
            <param name="iTermOffset">
            Used internally - <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/>
            should ignore.
            </param>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraint.iColumn">
            <summary>
            Column on left-hand side of constraint.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraint.op">
            <summary>
            Constraint operator (<see cref="T:System.Data.SQLite.SQLiteIndexConstraintOp"/>).
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraint.usable">
            <summary>
            True if this constraint is usable.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraint.iTermOffset">
            <summary>
            Used internally - <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/>
            should ignore.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteIndexOrderBy">
            <summary>
            This class represents the native sqlite3_index_orderby structure from
            the SQLite core library.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexOrderBy.#ctor(System.Data.SQLite.UnsafeNativeMethods.sqlite3_index_orderby)">
            <summary>
            Constructs an instance of this class using the specified native
            sqlite3_index_orderby structure.
            </summary>
            <param name="orderBy">
            The native sqlite3_index_orderby structure to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexOrderBy.#ctor(System.Int32,System.Byte)">
            <summary>
            Constructs an instance of this class using the specified field
            values.
            </summary>
            <param name="iColumn">
            Column number.
            </param>
            <param name="desc">
            True for DESC.  False for ASC.
            </param>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexOrderBy.iColumn">
            <summary>
            Column number.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexOrderBy.desc">
            <summary>
            True for DESC.  False for ASC.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteIndexConstraintUsage">
            <summary>
            This class represents the native sqlite3_index_constraint_usage
            structure from the SQLite core library.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexConstraintUsage.#ctor(System.Data.SQLite.UnsafeNativeMethods.sqlite3_index_constraint_usage)">
            <summary>
            Constructs an instance of this class using the specified native
            sqlite3_index_constraint_usage structure.
            </summary>
            <param name="constraintUsage">
            The native sqlite3_index_constraint_usage structure to use.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexConstraintUsage.#ctor(System.Int32,System.Byte)">
            <summary>
            Constructs an instance of this class using the specified field
            values.
            </summary>
            <param name="argvIndex">
            If greater than 0, constraint is part of argv to xFilter.
            </param>
            <param name="omit">
            Do not code a test for this constraint.
            </param>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintUsage.argvIndex">
            <summary>
            If greater than 0, constraint is part of argv to xFilter.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteIndexConstraintUsage.omit">
            <summary>
            Do not code a test for this constraint.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteIndexInputs">
            <summary>
            This class represents the various inputs provided by the SQLite core
            library to the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexInputs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="nConstraint">
            The number of <see cref="T:System.Data.SQLite.SQLiteIndexConstraint"/> instances to
            pre-allocate space for.
            </param>
            <param name="nOrderBy">
            The number of <see cref="T:System.Data.SQLite.SQLiteIndexOrderBy"/> instances to
            pre-allocate space for.
            </param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexInputs.Constraints">
            <summary>
            An array of <see cref="T:System.Data.SQLite.SQLiteIndexConstraint"/> object instances,
            each containing information supplied by the SQLite core library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexInputs.OrderBys">
            <summary>
            An array of <see cref="T:System.Data.SQLite.SQLiteIndexOrderBy"/> object instances,
            each containing information supplied by the SQLite core library.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteIndexOutputs">
            <summary>
            This class represents the various outputs provided to the SQLite core
            library by the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexOutputs.#ctor(System.Int32)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="nConstraint">
            The number of <see cref="T:System.Data.SQLite.SQLiteIndexConstraintUsage"/> instances
            to pre-allocate space for.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndexOutputs.CanUseEstimatedRows">
            <summary>
            Determines if the native estimatedRows field can be used, based on
            the available version of the SQLite core library.
            </summary>
            <returns>
            Non-zero if the <see cref="P:System.Data.SQLite.SQLiteIndexOutputs.EstimatedRows"/> property is supported
            by the SQLite core library.
            </returns>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexOutputs.ConstraintUsages">
            <summary>
            An array of <see cref="T:System.Data.SQLite.SQLiteIndexConstraintUsage"/> object
            instances, each containing information to be supplied to the SQLite
            core library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexOutputs.IndexNumber">
            <summary>
            Number used to help identify the selected index.  This value will
            later be provided to the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/>
            method.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexOutputs.IndexString">
            <summary>
            String used to help identify the selected index.  This value will
            later be provided to the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/>
            method.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexOutputs.NeedToFreeIndexString">
            <summary>
            Non-zero if the index string must be freed by the SQLite core
            library.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexOutputs.OrderByConsumed">
            <summary>
            True if output is already ordered.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexOutputs.EstimatedCost">
            <summary>
            Estimated cost of using this index.  Using a null value here
            indicates that a default estimated cost value should be used.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndexOutputs.EstimatedRows">
            <summary>
            Estimated number of rows returned.  Using a null value here
            indicates that a default estimated rows value should be used.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteIndex">
            <summary>
            This class represents the various inputs and outputs used with the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndex.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="nConstraint">
            The number of <see cref="T:System.Data.SQLite.SQLiteIndexConstraint"/> (and
            <see cref="T:System.Data.SQLite.SQLiteIndexConstraintUsage"/>) instances to
            pre-allocate space for.
            </param>
            <param name="nOrderBy">
            The number of <see cref="T:System.Data.SQLite.SQLiteIndexOrderBy"/> instances to
            pre-allocate space for.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndex.FromIntPtr(System.IntPtr,System.Data.SQLite.SQLiteIndex@)">
            <summary>
            Converts a native pointer to a native sqlite3_index_info structure
            into a new <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance.
            </summary>
            <param name="pIndex">
            The native pointer to the native sqlite3_index_info structure to
            convert.
            </param>
            <param name="index">
            Upon success, this parameter will be modified to contain the newly
            created <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteIndex.ToIntPtr(System.Data.SQLite.SQLiteIndex,System.IntPtr)">
            <summary>
            Populates the outputs of a pre-allocated native sqlite3_index_info
            structure using an existing <see cref="T:System.Data.SQLite.SQLiteIndex"/> object
            instance.
            </summary>
            <param name="index">
            The existing <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance containing
            the output data to use.
            </param>
            <param name="pIndex">
            The native pointer to the pre-allocated native sqlite3_index_info
            structure.
            </param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndex.Inputs">
            <summary>
            The <see cref="T:System.Data.SQLite.SQLiteIndexInputs"/> object instance containing
            the inputs to the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/>
            method.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteIndex.Outputs">
            <summary>
            The <see cref="T:System.Data.SQLite.SQLiteIndexOutputs"/> object instance containing
            the outputs from the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/>
            method.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteVirtualTable">
            <summary>
            This class represents a managed virtual table implementation.  It is
            not sealed and should be used as the base class for any user-defined
            virtual table classes implemented in managed code.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteVirtualTable.ModuleNameIndex">
            <summary>
            The index within the array of strings provided to the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> and
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> methods containing the
            name of the module implementing this virtual table.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteVirtualTable.DatabaseNameIndex">
            <summary>
            The index within the array of strings provided to the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> and
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> methods containing the
            name of the database containing this virtual table.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteVirtualTable.TableNameIndex">
            <summary>
            The index within the array of strings provided to the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> and
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> methods containing the
            name of the virtual table.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTable.#ctor(System.String[])">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="arguments">
            The original array of strings provided to the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> and
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> methods.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTable.BestIndex(System.Data.SQLite.SQLiteIndex)">
            <summary>
            This method should normally be used by the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method in order to
            perform index selection based on the constraints provided by the
            SQLite core library.
            </summary>
            <param name="index">
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance containing all the
            data for the inputs and outputs relating to index selection.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTable.Rename(System.String)">
            <summary>
            Attempts to record the renaming of the virtual table associated
            with this object instance.
            </summary>
            <param name="name">
            The new name for the virtual table.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTable.Dispose">
            <summary>
            Disposes of this object instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTable.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTable.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.Data.SQLite.SQLiteVirtualTable.Dispose"/> method.  Zero if this method is being called
            from the finalizer.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTable.Finalize">
            <summary>
            Finalizes this object instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTable.Arguments">
            <summary>
            The original array of strings provided to the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> and
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> methods.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTable.ModuleName">
            <summary>
            The name of the module implementing this virtual table.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTable.DatabaseName">
            <summary>
            The name of the database containing this virtual table.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTable.TableName">
            <summary>
            The name of the virtual table.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTable.Index">
            <summary>
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance containing all the
            data for the inputs and outputs relating to the most recent index
            selection.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTable.NativeHandle">
            <summary>
            Returns the underlying SQLite native handle associated with this
            object instance.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteVirtualTableCursor">
            <summary>
            This class represents a managed virtual table cursor implementation.
            It is not sealed and should be used as the base class for any
            user-defined virtual table cursor classes implemented in managed code.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteVirtualTableCursor.InvalidRowIndex">
            <summary>
            This value represents an invalid integer row sequence number.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteVirtualTableCursor.rowIndex">
            <summary>
            The field holds the integer row sequence number for the current row
            pointed to by this cursor object instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.#ctor(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this object instance.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.#ctor">
            <summary>
            Constructs an instance of this class.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.TryPersistValues(System.Data.SQLite.SQLiteValue[])">
            <summary>
            Attempts to persist the specified <see cref="T:System.Data.SQLite.SQLiteValue"/> object
            instances in order to make them available after the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method returns.
            </summary>
            <param name="values">
            The array of <see cref="T:System.Data.SQLite.SQLiteValue"/> object instances to be
            persisted.
            </param>
            <returns>
            The number of <see cref="T:System.Data.SQLite.SQLiteValue"/> object instances that were
            successfully persisted.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.Filter(System.Int32,System.String,System.Data.SQLite.SQLiteValue[])">
            <summary>
            This method should normally be used by the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method in order to
            perform filtering of the result rows and/or to record the filtering
            criteria provided by the SQLite core library.
            </summary>
            <param name="indexNumber">
            Number used to help identify the selected index.
            </param>
            <param name="indexString">
            String used to help identify the selected index.
            </param>
            <param name="values">
            The values corresponding to each column in the selected index.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.GetRowIndex">
            <summary>
            Determines the integer row sequence number for the current row.
            </summary>
            <returns>
            The integer row sequence number for the current row -OR- zero if
            it cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.NextRowIndex">
            <summary>
            Adjusts the integer row sequence number so that it refers to the
            next row.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.Dispose">
            <summary>
            Disposes of this object instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.Data.SQLite.SQLiteVirtualTableCursor.Dispose"/> method.  Zero if this method is being called
            from the finalizer.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursor.Finalize">
            <summary>
            Finalizes this object instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursor.Table">
            <summary>
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this object instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursor.IndexNumber">
            <summary>
            Number used to help identify the selected index.  This value will
            be set via the <see cref="M:System.Data.SQLite.SQLiteVirtualTableCursor.Filter(System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursor.IndexString">
            <summary>
            String used to help identify the selected index.  This value will
            be set via the <see cref="M:System.Data.SQLite.SQLiteVirtualTableCursor.Filter(System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursor.Values">
            <summary>
            The values used to filter the rows returned via this cursor object
            instance.  This value will be set via the <see cref="M:System.Data.SQLite.SQLiteVirtualTableCursor.Filter(System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/>
            method.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursor.NativeHandle">
            <summary>
            Returns the underlying SQLite native handle associated with this
            object instance.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.ISQLiteNativeModule">
            <summary>
            This interface represents a virtual table implementation written in
            native code.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            <para>
            This method is called to create a new instance of a virtual table
            in response to a CREATE VIRTUAL TABLE statement. The db parameter
            is a pointer to the SQLite database connection that is executing
            the CREATE VIRTUAL TABLE statement. The pAux argument is the copy
            of the client data pointer that was the fourth argument to the
            sqlite3_create_module() or sqlite3_create_module_v2() call that
            registered the virtual table module. The argv parameter is an
            array of argc pointers to null terminated strings. The first
            string, argv[0], is the name of the module being invoked. The
            module name is the name provided as the second argument to
            sqlite3_create_module() and as the argument to the USING clause of
            the CREATE VIRTUAL TABLE statement that is running. The second,
            argv[1], is the name of the database in which the new virtual table
            is being created. The database name is "main" for the primary
            database, or "temp" for TEMP database, or the name given at the
            end of the ATTACH statement for attached databases. The third
            element of the array, argv[2], is the name of the new virtual
            table, as specified following the TABLE keyword in the CREATE
            VIRTUAL TABLE statement. If present, the fourth and subsequent
            strings in the argv[] array report the arguments to the module name
            in the CREATE VIRTUAL TABLE statement.
            </para>
            <para>
            The job of this method is to construct the new virtual table object
            (an sqlite3_vtab object) and return a pointer to it in *ppVTab.
            </para>
            <para>
            As part of the task of creating a new sqlite3_vtab structure, this
            method must invoke sqlite3_declare_vtab() to tell the SQLite core
            about the columns and datatypes in the virtual table. The
            sqlite3_declare_vtab() API has the following prototype:
            </para>
            <para>
            <code>
            int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable)
            </code>
            </para>
            <para>
            The first argument to sqlite3_declare_vtab() must be the same
            database connection pointer as the first parameter to this method.
            The second argument to sqlite3_declare_vtab() must a
            zero-terminated UTF-8 string that contains a well-formed CREATE
            TABLE statement that defines the columns in the virtual table and
            their data types. The name of the table in this CREATE TABLE
            statement is ignored, as are all constraints. Only the column names
            and datatypes matter. The CREATE TABLE statement string need not to
            be held in persistent memory. The string can be deallocated and/or
            reused as soon as the sqlite3_declare_vtab() routine returns.
            </para>
            </summary>
            <param name="pDb">
            The native database connection handle.
            </param>
            <param name="pAux">
            The original native pointer value that was provided to the
            sqlite3_create_module(), sqlite3_create_module_v2() or
            sqlite3_create_disposable_module() functions.
            </param>
            <param name="argc">
            The number of arguments from the CREATE VIRTUAL TABLE statement.
            </param>
            <param name="argv">
            The array of string arguments from the CREATE VIRTUAL TABLE
            statement.
            </param>
            <param name="pVtab">
            Upon success, this parameter must be modified to point to the newly
            created native sqlite3_vtab derived structure.
            </param>
            <param name="pError">
            Upon failure, this parameter must be modified to point to the error
            message, with the underlying memory having been obtained from the
            sqlite3_malloc() function.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            <para>
            The xConnect method is very similar to xCreate. It has the same
            parameters and constructs a new sqlite3_vtab structure just like
            xCreate. And it must also call sqlite3_declare_vtab() like xCreate.
            </para>
            <para>
            The difference is that xConnect is called to establish a new
            connection to an existing virtual table whereas xCreate is called
            to create a new virtual table from scratch.
            </para>
            <para>
            The xCreate and xConnect methods are only different when the
            virtual table has some kind of backing store that must be
            initialized the first time the virtual table is created. The
            xCreate method creates and initializes the backing store. The
            xConnect method just connects to an existing backing store.
            </para>
            <para>
            As an example, consider a virtual table implementation that
            provides read-only access to existing comma-separated-value (CSV)
            files on disk. There is no backing store that needs to be created
            or initialized for such a virtual table (since the CSV files
            already exist on disk) so the xCreate and xConnect methods will be
            identical for that module.
            </para>
            <para>
            Another example is a virtual table that implements a full-text
            index. The xCreate method must create and initialize data
            structures to hold the dictionary and posting lists for that index.
            The xConnect method, on the other hand, only has to locate and use
            an existing dictionary and posting lists that were created by a
            prior xCreate call.
            </para>
            <para>
            The xConnect method must return SQLITE_OK if it is successful in
            creating the new virtual table, or SQLITE_ERROR if it is not
            successful. If not successful, the sqlite3_vtab structure must not
            be allocated. An error message may optionally be returned in *pzErr
            if unsuccessful. Space to hold the error message string must be
            allocated using an SQLite memory allocation function like
            sqlite3_malloc() or sqlite3_mprintf() as the SQLite core will
            attempt to free the space using sqlite3_free() after the error has
            been reported up to the application.
            </para>
            <para>
            The xConnect method is required for every virtual table
            implementation, though the xCreate and xConnect pointers of the
            sqlite3_module object may point to the same function the virtual
            table does not need to initialize backing store.
            </para>
            </summary>
            <param name="pDb">
            The native database connection handle.
            </param>
            <param name="pAux">
            The original native pointer value that was provided to the
            sqlite3_create_module(), sqlite3_create_module_v2() or
            sqlite3_create_disposable_module() functions.
            </param>
            <param name="argc">
            The number of arguments from the CREATE VIRTUAL TABLE statement.
            </param>
            <param name="argv">
            The array of string arguments from the CREATE VIRTUAL TABLE
            statement.
            </param>
            <param name="pVtab">
            Upon success, this parameter must be modified to point to the newly
            created native sqlite3_vtab derived structure.
            </param>
            <param name="pError">
            Upon failure, this parameter must be modified to point to the error
            message, with the underlying memory having been obtained from the
            sqlite3_malloc() function.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)">
            <summary>
            <para>
            SQLite uses the xBestIndex method of a virtual table module to
            determine the best way to access the virtual table. The xBestIndex
            method has a prototype like this:
            </para>
            <code>
            int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);
            </code>
            <para>
            The SQLite core communicates with the xBestIndex method by filling
            in certain fields of the sqlite3_index_info structure and passing a
            pointer to that structure into xBestIndex as the second parameter.
            The xBestIndex method fills out other fields of this structure
            which forms the reply. The sqlite3_index_info structure looks like
            this:
            </para>
            <code>
             struct sqlite3_index_info {
               /* Inputs */
               const int nConstraint;   /* Number of entries in aConstraint */
               const struct sqlite3_index_constraint {
                  int iColumn;          /* Column on left-hand side of
                                         * constraint */
                  unsigned char op;     /* Constraint operator */
                  unsigned char usable; /* True if this constraint is usable */
                  int iTermOffset;      /* Used internally - xBestIndex should
                                         * ignore */
               } *const aConstraint;    /* Table of WHERE clause constraints */
               const int nOrderBy;      /* Number of terms in the ORDER BY
                                         * clause */
               const struct sqlite3_index_orderby {
                  int iColumn;          /* Column number */
                  unsigned char desc;   /* True for DESC.  False for ASC. */
               } *const aOrderBy;       /* The ORDER BY clause */
               /* Outputs */
               struct sqlite3_index_constraint_usage {
                 int argvIndex;         /* if greater than zero, constraint is
                                         * part of argv to xFilter */
                 unsigned char omit;    /* Do not code a test for this
                                         * constraint */
               } *const aConstraintUsage;
               int idxNum;              /* Number used to identify the index */
               char *idxStr;            /* String, possibly obtained from
                                         * sqlite3_malloc() */
               int needToFreeIdxStr;    /* Free idxStr using sqlite3_free() if
                                         * true */
               int orderByConsumed;     /* True if output is already ordered */
               double estimatedCost;    /* Estimated cost of using this index */
             };
            </code>
            <para>
            In addition, there are some defined constants:
            </para>
            <code>
             #define SQLITE_INDEX_CONSTRAINT_EQ    2
             #define SQLITE_INDEX_CONSTRAINT_GT    4
             #define SQLITE_INDEX_CONSTRAINT_LE    8
             #define SQLITE_INDEX_CONSTRAINT_LT    16
             #define SQLITE_INDEX_CONSTRAINT_GE    32
             #define SQLITE_INDEX_CONSTRAINT_MATCH 64
            </code>
            <para>
            The SQLite core calls the xBestIndex method when it is compiling a
            query that involves a virtual table. In other words, SQLite calls
            this method when it is running sqlite3_prepare() or the equivalent.
            By calling this method, the SQLite core is saying to the virtual
            table that it needs to access some subset of the rows in the
            virtual table and it wants to know the most efficient way to do
            that access. The xBestIndex method replies with information that
            the SQLite core can then use to conduct an efficient search of the
            virtual table.
            </para>
            <para>
            While compiling a single SQL query, the SQLite core might call
            xBestIndex multiple times with different settings in
            sqlite3_index_info. The SQLite core will then select the
            combination that appears to give the best performance.
            </para>
            <para>
            Before calling this method, the SQLite core initializes an instance
            of the sqlite3_index_info structure with information about the
            query that it is currently trying to process. This information
            derives mainly from the WHERE clause and ORDER BY or GROUP BY
            clauses of the query, but also from any ON or USING clauses if the
            query is a join. The information that the SQLite core provides to
            the xBestIndex method is held in the part of the structure that is
            marked as "Inputs". The "Outputs" section is initialized to zero.
            </para>
            <para>
            The information in the sqlite3_index_info structure is ephemeral
            and may be overwritten or deallocated as soon as the xBestIndex
            method returns. If the xBestIndex method needs to remember any part
            of the sqlite3_index_info structure, it should make a copy. Care
            must be take to store the copy in a place where it will be
            deallocated, such as in the idxStr field with needToFreeIdxStr set
            to 1.
            </para>
            <para>
            Note that xBestIndex will always be called before xFilter, since
            the idxNum and idxStr outputs from xBestIndex are required inputs
            to xFilter. However, there is no guarantee that xFilter will be
            called following a successful xBestIndex.
            </para>
            <para>
            The xBestIndex method is required for every virtual table
            implementation.
            </para>
            <para>
            2.3.1 Inputs
            </para>
            <para>
            The main thing that the SQLite core is trying to communicate to the
            virtual table is the constraints that are available to limit the
            number of rows that need to be searched. The aConstraint[] array
            contains one entry for each constraint. There will be exactly
            nConstraint entries in that array.
            </para>
            <para>
            Each constraint will correspond to a term in the WHERE clause or in
            a USING or ON clause that is of the form
            </para>
            <code>
                column OP EXPR
            </code>
            <para>
            Where "column" is a column in the virtual table, OP is an operator
            like "=" or "&lt;", and EXPR is an arbitrary expression. So, for
            example, if the WHERE clause contained a term like this:
            </para>
            <code>
                     a = 5
            </code>
            <para>
            Then one of the constraints would be on the "a" column with
            operator "=" and an expression of "5". Constraints need not have a
            literal representation of the WHERE clause. The query optimizer
            might make transformations to the WHERE clause in order to extract
            as many constraints as it can. So, for example, if the WHERE clause
            contained something like this:
            </para>
            <code>
                     x BETWEEN 10 AND 100 AND 999&gt;y
            </code>
            <para>
            The query optimizer might translate this into three separate
            constraints:
            </para>
            <code>
                     x &gt;= 10
                     x &lt;= 100
                     y &lt; 999
            </code>
            <para>
            For each constraint, the aConstraint[].iColumn field indicates
            which column appears on the left-hand side of the constraint. The
            first column of the virtual table is column 0. The rowid of the
            virtual table is column -1. The aConstraint[].op field indicates
            which operator is used. The SQLITE_INDEX_CONSTRAINT_* constants map
            integer constants into operator values. Columns occur in the order
            they were defined by the call to sqlite3_declare_vtab() in the
            xCreate or xConnect method. Hidden columns are counted when
            determining the column index.
            </para>
            <para>
            The aConstraint[] array contains information about all constraints
            that apply to the virtual table. But some of the constraints might
            not be usable because of the way tables are ordered in a join. The
            xBestIndex method must therefore only consider constraints that
            have an aConstraint[].usable flag which is true.
            </para>
            <para>
            In addition to WHERE clause constraints, the SQLite core also tells
            the xBestIndex method about the ORDER BY clause. (In an aggregate
            query, the SQLite core might put in GROUP BY clause information in
            place of the ORDER BY clause information, but this fact should not
            make any difference to the xBestIndex method.) If all terms of the
            ORDER BY clause are columns in the virtual table, then nOrderBy
            will be the number of terms in the ORDER BY clause and the
            aOrderBy[] array will identify the column for each term in the
            order by clause and whether or not that column is ASC or DESC.
            </para>
            <para>
            2.3.2 Outputs
            </para>
            <para>
            Given all of the information above, the job of the xBestIndex
            method it to figure out the best way to search the virtual table.
            </para>
            <para>
            The xBestIndex method fills the idxNum and idxStr fields with
            information that communicates an indexing strategy to the xFilter
            method. The information in idxNum and idxStr is arbitrary as far as
            the SQLite core is concerned. The SQLite core just copies the
            information through to the xFilter method. Any desired meaning can
            be assigned to idxNum and idxStr as long as xBestIndex and xFilter
            agree on what that meaning is.
            </para>
            <para>
            The idxStr value may be a string obtained from an SQLite memory
            allocation function such as sqlite3_mprintf(). If this is the case,
            then the needToFreeIdxStr flag must be set to true so that the
            SQLite core will know to call sqlite3_free() on that string when it
            has finished with it, and thus avoid a memory leak.
            </para>
            <para>
            If the virtual table will output rows in the order specified by the
            ORDER BY clause, then the orderByConsumed flag may be set to true.
            If the output is not automatically in the correct order then
            orderByConsumed must be left in its default false setting. This
            will indicate to the SQLite core that it will need to do a separate
            sorting pass over the data after it comes out of the virtual table.
            </para>
            <para>
            The estimatedCost field should be set to the estimated number of
            disk access operations required to execute this query against the
            virtual table. The SQLite core will often call xBestIndex multiple
            times with different constraints, obtain multiple cost estimates,
            then choose the query plan that gives the lowest estimate.
            </para>
            <para>
            The aConstraintUsage[] array contains one element for each of the
            nConstraint constraints in the inputs section of the
            sqlite3_index_info structure. The aConstraintUsage[] array is used
            by xBestIndex to tell the core how it is using the constraints.
            </para>
            <para>
            The xBestIndex method may set aConstraintUsage[].argvIndex entries
            to values greater than one. Exactly one entry should be set to 1,
            another to 2, another to 3, and so forth up to as many or as few as
            the xBestIndex method wants. The EXPR of the corresponding
            constraints will then be passed in as the argv[] parameters to
            xFilter.
            </para>
            <para>
            For example, if the aConstraint[3].argvIndex is set to 1, then when
            xFilter is called, the argv[0] passed to xFilter will have the EXPR
            value of the aConstraint[3] constraint.
            </para>
            <para>
            By default, the SQLite core double checks all constraints on each
            row of the virtual table that it receives. If such a check is
            redundant, the xBestFilter method can suppress that double-check by
            setting aConstraintUsage[].omit.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="pIndex">
            The native pointer to the sqlite3_index_info structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)">
            <summary>
            <para>
            This method releases a connection to a virtual table. Only the
            sqlite3_vtab object is destroyed. The virtual table is not
            destroyed and any backing store associated with the virtual table
            persists. This method undoes the work of xConnect.
            </para>
            <para>
            This method is a destructor for a connection to the virtual table.
            Contrast this method with xDestroy. The xDestroy is a destructor
            for the entire virtual table.
            </para>
            <para>
            The xDisconnect method is required for every virtual table
            implementation, though it is acceptable for the xDisconnect and
            xDestroy methods to be the same function if that makes sense for
            the particular virtual table.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)">
            <summary>
            <para>
            This method releases a connection to a virtual table, just like the
            xDisconnect method, and it also destroys the underlying table
            implementation. This method undoes the work of xCreate.
            </para>
            <para>
            The xDisconnect method is called whenever a database connection
            that uses a virtual table is closed. The xDestroy method is only
            called when a DROP TABLE statement is executed against the virtual
            table.
            </para>
            <para>
            The xDestroy method is required for every virtual table
            implementation, though it is acceptable for the xDisconnect and
            xDestroy methods to be the same function if that makes sense for
            the particular virtual table.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)">
            <summary>
            <para>
            The xOpen method creates a new cursor used for accessing (read
            and/or writing) a virtual table. A successful invocation of this
            method will allocate the memory for the sqlite3_vtab_cursor (or a
            subclass), initialize the new object, and make *ppCursor point to
            the new object. The successful call then returns SQLITE_OK.
            </para>
            <para>
            For every successful call to this method, the SQLite core will
            later invoke the xClose method to destroy the allocated cursor.
            </para>
            <para>
            The xOpen method need not initialize the pVtab field of the
            sqlite3_vtab_cursor structure. The SQLite core will take care of
            that chore automatically.
            </para>
            <para>
            A virtual table implementation must be able to support an arbitrary
            number of simultaneously open cursors.
            </para>
            <para>
            When initially opened, the cursor is in an undefined state. The
            SQLite core will invoke the xFilter method on the cursor prior to
            any attempt to position or read from the cursor.
            </para>
            <para>
            The xOpen method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="pCursor">
            Upon success, this parameter must be modified to point to the newly
            created native sqlite3_vtab_cursor derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)">
            <summary>
            <para>
            The xClose method closes a cursor previously opened by xOpen. The
            SQLite core will always call xClose once for each cursor opened
            using xOpen.
            </para>
            <para>
            This method must release all resources allocated by the
            corresponding xOpen call. The routine will not be called again even
            if it returns an error. The SQLite core will not use the
            sqlite3_vtab_cursor again after it has been closed.
            </para>
            <para>
            The xClose method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            <para>
            This method begins a search of a virtual table. The first argument
            is a cursor opened by xOpen. The next two argument define a
            particular search index previously chosen by xBestIndex. The
            specific meanings of idxNum and idxStr are unimportant as long as
            xFilter and xBestIndex agree on what that meaning is.
            </para>
            <para>
            The xBestIndex function may have requested the values of certain
            expressions using the aConstraintUsage[].argvIndex values of the
            sqlite3_index_info structure. Those values are passed to xFilter
            using the argc and argv parameters.
            </para>
            <para>
            If the virtual table contains one or more rows that match the
            search criteria, then the cursor must be left point at the first
            row. Subsequent calls to xEof must return false (zero). If there
            are no rows match, then the cursor must be left in a state that
            will cause the xEof to return true (non-zero). The SQLite engine
            will use the xColumn and xRowid methods to access that row content.
            The xNext method will be used to advance to the next row.
            </para>
            <para>
            This method must return SQLITE_OK if successful, or an sqlite error
            code if an error occurs.
            </para>
            <para>
            The xFilter method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure.
            </param>
            <param name="idxNum">
            Number used to help identify the selected index.
            </param>
            <param name="idxStr">
            The native pointer to the UTF-8 encoded string containing the
            string used to help identify the selected index.
            </param>
            <param name="argc">
            The number of native pointers to sqlite3_value structures specified
            in <paramref name="argv" />.
            </param>
            <param name="argv">
            An array of native pointers to sqlite3_value structures containing
            filtering criteria for the selected index.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)">
            <summary>
            <para>
            The xNext method advances a virtual table cursor to the next row of
            a result set initiated by xFilter. If the cursor is already
            pointing at the last row when this routine is called, then the
            cursor no longer points to valid data and a subsequent call to the
            xEof method must return true (non-zero). If the cursor is
            successfully advanced to another row of content, then subsequent
            calls to xEof must return false (zero).
            </para>
            <para>
            This method must return SQLITE_OK if successful, or an sqlite error
            code if an error occurs.
            </para>
            <para>
            The xNext method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)">
            <summary>
            <para>
            The xEof method must return false (zero) if the specified cursor
            currently points to a valid row of data, or true (non-zero)
            otherwise. This method is called by the SQL engine immediately
            after each xFilter and xNext invocation.
            </para>
            <para>
            The xEof method is required for every virtual table implementation.
            </para>
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure.
            </param>
            <returns>
            Non-zero if no more rows are available; zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            <para>
            The SQLite core invokes this method in order to find the value for
            the N-th column of the current row. N is zero-based so the first
            column is numbered 0. The xColumn method may return its result back
            to SQLite using one of the following interface:
            </para>
            <code>
                sqlite3_result_blob()
                sqlite3_result_double()
                sqlite3_result_int()
                sqlite3_result_int64()
                sqlite3_result_null()
                sqlite3_result_text()
                sqlite3_result_text16()
                sqlite3_result_text16le()
                sqlite3_result_text16be()
                sqlite3_result_zeroblob()
            </code>
            <para>
            If the xColumn method implementation calls none of the functions
            above, then the value of the column defaults to an SQL NULL.
            </para>
            <para>
            To raise an error, the xColumn method should use one of the
            result_text() methods to set the error message text, then return an
            appropriate error code. The xColumn method must return SQLITE_OK on
            success.
            </para>
            <para>
            The xColumn method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure.
            </param>
            <param name="pContext">
            The native pointer to the sqlite3_context structure to be used
            for returning the specified column value to the SQLite core
            library.
            </param>
            <param name="index">
            The zero-based index corresponding to the column containing the
            value to be returned.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)">
            <summary>
            <para>
            A successful invocation of this method will cause *pRowid to be
            filled with the rowid of row that the virtual table cursor pCur is
            currently pointing at. This method returns SQLITE_OK on success. It
            returns an appropriate error code on failure.
            </para>
            <para>
            The xRowid method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure.
            </param>
            <param name="rowId">
            Upon success, this parameter must be modified to contain the unique
            integer row identifier for the current row for the specified cursor.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)">
            <summary>
            <para>
            All changes to a virtual table are made using the xUpdate method.
            This one method can be used to insert, delete, or update.
            </para>
            <para>
            The argc parameter specifies the number of entries in the argv
            array. The value of argc will be 1 for a pure delete operation or
            N+2 for an insert or replace or update where N is the number of
            columns in the table. In the previous sentence, N includes any
            hidden columns.
            </para>
            <para>
            Every argv entry will have a non-NULL value in C but may contain
            the SQL value NULL. In other words, it is always true that
            argv[i]!=0 for i between 0 and argc-1. However, it might be the
            case that sqlite3_value_type(argv[i])==SQLITE_NULL.
            </para>
            <para>
            The argv[0] parameter is the rowid of a row in the virtual table
            to be deleted. If argv[0] is an SQL NULL, then no deletion occurs.
            </para>
            <para>
            The argv[1] parameter is the rowid of a new row to be inserted into
            the virtual table. If argv[1] is an SQL NULL, then the
            implementation must choose a rowid for the newly inserted row.
            Subsequent argv[] entries contain values of the columns of the
            virtual table, in the order that the columns were declared. The
            number of columns will match the table declaration that the
            xConnect or xCreate method made using the sqlite3_declare_vtab()
            call. All hidden columns are included.
            </para>
            <para>
            When doing an insert without a rowid (argc>1, argv[1] is an SQL
            NULL), the implementation must set *pRowid to the rowid of the
            newly inserted row; this will become the value returned by the
            sqlite3_last_insert_rowid() function. Setting this value in all the
            other cases is a harmless no-op; the SQLite engine ignores the
            *pRowid return value if argc==1 or argv[1] is not an SQL NULL.
            </para>
            <para>
            Each call to xUpdate will fall into one of cases shown below. Note
            that references to argv[i] mean the SQL value held within the
            argv[i] object, not the argv[i] object itself.
            </para>
            <code>
                argc = 1
            </code>
            <para>
                    The single row with rowid equal to argv[0] is deleted. No
                    insert occurs.
            </para>
            <code>
                argc > 1
                argv[0] = NULL
            </code>
            <para>
                    A new row is inserted with a rowid argv[1] and column
                    values in argv[2] and following. If argv[1] is an SQL NULL,
                    the a new unique rowid is generated automatically.
            </para>
            <code>
                argc > 1
                argv[0] ? NULL
                argv[0] = argv[1]
            </code>
            <para>
                    The row with rowid argv[0] is updated with new values in
                    argv[2] and following parameters.
            </para>
            <code>
                argc > 1
                argv[0] ? NULL
                argv[0] ? argv[1]
            </code>
            <para>
                    The row with rowid argv[0] is updated with rowid argv[1]
                    and new values in argv[2] and following parameters. This
                    will occur when an SQL statement updates a rowid, as in
                    the statement:
            </para>
            <code>
                        UPDATE table SET rowid=rowid+1 WHERE ...;
            </code>
            <para>
            The xUpdate method must return SQLITE_OK if and only if it is
            successful. If a failure occurs, the xUpdate must return an
            appropriate error code. On a failure, the pVTab->zErrMsg element
            may optionally be replaced with error message text stored in memory
            allocated from SQLite using functions such as sqlite3_mprintf() or
            sqlite3_malloc().
            </para>
            <para>
            If the xUpdate method violates some constraint of the virtual table
            (including, but not limited to, attempting to store a value of the
            wrong datatype, attempting to store a value that is too large or
            too small, or attempting to change a read-only value) then the
            xUpdate must fail with an appropriate error code.
            </para>
            <para>
            There might be one or more sqlite3_vtab_cursor objects open and in
            use on the virtual table instance and perhaps even on the row of
            the virtual table when the xUpdate method is invoked. The
            implementation of xUpdate must be prepared for attempts to delete
            or modify rows of the table out from other existing cursors. If the
            virtual table cannot accommodate such changes, the xUpdate method
            must return an error code.
            </para>
            <para>
            The xUpdate method is optional. If the xUpdate pointer in the
            sqlite3_module for a virtual table is a NULL pointer, then the
            virtual table is read-only.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="argc">
            The number of new or modified column values contained in
            <paramref name="argv" />.
            </param>
            <param name="argv">
            The array of native pointers to sqlite3_value structures containing
            the new or modified column values, if any.
            </param>
            <param name="rowId">
            Upon success, this parameter must be modified to contain the unique
            integer row identifier for the row that was inserted, if any.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)">
            <summary>
            <para>
            This method begins a transaction on a virtual table. This is method
            is optional. The xBegin pointer of sqlite3_module may be NULL.
            </para>
            <para>
            This method is always followed by one call to either the xCommit or
            xRollback method. Virtual table transactions do not nest, so the
            xBegin method will not be invoked more than once on a single
            virtual table without an intervening call to either xCommit or
            xRollback. Multiple calls to other methods can and likely will
            occur in between the xBegin and the corresponding xCommit or
            xRollback.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)">
            <summary>
            <para>
            This method signals the start of a two-phase commit on a virtual
            table. This is method is optional. The xSync pointer of
            sqlite3_module may be NULL.
            </para>
            <para>
            This method is only invoked after call to the xBegin method and
            prior to an xCommit or xRollback. In order to implement two-phase
            commit, the xSync method on all virtual tables is invoked prior to
            invoking the xCommit method on any virtual table. If any of the
            xSync methods fail, the entire transaction is rolled back.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)">
            <summary>
            <para>
            This method causes a virtual table transaction to commit. This is
            method is optional. The xCommit pointer of sqlite3_module may be
            NULL.
            </para>
            <para>
            A call to this method always follows a prior call to xBegin and
            xSync.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)">
            <summary>
            <para>
            This method causes a virtual table transaction to rollback. This is
            method is optional. The xRollback pointer of sqlite3_module may be
            NULL.
            </para>
            <para>
            A call to this method always follows a prior call to xBegin.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)">
            <summary>
            <para>
            This method provides notification that the virtual table
            implementation that the virtual table will be given a new name. If
            this method returns SQLITE_OK then SQLite renames the table. If
            this method returns an error code then the renaming is prevented.
            </para>
            <para>
            The xRename method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="nArg">
            The number of arguments to the function being sought.
            </param>
            <param name="zName">
            The name of the function being sought.
            </param>
            <param name="callback">
            Upon success, this parameter must be modified to contain the
            delegate responsible for implementing the specified function.
            </param>
            <param name="pClientData">
            Upon success, this parameter must be modified to contain the
            native user-data pointer associated with
            <paramref name="callback" />.
            </param>
            <returns>
            Non-zero if the specified function was found; zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)">
            <summary>
            <para>
            This method provides notification that the virtual table
            implementation that the virtual table will be given a new name. If
            this method returns SQLITE_OK then SQLite renames the table. If
            this method returns an error code then the renaming is prevented.
            </para>
            <para>
            The xRename method is required for every virtual table
            implementation.
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="zNew">
            The native pointer to the UTF-8 encoded string containing the new
            name for the virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)">
            <summary>
            <para>
            These methods provide the virtual table implementation an
            opportunity to implement nested transactions. They are always
            optional and will only be called in SQLite version 3.7.7 and later.
            </para>
            <para>
            When xSavepoint(X,N) is invoked, that is a signal to the virtual
            table X that it should save its current state as savepoint N. A
            subsequent call to xRollbackTo(X,R) means that the state of the
            virtual table should return to what it was when xSavepoint(X,R) was
            last called. The call to xRollbackTo(X,R) will invalidate all
            savepoints with N>R; none of the invalided savepoints will be
            rolled back or released without first being reinitialized by a call
            to xSavepoint(). A call to xRelease(X,M) invalidates all savepoints
            where N>=M.
            </para>
            <para>
            None of the xSavepoint(), xRelease(), or xRollbackTo() methods will
            ever be called except in between calls to xBegin() and either
            xCommit() or xRollback().
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="iSavepoint">
            This is an integer identifier under which the the current state of
            the virtual table should be saved.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)">
            <summary>
            <para>
            These methods provide the virtual table implementation an
            opportunity to implement nested transactions. They are always
            optional and will only be called in SQLite version 3.7.7 and later.
            </para>
            <para>
            When xSavepoint(X,N) is invoked, that is a signal to the virtual
            table X that it should save its current state as savepoint N. A
            subsequent call to xRollbackTo(X,R) means that the state of the
            virtual table should return to what it was when xSavepoint(X,R) was
            last called. The call to xRollbackTo(X,R) will invalidate all
            savepoints with N>R; none of the invalided savepoints will be
            rolled back or released without first being reinitialized by a call
            to xSavepoint(). A call to xRelease(X,M) invalidates all savepoints
            where N>=M.
            </para>
            <para>
            None of the xSavepoint(), xRelease(), or xRollbackTo() methods will
            ever be called except in between calls to xBegin() and either
            xCommit() or xRollback().
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="iSavepoint">
            This is an integer used to indicate that any saved states with an
            identifier greater than or equal to this should be deleted by the
            virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)">
            <summary>
            <para>
            These methods provide the virtual table implementation an
            opportunity to implement nested transactions. They are always
            optional and will only be called in SQLite version 3.7.7 and later.
            </para>
            <para>
            When xSavepoint(X,N) is invoked, that is a signal to the virtual
            table X that it should save its current state as savepoint N. A
            subsequent call to xRollbackTo(X,R) means that the state of the
            virtual table should return to what it was when xSavepoint(X,R) was
            last called. The call to xRollbackTo(X,R) will invalidate all
            savepoints with N>R; none of the invalided savepoints will be
            rolled back or released without first being reinitialized by a call
            to xSavepoint(). A call to xRelease(X,M) invalidates all savepoints
            where N>=M.
            </para>
            <para>
            None of the xSavepoint(), xRelease(), or xRollbackTo() methods will
            ever be called except in between calls to xBegin() and either
            xCommit() or xRollback().
            </para>
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="iSavepoint">
            This is an integer identifier used to specify a specific saved
            state for the virtual table for it to restore itself back to, which
            should also have the effect of deleting all saved states with an
            integer identifier greater than this one.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="T:System.Data.SQLite.ISQLiteManagedModule">
            <summary>
            This interface represents a virtual table implementation written in
            managed code.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="connection">
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance associated with
            the virtual table.
            </param>
            <param name="pClientData">
            The native user-data pointer associated with this module, as it was
            provided to the SQLite core library when the native module instance
            was created.
            </param>
            <param name="arguments">
            The module name, database name, virtual table name, and all other
            arguments passed to the CREATE VIRTUAL TABLE statement.
            </param>
            <param name="table">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated with
            the virtual table.
            </param>
            <param name="error">
            Upon failure, this parameter must be modified to contain an error
            message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="connection">
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance associated with
            the virtual table.
            </param>
            <param name="pClientData">
            The native user-data pointer associated with this module, as it was
            provided to the SQLite core library when the native module instance
            was created.
            </param>
            <param name="arguments">
            The module name, database name, virtual table name, and all other
            arguments passed to the CREATE VIRTUAL TABLE statement.
            </param>
            <param name="table">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated with
            the virtual table.
            </param>
            <param name="error">
            Upon failure, this parameter must be modified to contain an error
            message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="index">
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance containing all the
            data for the inputs and outputs relating to index selection.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="cursor">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance associated
            with the newly opened virtual table cursor.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="indexNumber">
            Number used to help identify the selected index.
            </param>
            <param name="indexString">
            String used to help identify the selected index.
            </param>
            <param name="values">
            The values corresponding to each column in the selected index.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <returns>
            Non-zero if no more rows are available; zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="context">
            The <see cref="T:System.Data.SQLite.SQLiteContext"/> object instance to be used for
            returning the specified column value to the SQLite core library.
            </param>
            <param name="index">
            The zero-based index corresponding to the column containing the
            value to be returned.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="rowId">
            Upon success, this parameter must be modified to contain the unique
            integer row identifier for the current row for the specified cursor.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="values">
            The array of <see cref="T:System.Data.SQLite.SQLiteValue"/> object instances containing
            the new or modified column values, if any.
            </param>
            <param name="rowId">
            Upon success, this parameter must be modified to contain the unique
            integer row identifier for the row that was inserted, if any.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Begin(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Sync(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Commit(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Rollback(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="argumentCount">
            The number of arguments to the function being sought.
            </param>
            <param name="name">
            The name of the function being sought.
            </param>
            <param name="function">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance responsible for
            implementing the specified function.
            </param>
            <param name="pClientData">
            Upon success, this parameter must be modified to contain the
            native user-data pointer associated with
            <paramref name="function"/>.
            </param>
            <returns>
            Non-zero if the specified function was found; zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="newName">
            The new name for the virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Savepoint(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="savepoint">
            This is an integer identifier under which the the current state of
            the virtual table should be saved.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.Release(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="savepoint">
            This is an integer used to indicate that any saved states with an
            identifier greater than or equal to this should be deleted by the
            virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.ISQLiteManagedModule.RollbackTo(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="savepoint">
            This is an integer identifier used to specify a specific saved
            state for the virtual table for it to restore itself back to, which
            should also have the effect of deleting all saved states with an
            integer identifier greater than this one.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="P:System.Data.SQLite.ISQLiteManagedModule.Declared">
            <summary>
            Returns non-zero if the schema for the virtual table has been
            declared.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.ISQLiteManagedModule.Name">
            <summary>
            Returns the name of the module as it was registered with the SQLite
            core library.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteMemory">
            <summary>
            This class contains static methods that are used to allocate,
            manipulate, and free native memory provided by the SQLite core library.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMemory.Allocate(System.Int32)">
            <summary>
            Allocates at least the specified number of bytes of native memory
            via the SQLite core library sqlite3_malloc() function and returns
            the resulting native pointer.
            </summary>
            <param name="size">
            The number of bytes to allocate.
            </param>
            <returns>
            The native pointer that points to a block of memory of at least the
            specified size -OR- <see cref="F:System.IntPtr.Zero"/> if the memory could
            not be allocated.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMemory.Size(System.IntPtr)">
            <summary>
            Gets and returns the actual size of the specified memory block that
            was previously obtained from the <see cref="M:System.Data.SQLite.SQLiteMemory.Allocate(System.Int32)"/> method.
            </summary>
            <param name="pMemory">
            The native pointer to the memory block previously obtained from the
            <see cref="M:System.Data.SQLite.SQLiteMemory.Allocate(System.Int32)"/> method.
            </param>
            <returns>
            The actual size, in bytes, of the memory block specified via the
            native pointer.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMemory.Free(System.IntPtr)">
            <summary>
            Frees a memory block previously obtained from the
            <see cref="M:System.Data.SQLite.SQLiteMemory.Allocate(System.Int32)"/> method.
            </summary>
            <param name="pMemory">
            The native pointer to the memory block previously obtained from the
            <see cref="M:System.Data.SQLite.SQLiteMemory.Allocate(System.Int32)"/> method.
            </param>
        </member>
        <member name="T:System.Data.SQLite.SQLiteString">
            <summary>
            This class contains static methods that are used to deal with native
            UTF-8 string pointers to be used with the SQLite core library.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteString.ThirtyBits">
            <summary>
            This is the maximum possible length for the native UTF-8 encoded
            strings used with the SQLite core library.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteString.Utf8Encoding">
            <summary>
            This is the <see cref="T:System.Text.Encoding"/> object instance used to handle
            conversions from/to UTF-8.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.GetUtf8BytesFromString(System.String)">
            <summary>
            Converts the specified managed string into the UTF-8 encoding and
            returns the array of bytes containing its representation in that
            encoding.
            </summary>
            <param name="value">
            The managed string to convert.
            </param>
            <returns>
            The array of bytes containing the representation of the managed
            string in the UTF-8 encoding or null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.GetStringFromUtf8Bytes(System.Byte[])">
            <summary>
            Converts the specified array of bytes representing a string in the
            UTF-8 encoding and returns a managed string.
            </summary>
            <param name="bytes">
            The array of bytes to convert.
            </param>
            <returns>
            The managed string or null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.ProbeForUtf8ByteLength(System.IntPtr,System.Int32)">
            <summary>
            Probes a native pointer to a string in the UTF-8 encoding for its
            terminating NUL character, within the specified length limit.
            </summary>
            <param name="pValue">
            The native NUL-terminated string pointer.
            </param>
            <param name="limit">
            The maximum length of the native string, in bytes.
            </param>
            <returns>
            The length of the native string, in bytes -OR- zero if the length
            could not be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.StringFromUtf8IntPtr(System.IntPtr)">
            <summary>
            Converts the specified native NUL-terminated UTF-8 string pointer
            into a managed string.
            </summary>
            <param name="pValue">
            The native NUL-terminated UTF-8 string pointer.
            </param>
            <returns>
            The managed string or null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.StringFromUtf8IntPtr(System.IntPtr,System.Int32)">
            <summary>
            Converts the specified native UTF-8 string pointer of the specified
            length into a managed string.
            </summary>
            <param name="pValue">
            The native UTF-8 string pointer.
            </param>
            <param name="length">
            The length of the native string, in bytes.
            </param>
            <returns>
            The managed string or null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.Utf8IntPtrFromString(System.String)">
            <summary>
            Converts the specified managed string into a native NUL-terminated
            UTF-8 string pointer using memory obtained from the SQLite core
            library.
            </summary>
            <param name="value">
            The managed string to convert.
            </param>
            <returns>
            The native NUL-terminated UTF-8 string pointer or
            <see cref="F:System.IntPtr.Zero"/> upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.StringArrayFromUtf8SizeAndIntPtr(System.Int32,System.IntPtr)">
            <summary>
            Converts a logical array of native NUL-terminated UTF-8 string
            pointers into an array of managed strings.
            </summary>
            <param name="argc">
            The number of elements in the logical array of native
            NUL-terminated UTF-8 string pointers.
            </param>
            <param name="argv">
            The native pointer to the logical array of native NUL-terminated
            UTF-8 string pointers to convert.
            </param>
            <returns>
            The array of managed strings or null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteString.Utf8IntPtrArrayFromStringArray(System.String[])">
            <summary>
            Converts an array of managed strings into an array of native
            NUL-terminated UTF-8 string pointers.
            </summary>
            <param name="values">
            The array of managed strings to convert.
            </param>
            <returns>
            The array of native NUL-terminated UTF-8 string pointers or null
            upon failure.
            </returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteBytes">
            <summary>
            This class contains static methods that are used to deal with native
            pointers to memory blocks that logically contain arrays of bytes to be
            used with the SQLite core library.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBytes.FromIntPtr(System.IntPtr,System.Int32)">
            <summary>
            Converts a native pointer to a logical array of bytes of the
            specified length into a managed byte array.
            </summary>
            <param name="pValue">
            The native pointer to the logical array of bytes to convert.
            </param>
            <param name="length">
            The length, in bytes, of the logical array of bytes to convert.
            </param>
            <returns>
            The managed byte array or null upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteBytes.ToIntPtr(System.Byte[])">
            <summary>
            Converts a managed byte array into a native pointer to a logical
            array of bytes.
            </summary>
            <param name="value">
            The managed byte array to convert.
            </param>
            <returns>
            The native pointer to a logical byte array or null upon failure.
            </returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteMarshal">
            <summary>
            This class contains static methods that are used to perform several
            low-level data marshalling tasks between native and managed code.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.IntPtrForOffset(System.IntPtr,System.Int32)">
            <summary>
            Returns a new <see cref="T:System.IntPtr"/> object instance based on the
            specified <see cref="T:System.IntPtr"/> object instance and an integer
            offset.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location that the new
            <see cref="T:System.IntPtr"/> object instance should point to.
            </param>
            <returns>
            The new <see cref="T:System.IntPtr"/> object instance.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.RoundUp(System.Int32,System.Int32)">
            <summary>
            Rounds up an integer size to the next multiple of the alignment.
            </summary>
            <param name="size">
            The size, in bytes, to be rounded up.
            </param>
            <param name="alignment">
            The required alignment for the return value.
            </param>
            <returns>
            The size, in bytes, rounded up to the next multiple of the
            alignment.  This value may end up being the same as the original
            size.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.NextOffsetOf(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the offset, in bytes, of the next structure member.
            </summary>
            <param name="offset">
            The offset, in bytes, of the current structure member.
            </param>
            <param name="size">
            The size, in bytes, of the current structure member.
            </param>
            <param name="alignment">
            The alignment, in bytes, of the next structure member.
            </param>
            <returns>
            The offset, in bytes, of the next structure member.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.ReadInt32(System.IntPtr,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Int32"/> value from the specified memory
            location.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location where the
            <see cref="T:System.Int32"/> value to be read is located.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> value at the specified memory location.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.ReadDouble(System.IntPtr,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Double"/> value from the specified memory
            location.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location where the
            <see cref="T:System.Double"/> to be read is located.
            </param>
            <returns>
            The <see cref="T:System.Double"/> value at the specified memory location.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            Reads an <see cref="T:System.IntPtr"/> value from the specified memory
            location.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location where the
            <see cref="T:System.IntPtr"/> value to be read is located.
            </param>
            <returns>
            The <see cref="T:System.IntPtr"/> value at the specified memory location.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Writes an <see cref="T:System.Int32"/> value to the specified memory
            location.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location where the
            <see cref="T:System.Int32"/> value to be written is located.
            </param>
            <param name="value">
            The <see cref="T:System.Int32"/> value to write.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Writes an <see cref="T:System.Int64"/> value to the specified memory
            location.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location where the
            <see cref="T:System.Int64"/> value to be written is located.
            </param>
            <param name="value">
            The <see cref="T:System.Int64"/> value to write.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.WriteDouble(System.IntPtr,System.Int32,System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value to the specified memory
            location.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location where the
            <see cref="T:System.Double"/> value to be written is located.
            </param>
            <param name="value">
            The <see cref="T:System.Double"/> value to write.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Writes a <see cref="T:System.IntPtr"/> value to the specified memory
            location.
            </summary>
            <param name="pointer">
            The <see cref="T:System.IntPtr"/> object instance representing the base
            memory location.
            </param>
            <param name="offset">
            The integer offset from the base memory location where the
            <see cref="T:System.IntPtr"/> value to be written is located.
            </param>
            <param name="value">
            The <see cref="T:System.IntPtr"/> value to write.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteMarshal.GetHashCode(System.Object,System.Boolean)">
            <summary>
            Generates a hash code value for the object.
            </summary>
            <param name="value">
            The object instance used to calculate the hash code.
            </param>
            <param name="identity">
            Non-zero if different object instances with the same value should
            generate different hash codes, where applicable.  This parameter
            has no effect on the .NET Compact Framework.
            </param>
            <returns>
            The hash code value -OR- zero if the object is null.
            </returns>
        </member>
        <member name="T:System.Data.SQLite.SQLiteModule">
            <summary>
            This class represents a managed virtual table module implementation.
            It is not sealed and must be used as the base class for any
            user-defined virtual table module classes implemented in managed code.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.DefaultModuleVersion">
            <summary>
            The default version of the native sqlite3_module structure in use.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.nativeModule">
            <summary>
            This field is used to store the native sqlite3_module structure
            associated with this object instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.destroyModule">
            <summary>
            This field is used to store the destructor delegate to be passed to
            the SQLite core library via the sqlite3_create_disposable_module()
            function.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.disposableModule">
            <summary>
            This field is used to store a pointer to the native sqlite3_module
            structure returned by the sqlite3_create_disposable_module
            function.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.tables">
            <summary>
            This field is used to store the virtual table instances associated
            with this module.  The native pointer to the sqlite3_vtab derived
            structure is used to key into this collection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.cursors">
            <summary>
            This field is used to store the virtual table cursor instances
            associated with this module.  The native pointer to the
            sqlite3_vtab_cursor derived structure is used to key into this
            collection.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.functions">
            <summary>
            This field is used to store the virtual table function instances
            associated with this module.  The case-insensitive function name
            and the number of arguments (with -1 meaning "any") are used to
            construct the string that is used to key into this collection.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.#ctor(System.String)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="name">
            The name of the module.  This parameter cannot be null.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.CreateDisposableModule(System.IntPtr)">
            <summary>
            Calls the native SQLite core library in order to create a new
            disposable module containing the implementation of a virtual table.
            </summary>
            <param name="pDb">
            The native database connection pointer to use.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xDestroyModule(System.IntPtr)">
            <summary>
            This method is called by the SQLite core library when the native
            module associated with this object instance is being destroyed due
            to its parent connection being closed.  It may also be called by
            the "vtshim" module if/when the sqlite3_dispose_module() function
            is called.
            </summary>
            <param name="pClientData">
            The native user-data pointer associated with this module, as it was
            provided to the SQLite core library when the native module instance
            was created.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.AllocateNativeModule">
            <summary>
            Creates and returns the native sqlite_module structure using the
            configured (or default) <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/>
            interface implementation.
            </summary>
            <returns>
            The native sqlite_module structure using the configured (or
            default) <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface
            implementation.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.AllocateNativeModule(System.Data.SQLite.ISQLiteNativeModule)">
            <summary>
            Creates and returns the native sqlite_module structure using the
            specified <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface
            implementation.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface implementation to
            use.
            </param>
            <returns>
            The native sqlite_module structure using the specified
            <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface implementation.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.CopyNativeModule(System.Data.SQLite.UnsafeNativeMethods.sqlite3_module)">
            <summary>
            Creates a copy of the specified
            <see cref="T:System.Data.SQLite.UnsafeNativeMethods.sqlite3_module"/> object instance,
            using default implementations for the contained delegates when
            necessary.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.UnsafeNativeMethods.sqlite3_module"/> object
            instance to copy.
            </param>
            <returns>
            The new <see cref="T:System.Data.SQLite.UnsafeNativeMethods.sqlite3_module"/> object
            instance.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.CreateOrConnect(System.Boolean,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            Calls one of the virtual table initialization methods.
            </summary>
            <param name="create">
            Non-zero to call the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/>
            method; otherwise, the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/>
            method will be called.
            </param>
            <param name="pDb">
            The native database connection handle.
            </param>
            <param name="pAux">
            The original native pointer value that was provided to the
            sqlite3_create_module(), sqlite3_create_module_v2() or
            sqlite3_create_disposable_module() functions.
            </param>
            <param name="argc">
            The number of arguments from the CREATE VIRTUAL TABLE statement.
            </param>
            <param name="argv">
            The array of string arguments from the CREATE VIRTUAL TABLE
            statement.
            </param>
            <param name="pVtab">
            Upon success, this parameter must be modified to point to the newly
            created native sqlite3_vtab derived structure.
            </param>
            <param name="pError">
            Upon failure, this parameter must be modified to point to the error
            message, with the underlying memory having been obtained from the
            sqlite3_malloc() function.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.DestroyOrDisconnect(System.Boolean,System.IntPtr)">
            <summary>
            Calls one of the virtual table finalization methods.
            </summary>
            <param name="destroy">
            Non-zero to call the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)"/>
            method; otherwise, the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)"/> method will be
            called.
            </param>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetTableError(System.Data.SQLite.SQLiteModule,System.IntPtr,System.Boolean,System.Boolean,System.String)">
            <summary>
            Arranges for the specified error message to be placed into the
            zErrMsg field of a sqlite3_vtab derived structure, freeing the
            existing error message, if any.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance to be used.
            </param>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="logErrors">
            Non-zero if this error message should also be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="logExceptions">
            Non-zero if caught exceptions should be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="error">
            The error message.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetTableError(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteVirtualTable,System.Boolean,System.Boolean,System.String)">
            <summary>
            Arranges for the specified error message to be placed into the
            zErrMsg field of a sqlite3_vtab derived structure, freeing the
            existing error message, if any.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance to be used.
            </param>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance used to
            lookup the native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="logErrors">
            Non-zero if this error message should also be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="logExceptions">
            Non-zero if caught exceptions should be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="error">
            The error message.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetCursorError(System.Data.SQLite.SQLiteModule,System.IntPtr,System.Boolean,System.Boolean,System.String)">
            <summary>
            Arranges for the specified error message to be placed into the
            zErrMsg field of a sqlite3_vtab derived structure, freeing the
            existing error message, if any.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance to be used.
            </param>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure
            used to get the native pointer to the sqlite3_vtab derived
            structure.
            </param>
            <param name="logErrors">
            Non-zero if this error message should also be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="logExceptions">
            Non-zero if caught exceptions should be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="error">
            The error message.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetCursorError(System.Data.SQLite.SQLiteModule,System.Data.SQLite.SQLiteVirtualTableCursor,System.Boolean,System.Boolean,System.String)">
            <summary>
            Arranges for the specified error message to be placed into the
            zErrMsg field of a sqlite3_vtab derived structure, freeing the
            existing error message, if any.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance to be used.
            </param>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance used to
            lookup the native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="logErrors">
            Non-zero if this error message should also be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="logExceptions">
            Non-zero if caught exceptions should be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </param>
            <param name="error">
            The error message.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.GetNativeModuleImpl">
            <summary>
            Gets and returns the <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface
            implementation to be used when creating the native sqlite3_module
            structure.  Derived classes may override this method to supply an
            alternate implementation for the <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/>
            interface.
            </summary>
            <returns>
            The <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface implementation to
            be used when populating the native sqlite3_module structure.  If
            the returned value is null, the private methods provided by the
            <see cref="T:System.Data.SQLite.SQLiteModule"/> class and relating to the
            <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface  will be used to
            create the necessary delegates.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.CreateNativeModuleImpl">
            <summary>
            Creates and returns the <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/>
            interface implementation corresponding to the current
            <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance.
            </summary>
            <returns>
            The <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> interface implementation
            corresponding to the current <see cref="T:System.Data.SQLite.SQLiteModule"/> object
            instance.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.AllocateTable">
            <summary>
            Allocates a native sqlite3_vtab derived structure and returns a
            native pointer to it.
            </summary>
            <returns>
            A native pointer to a native sqlite3_vtab derived structure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.ZeroTable(System.IntPtr)">
            <summary>
            Zeros out the fields of a native sqlite3_vtab derived structure.
            </summary>
            <param name="pVtab">
            The native pointer to the native sqlite3_vtab derived structure to
            zero.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.FreeTable(System.IntPtr)">
            <summary>
            Frees a native sqlite3_vtab structure using the provided native
            pointer to it.
            </summary>
            <param name="pVtab">
            A native pointer to a native sqlite3_vtab derived structure.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.AllocateCursor">
            <summary>
            Allocates a native sqlite3_vtab_cursor derived structure and
            returns a native pointer to it.
            </summary>
            <returns>
            A native pointer to a native sqlite3_vtab_cursor derived structure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.FreeCursor(System.IntPtr)">
            <summary>
            Frees a native sqlite3_vtab_cursor structure using the provided
            native pointer to it.
            </summary>
            <param name="pCursor">
            A native pointer to a native sqlite3_vtab_cursor derived structure.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.TableFromCursor(System.Data.SQLite.SQLiteModule,System.IntPtr)">
            <summary>
            Reads and returns the native pointer to the sqlite3_vtab derived
            structure based on the native pointer to the sqlite3_vtab_cursor
            derived structure.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance to be used.
            </param>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure
            from which to read the native pointer to the sqlite3_vtab derived
            structure.
            </param>
            <returns>
            The native pointer to the sqlite3_vtab derived structure -OR-
            <see cref="F:System.IntPtr.Zero"/> if it cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.TableFromCursor(System.IntPtr)">
            <summary>
            Reads and returns the native pointer to the sqlite3_vtab derived
            structure based on the native pointer to the sqlite3_vtab_cursor
            derived structure.
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure
            from which to read the native pointer to the sqlite3_vtab derived
            structure.
            </param>
            <returns>
            The native pointer to the sqlite3_vtab derived structure -OR-
            <see cref="F:System.IntPtr.Zero"/> if it cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.TableFromIntPtr(System.IntPtr)">
            <summary>
            Looks up and returns the <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object
            instance based on the native pointer to the sqlite3_vtab derived
            structure.
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance or null if
            the corresponding one cannot be found.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.TableToIntPtr(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            Allocates and returns a native pointer to a sqlite3_vtab derived
            structure and creates an association between it and the specified
            <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance to be used
            when creating the association.
            </param>
            <returns>
            The native pointer to a sqlite3_vtab derived structure or
            <see cref="F:System.IntPtr.Zero"/> if the method fails for any reason.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.CursorFromIntPtr(System.IntPtr,System.IntPtr)">
            <summary>
            Looks up and returns the <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/>
            object instance based on the native pointer to the
            sqlite3_vtab_cursor derived structure.
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived structure.
            </param>
            <returns>
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance or null
            if the corresponding one cannot be found.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.CursorToIntPtr(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            Allocates and returns a native pointer to a sqlite3_vtab_cursor
            derived structure and creates an association between it and the
            specified <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance to be
            used when creating the association.
            </param>
            <returns>
            The native pointer to a sqlite3_vtab_cursor derived structure or
            <see cref="F:System.IntPtr.Zero"/> if the method fails for any reason.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.GetFunctionKey(System.Int32,System.String,System.Data.SQLite.SQLiteFunction)">
            <summary>
            Deterimines the key that should be used to identify and store the
            <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance for the virtual table
            (i.e. to be returned via the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method).
            </summary>
            <param name="argumentCount">
            The number of arguments to the virtual table function.
            </param>
            <param name="name">
            The name of the virtual table function.
            </param>
            <param name="function">
            The <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance associated with
            this virtual table function.
            </param>
            <returns>
            The string that should be used to identify and store the virtual
            table function instance.  This method cannot return null.  If null
            is returned from this method, the behavior is undefined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.DeclareTable(System.Data.SQLite.SQLiteConnection,System.String,System.String@)">
            <summary>
            Attempts to declare the schema for the virtual table using the
            specified database connection.
            </summary>
            <param name="connection">
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance to use when
            declaring the schema of the virtual table.  This parameter may not
            be null.
            </param>
            <param name="sql">
            The string containing the CREATE TABLE statement that completely
            describes the schema for the virtual table.  This parameter may not
            be null.
            </param>
            <param name="error">
            Upon failure, this parameter must be modified to contain an error
            message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.DeclareFunction(System.Data.SQLite.SQLiteConnection,System.Int32,System.String,System.String@)">
            <summary>
            Calls the native SQLite core library in order to declare a virtual
            table function in response to a call into the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/>
            or <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> virtual table
            methods.
            </summary>
            <param name="connection">
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance to use when
            declaring the schema of the virtual table.
            </param>
            <param name="argumentCount">
            The number of arguments to the function being declared.
            </param>
            <param name="name">
            The name of the function being declared.
            </param>
            <param name="error">
            Upon success, the contents of this parameter are undefined.  Upon
            failure, it should contain an appropriate error message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetTableError(System.IntPtr,System.String)">
            <summary>
            Arranges for the specified error message to be placed into the
            zErrMsg field of a sqlite3_vtab derived structure, freeing the
            existing error message, if any.
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="error">
            The error message.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetTableError(System.Data.SQLite.SQLiteVirtualTable,System.String)">
            <summary>
            Arranges for the specified error message to be placed into the
            zErrMsg field of a sqlite3_vtab derived structure, freeing the
            existing error message, if any.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance used to
            lookup the native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="error">
            The error message.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetCursorError(System.Data.SQLite.SQLiteVirtualTableCursor,System.String)">
            <summary>
            Arranges for the specified error message to be placed into the
            zErrMsg field of a sqlite3_vtab derived structure, freeing the
            existing error message, if any.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance used to
            lookup the native pointer to the sqlite3_vtab derived structure.
            </param>
            <param name="error">
            The error message.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetEstimatedCost(System.Data.SQLite.SQLiteIndex,System.Nullable{System.Double})">
            <summary>
            Modifies the specified <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance
            to contain the specified estimated cost.
            </summary>
            <param name="index">
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance to modify.
            </param>
            <param name="estimatedCost">
            The estimated cost value to use.  Using a null value means that the
            default value provided by the SQLite core library should be used.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetEstimatedCost(System.Data.SQLite.SQLiteIndex)">
            <summary>
            Modifies the specified <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance
            to contain the default estimated cost.
            </summary>
            <param name="index">
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance to modify.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetEstimatedRows(System.Data.SQLite.SQLiteIndex,System.Nullable{System.Int64})">
            <summary>
            Modifies the specified <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance
            to contain the specified estimated rows.
            </summary>
            <param name="index">
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance to modify.
            </param>
            <param name="estimatedRows">
            The estimated rows value to use.  Using a null value means that the
            default value provided by the SQLite core library should be used.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SetEstimatedRows(System.Data.SQLite.SQLiteIndex)">
            <summary>
            Modifies the specified <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance
            to contain the default estimated rows.
            </summary>
            <param name="index">
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance to modify.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="pDb">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pAux">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pError">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="pDb">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pAux">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pError">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xBestIndex(System.IntPtr,System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <param name="pIndex">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xDisconnect(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xDestroy(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xOpen(System.IntPtr,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </param>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xClose(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="idxNum">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="idxStr">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xNext(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xEof(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="pContext">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="index">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xRowId(System.IntPtr,System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xBegin(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xSync(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xCommit(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xRollback(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="nArg">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="zName">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="callback">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="pClientData">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xRename(System.IntPtr,System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <param name="zNew">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xSavepoint(System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="iSavepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xRelease(System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="iSavepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.xRollbackTo(System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="iSavepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="connection">
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance associated with
            the virtual table.
            </param>
            <param name="pClientData">
            The native user-data pointer associated with this module, as it was
            provided to the SQLite core library when the native module instance
            was created.
            </param>
            <param name="arguments">
            The module name, database name, virtual table name, and all other
            arguments passed to the CREATE VIRTUAL TABLE statement.
            </param>
            <param name="table">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated with
            the virtual table.
            </param>
            <param name="error">
            Upon failure, this parameter must be modified to contain an error
            message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="connection">
            The <see cref="T:System.Data.SQLite.SQLiteConnection"/> object instance associated with
            the virtual table.
            </param>
            <param name="pClientData">
            The native user-data pointer associated with this module, as it was
            provided to the SQLite core library when the native module instance
            was created.
            </param>
            <param name="arguments">
            The module name, database name, virtual table name, and all other
            arguments passed to the CREATE VIRTUAL TABLE statement.
            </param>
            <param name="table">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated with
            the virtual table.
            </param>
            <param name="error">
            Upon failure, this parameter must be modified to contain an error
            message.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="index">
            The <see cref="T:System.Data.SQLite.SQLiteIndex"/> object instance containing all the
            data for the inputs and outputs relating to index selection.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="cursor">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance associated
            with the newly opened virtual table cursor.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="indexNumber">
            Number used to help identify the selected index.
            </param>
            <param name="indexString">
            String used to help identify the selected index.
            </param>
            <param name="values">
            The values corresponding to each column in the selected index.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <returns>
            Non-zero if no more rows are available; zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="context">
            The <see cref="T:System.Data.SQLite.SQLiteContext"/> object instance to be used for
            returning the specified column value to the SQLite core library.
            </param>
            <param name="index">
            The zero-based index corresponding to the column containing the
            value to be returned.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="rowId">
            Upon success, this parameter must be modified to contain the unique
            integer row identifier for the current row for the specified cursor.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="values">
            The array of <see cref="T:System.Data.SQLite.SQLiteValue"/> object instances containing
            the new or modified column values, if any.
            </param>
            <param name="rowId">
            Upon success, this parameter must be modified to contain the unique
            integer row identifier for the row that was inserted, if any.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Begin(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Sync(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Commit(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Rollback(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="argumentCount">
            The number of arguments to the function being sought.
            </param>
            <param name="name">
            The name of the function being sought.
            </param>
            <param name="function">
            Upon success, this parameter must be modified to contain the
            <see cref="T:System.Data.SQLite.SQLiteFunction"/> object instance responsible for
            implementing the specified function.
            </param>
            <param name="pClientData">
            Upon success, this parameter must be modified to contain the
            native user-data pointer associated with
            <paramref name="function"/>.
            </param>
            <returns>
            Non-zero if the specified function was found; zero otherwise.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="newName">
            The new name for the virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Savepoint(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="savepoint">
            This is an integer identifier under which the the current state of
            the virtual table should be saved.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Release(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="savepoint">
            This is an integer used to indicate that any saved states with an
            identifier greater than or equal to this should be deleted by the
            virtual table.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.RollbackTo(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            This method is called in response to the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this virtual table.
            </param>
            <param name="savepoint">
            This is an integer identifier used to specify a specific saved
            state for the virtual table for it to restore itself back to, which
            should also have the effect of deleting all saved states with an
            integer identifier greater than this one.
            </param>
            <returns>
            A standard SQLite return code.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Dispose">
            <summary>
            Disposes of this object instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.Data.SQLite.SQLiteModule.Dispose"/> method.  Zero if this method is being
            called from the finalizer.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.Finalize">
            <summary>
            Finalizes this object instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteModule.LogErrorsNoThrow">
            <summary>
            Returns or sets a boolean value indicating whether virtual table
            errors should be logged using the <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteModule.LogExceptionsNoThrow">
            <summary>
            Returns or sets a boolean value indicating whether exceptions
            caught in the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method,
            the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method,
            the <see cref="M:System.Data.SQLite.SQLiteModule.SetTableError(System.IntPtr,System.String)"/> method,
            the <see cref="M:System.Data.SQLite.SQLiteModule.SetTableError(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method,
            and the <see cref="M:System.Data.SQLite.SQLiteModule.Dispose"/> method should be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteModule.LogErrors">
            <summary>
            Returns or sets a boolean value indicating whether virtual table
            errors should be logged using the <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteModule.LogExceptions">
            <summary>
            Returns or sets a boolean value indicating whether exceptions
            caught in the
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method,
            <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method, and the
            <see cref="M:System.Data.SQLite.SQLiteModule.Dispose"/> method should be logged using the
            <see cref="T:System.Data.SQLite.SQLiteLog"/> class.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteModule.Declared">
            <summary>
            Returns non-zero if the schema for the virtual table has been
            declared.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteModule.Name">
            <summary>
            Returns the name of the module as it was registered with the SQLite
            core library.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteModule.SQLiteNativeModule">
            <summary>
            This class implements the <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/>
            interface by forwarding those method calls to the
            <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance it contains.  If the
            contained <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance is null, all
            the <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/> methods simply generate an
            error.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.DefaultLogErrors">
            <summary>
            This is the value that is always used for the "logErrors"
            parameter to the various static error handling methods provided
            by the <see cref="T:System.Data.SQLite.SQLiteModule"/> class.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.DefaultLogExceptions">
            <summary>
            This is the value that is always used for the "logExceptions"
            parameter to the various static error handling methods provided
            by the <see cref="T:System.Data.SQLite.SQLiteModule"/> class.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.ModuleNotAvailableErrorMessage">
            <summary>
            This is the error message text used when the contained
            <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance is not available
            for any reason.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.module">
            <summary>
            The <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance used to provide
            an implementation of the <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/>
            interface.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.#ctor(System.Data.SQLite.SQLiteModule)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="module">
            The <see cref="T:System.Data.SQLite.SQLiteModule"/> object instance used to provide
            an implementation of the <see cref="T:System.Data.SQLite.ISQLiteNativeModule"/>
            interface.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.ModuleNotAvailableTableError(System.IntPtr)">
            <summary>
            Sets the table error message to one that indicates the native
            module implementation is not available.
            </summary>
            <param name="pVtab">
            The native pointer to the sqlite3_vtab derived structure.
            </param>
            <returns>
            The value of <see cref="F:System.Data.SQLite.SQLiteErrorCode.Error"/>.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.ModuleNotAvailableCursorError(System.IntPtr)">
            <summary>
            Sets the table error message to one that indicates the native
            module implementation is not available.
            </summary>
            <param name="pCursor">
            The native pointer to the sqlite3_vtab_cursor derived
            structure.
            </param>
            <returns>
            The value of <see cref="F:System.Data.SQLite.SQLiteErrorCode.Error"/>.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="pDb">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pAux">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pError">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCreate(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </summary>
            <param name="pDb">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pAux">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <param name="pError">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xConnect(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr@,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <param name="pIndex">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBestIndex(System.IntPtr,System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xDisconnect(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDisconnect(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xDestroy(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xDestroy(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </param>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xOpen(System.IntPtr,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xClose(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xClose(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="idxNum">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="idxStr">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFilter(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xNext(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xNext(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xEof(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xEof(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="pContext">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="index">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xColumn(System.IntPtr,System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="pCursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRowId(System.IntPtr,System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="argc">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="argv">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xUpdate(System.IntPtr,System.Int32,System.IntPtr,System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xBegin(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xBegin(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xSync(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSync(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xCommit(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xCommit(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xRollback(System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollback(System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="nArg">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="zName">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="callback">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <param name="pClientData">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xFindFunction(System.IntPtr,System.Int32,System.IntPtr,System.Data.SQLite.SQLiteCallback@,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <param name="zNew">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRename(System.IntPtr,System.IntPtr)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="iSavepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xSavepoint(System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xRelease(System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="iSavepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRelease(System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </summary>
            <param name="pVtab">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </param>
            <param name="iSavepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteNativeModule.xRollbackTo(System.IntPtr,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.Dispose">
            <summary>
            Disposes of this object instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.Dispose"/> method.  Zero if this method is being
            called from the finalizer.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModule.SQLiteNativeModule.Finalize">
            <summary>
            Finalizes this object instance.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator">
            <summary>
            This class represents a virtual table cursor to be used with the
            <see cref="T:System.Data.SQLite.SQLiteModuleEnumerable"/> class.  It is not sealed and may
            be used as the base class for any user-defined virtual table cursor
            class that wraps an <see cref="T:System.Collections.IEnumerator"/> object instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.enumerator">
            <summary>
            The <see cref="T:System.Collections.IEnumerator"/> instance provided when this cursor
            was created.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.endOfEnumerator">
            <summary>
            This value will be non-zero if false has been returned from the
            <see cref="M:System.Collections.IEnumerator.MoveNext"/> method.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.#ctor(System.Data.SQLite.SQLiteVirtualTable,System.Collections.IEnumerator)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this object instance.
            </param>
            <param name="enumerator">
            The <see cref="T:System.Collections.IEnumerator"/> instance to expose as a virtual
            table cursor.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.MoveNext">
            <summary>
            Advances to the next row of the virtual table cursor using the
            <see cref="M:System.Collections.IEnumerator.MoveNext"/> method of the
            <see cref="T:System.Collections.IEnumerator"/> object instance.
            </summary>
            <returns>
            Non-zero if the current row is valid; zero otherwise.  If zero is
            returned, no further rows are available.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.Reset">
            <summary>
            Resets the virtual table cursor position, also invalidating the
            current row, using the <see cref="M:System.Collections.IEnumerator.Reset"/> method of
            the <see cref="T:System.Collections.IEnumerator"/> object instance.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.Close">
            <summary>
            Closes the virtual table cursor.  This method must not throw any
            exceptions.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.CheckClosed">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the virtual
            table cursor has been closed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.IDisposable.Dispose"/> method.  Zero if this method is
            being called from the finalizer.
            </param>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.Current">
            <summary>
            Returns the value for the current row of the virtual table cursor
            using the <see cref="P:System.Collections.IEnumerator.Current"/> property of the
            <see cref="T:System.Collections.IEnumerator"/> object instance.
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.EndOfEnumerator">
            <summary>
            Returns non-zero if the end of the virtual table cursor has been
            seen (i.e. no more rows are available, including the current one).
            </summary>
        </member>
        <member name="P:System.Data.SQLite.SQLiteVirtualTableCursorEnumerator.IsOpen">
            <summary>
            Returns non-zero if the virtual table cursor is open.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteModuleEnumerable">
             <summary>
             This class implements a virtual table module that exposes an
             <see cref="T:System.Collections.IEnumerable"/> object instance as a read-only virtual
             table.  It is not sealed and may be used as the base class for any
             user-defined virtual table class that wraps an
             <see cref="T:System.Collections.IEnumerable"/> object instance.  The following short
             example shows it being used to treat an array of strings as a table
             data source:
             <code>
               public static class Sample
               {
                 public static void Main()
                 {
                   using (SQLiteConnection connection = new SQLiteConnection(
                       "Data Source=:memory:;"))
                   {
                     connection.Open();
            
                     connection.CreateModule(new SQLiteModuleEnumerable(
                       "sampleModule", new string[] { "one", "two", "three" }));
            
                     using (SQLiteCommand command = connection.CreateCommand())
                     {
                       command.CommandText =
                           "CREATE VIRTUAL TABLE t1 USING sampleModule;";
            
                       command.ExecuteNonQuery();
                     }
            
                     using (SQLiteCommand command = connection.CreateCommand())
                     {
                       command.CommandText = "SELECT * FROM t1;";
            
                       using (SQLiteDataReader dataReader = command.ExecuteReader())
                       {
                         while (dataReader.Read())
                           Console.WriteLine(dataReader[0].ToString());
                       }
                     }
            
                     connection.Close();
                   }
                 }
               }
             </code>
             </summary>
        </member>
        <member name="T:System.Data.SQLite.SQLiteModuleNoop">
            <summary>
            This class implements a virtual table module that does nothing by
            providing "empty" implementations for all of the
            <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/> interface methods.  The result
            codes returned by these "empty" method implementations may be
            controlled on a per-method basis by using and/or overriding the
            <see cref="M:System.Data.SQLite.SQLiteModuleNoop.GetDefaultResultCode"/>,
            <see cref="M:System.Data.SQLite.SQLiteModuleNoop.ResultCodeToEofResult(System.Data.SQLite.SQLiteErrorCode)"/>,
            <see cref="M:System.Data.SQLite.SQLiteModuleNoop.ResultCodeToFindFunctionResult(System.Data.SQLite.SQLiteErrorCode)"/>,
            <see cref="M:System.Data.SQLite.SQLiteModuleNoop.GetMethodResultCode(System.String)"/>, and
            <see cref="M:System.Data.SQLite.SQLiteModuleNoop.SetMethodResultCode(System.String,System.Data.SQLite.SQLiteErrorCode)"/> methods from within derived classes.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModuleNoop.resultCodes">
            <summary>
            This field is used to store the <see cref="T:System.Data.SQLite.SQLiteErrorCode"/>
            values to return, on a per-method basis, for all methods that are
            part of the <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/> interface.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.#ctor(System.String)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="name">
            The name of the module.  This parameter cannot be null.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.GetDefaultResultCode">
            <summary>
            Determines the default <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value to be
            returned by methods of the <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/>
            interface that lack an overridden implementation in all classes
            derived from the <see cref="T:System.Data.SQLite.SQLiteModuleNoop"/> class.
            </summary>
            <returns>
            The <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value that should be returned
            by all <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/> interface methods unless
            a more specific result code has been set for that interface method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.ResultCodeToEofResult(System.Data.SQLite.SQLiteErrorCode)">
            <summary>
            Converts a <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value into a boolean
            return value for use with the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </summary>
            <param name="resultCode">
            The <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value to convert.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.ResultCodeToFindFunctionResult(System.Data.SQLite.SQLiteErrorCode)">
            <summary>
            Converts a <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value into a boolean
            return value for use with the
            <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </summary>
            <param name="resultCode">
            The <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value to convert.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> value.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.GetMethodResultCode(System.String)">
            <summary>
            Determines the <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value that should be
            returned by the specified <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/>
            interface method if it lack an overridden implementation.  If no
            specific <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value is available (or set)
            for the specified method, the <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value
            returned by the <see cref="M:System.Data.SQLite.SQLiteModuleNoop.GetDefaultResultCode"/> method will be
            returned instead.
            </summary>
            <param name="methodName">
            The name of the method.  Currently, this method must be part of
            the <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/> interface.
            </param>
            <returns>
            The <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value that should be returned
            by the <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/> interface method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.SetMethodResultCode(System.String,System.Data.SQLite.SQLiteErrorCode)">
            <summary>
            Sets the <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value that should be
            returned by the specified <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/>
            interface method if it lack an overridden implementation.
            </summary>
            <param name="methodName">
            The name of the method.  Currently, this method must be part of
            the <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/> interface.
            </param>
            <param name="resultCode">
            The <see cref="T:System.Data.SQLite.SQLiteErrorCode"/> value that should be returned
            by the <see cref="T:System.Data.SQLite.ISQLiteManagedModule"/> interface method.
            </param>
            <returns>
            Non-zero upon success.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </summary>
            <param name="connection">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="pClientData">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="arguments">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="error">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </summary>
            <param name="connection">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="pClientData">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="arguments">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="error">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </param>
            <param name="index">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Disconnect(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Destroy(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </param>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Close(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <param name="indexNumber">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <param name="indexString">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <param name="values">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Next(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <param name="context">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <param name="index">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </param>
            <param name="values">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Begin(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Begin(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Begin(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Begin(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Sync(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Sync(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Sync(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Sync(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Commit(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Commit(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Commit(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Commit(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Rollback(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rollback(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rollback(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rollback(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </param>
            <param name="argumentCount">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </param>
            <param name="name">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </param>
            <param name="function">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </param>
            <param name="pClientData">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.FindFunction(System.Data.SQLite.SQLiteVirtualTable,System.Int32,System.String,System.Data.SQLite.SQLiteFunction@,System.IntPtr@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </param>
            <param name="newName">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Savepoint(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Savepoint(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Savepoint(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </param>
            <param name="savepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Savepoint(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Savepoint(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Release(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Release(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Release(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </param>
            <param name="savepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Release(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Release(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.RollbackTo(System.Data.SQLite.SQLiteVirtualTable,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RollbackTo(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RollbackTo(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </param>
            <param name="savepoint">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RollbackTo(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RollbackTo(System.Data.SQLite.SQLiteVirtualTable,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleNoop.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.IDisposable.Dispose"/> method.  Zero if this method is
            being called from the finalizer.
            </param>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModuleEnumerable.declareSql">
            <summary>
            The CREATE TABLE statement used to declare the schema for the
            virtual table.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModuleEnumerable.enumerable">
            <summary>
            The <see cref="T:System.Collections.IEnumerable"/> instance containing the backing data
            for the virtual table.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.SQLiteModuleEnumerable.objectIdentity">
            <summary>
            Non-zero if different object instances with the same value should
            generate different row identifiers, where applicable.  This has no
            effect on the .NET Compact Framework.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.#ctor(System.String,System.Collections.IEnumerable)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="name">
            The name of the module.  This parameter cannot be null.
            </param>
            <param name="enumerable">
            The <see cref="T:System.Collections.IEnumerable"/> instance to expose as a virtual
            table.  This parameter cannot be null.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.#ctor(System.String,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="name">
            The name of the module.  This parameter cannot be null.
            </param>
            <param name="enumerable">
            The <see cref="T:System.Collections.IEnumerable"/> instance to expose as a virtual
            table.  This parameter cannot be null.
            </param>
            <param name="objectIdentity">
            Non-zero if different object instances with the same value should
            generate different row identifiers, where applicable.  This
            parameter has no effect on the .NET Compact Framework.
            </param>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.GetSqlForDeclareTable">
            <summary>
            Determines the SQL statement used to declare the virtual table.
            This method should be overridden in derived classes if they require
            a custom virtual table schema.
            </summary>
            <returns>
            The SQL statement used to declare the virtual table -OR- null if it
            cannot be determined.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.CursorTypeMismatchError(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            Sets the table error message to one that indicates the virtual
            table cursor is of the wrong type.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance.
            </param>
            <returns>
            The value of <see cref="F:System.Data.SQLite.SQLiteErrorCode.Error"/>.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.CursorEndOfEnumeratorError(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            Sets the table error message to one that indicates the virtual
            table cursor has no current row.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance.
            </param>
            <returns>
            The value of <see cref="F:System.Data.SQLite.SQLiteErrorCode.Error"/>.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.GetStringFromObject(System.Data.SQLite.SQLiteVirtualTableCursor,System.Object)">
            <summary>
            Determines the string to return as the column value for the object
            instance value.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="value">
            The object instance to return a string representation for.
            </param>
            <returns>
            The string representation of the specified object instance or null
            upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.MakeRowId(System.Int32,System.Int32)">
            <summary>
            Constructs an <see cref="T:System.Int64"/> unique row identifier from two
            <see cref="T:System.Int32"/> values.  The first <see cref="T:System.Int32"/> value
            must contain the row sequence number for the current row and the
            second value must contain the hash code of the enumerator value
            for the current row.
            </summary>
            <param name="rowIndex">
            The integer row sequence number for the current row.
            </param>
            <param name="hashCode">
            The hash code of the enumerator value for the current row.
            </param>
            <returns>
            The unique row identifier or zero upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.GetRowIdFromObject(System.Data.SQLite.SQLiteVirtualTableCursor,System.Object)">
            <summary>
            Determines the unique row identifier for the current row.
            </summary>
            <param name="cursor">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTableCursor"/> object instance
            associated with the previously opened virtual table cursor to be
            used.
            </param>
            <param name="value">
            The object instance to return a unique row identifier for.
            </param>
            <returns>
            The unique row identifier or zero upon failure.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </summary>
            <param name="connection">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="pClientData">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="arguments">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="error">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Create(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </summary>
            <param name="connection">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="pClientData">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="arguments">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <param name="error">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Connect(System.Data.SQLite.SQLiteConnection,System.IntPtr,System.String[],System.Data.SQLite.SQLiteVirtualTable@,System.String@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </param>
            <param name="index">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.BestIndex(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteIndex)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Disconnect(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Disconnect(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Destroy(System.Data.SQLite.SQLiteVirtualTable)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Destroy(System.Data.SQLite.SQLiteVirtualTable)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </param>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Close(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Close(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <param name="indexNumber">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <param name="indexString">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <param name="values">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Filter(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int32,System.String,System.Data.SQLite.SQLiteValue[])"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Next(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Next(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Eof(System.Data.SQLite.SQLiteVirtualTableCursor)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <param name="context">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <param name="index">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.RowId(System.Data.SQLite.SQLiteVirtualTableCursor,System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </param>
            <param name="values">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </param>
            <param name="rowId">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Update(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteValue[],System.Int64@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </param>
            <param name="newName">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Rename(System.Data.SQLite.SQLiteVirtualTable,System.String)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.SQLiteModuleEnumerable.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.IDisposable.Dispose"/> method.  Zero if this method is
            being called from the finalizer.
            </param>
        </member>
        <member name="T:System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1">
            <summary>
            This class represents a virtual table cursor to be used with the
            <see cref="T:System.Data.SQLite.SQLiteModuleEnumerable"/> class.  It is not sealed and may
            be used as the base class for any user-defined virtual table cursor
            class that wraps an <see cref="T:System.Collections.Generic.IEnumerator`1"/> object instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1.enumerator">
            <summary>
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance provided when this
            cursor was created.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1.#ctor(System.Data.SQLite.SQLiteVirtualTable,System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="table">
            The <see cref="T:System.Data.SQLite.SQLiteVirtualTable"/> object instance associated
            with this object instance.
            </param>
            <param name="enumerator">
            The <see cref="T:System.Collections.Generic.IEnumerator`1"/> instance to expose as a virtual
            table cursor.
            </param>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1.Close">
            <summary>
            Closes the virtual table cursor.  This method must not throw any
            exceptions.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.IDisposable.Dispose"/> method.  Zero if this method is
            being called from the finalizer.
            </param>
        </member>
        <member name="P:System.Data.SQLite.Generic.SQLiteVirtualTableCursorEnumerator`1.System#Collections#Generic#IEnumerator{T}#Current">
            <summary>
            Returns the value for the current row of the virtual table cursor
            using the <see cref="P:System.Collections.Generic.IEnumerator`1.Current"/> property of the
            <see cref="T:System.Collections.Generic.IEnumerator`1"/> object instance.
            </summary>
        </member>
        <member name="T:System.Data.SQLite.Generic.SQLiteModuleEnumerable`1">
            <summary>
            This class implements a virtual table module that exposes an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> object instance as a read-only virtual
            table.  It is not sealed and may be used as the base class for any
            user-defined virtual table class that wraps an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> object instance.
            </summary>
        </member>
        <member name="F:System.Data.SQLite.Generic.SQLiteModuleEnumerable`1.enumerable">
            <summary>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the backing
            data for the virtual table.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteModuleEnumerable`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="name">
            The name of the module.  This parameter cannot be null.
            </param>
            <param name="enumerable">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance to expose as a virtual
            table.  This parameter cannot be null.
            </param>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteModuleEnumerable`1.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </summary>
            <param name="table">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </param>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Open(System.Data.SQLite.SQLiteVirtualTable,System.Data.SQLite.SQLiteVirtualTableCursor@)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteModuleEnumerable`1.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)">
            <summary>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </summary>
            <param name="cursor">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <param name="context">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <param name="index">
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </param>
            <returns>
            See the <see cref="M:System.Data.SQLite.ISQLiteManagedModule.Column(System.Data.SQLite.SQLiteVirtualTableCursor,System.Data.SQLite.SQLiteContext,System.Int32)"/> method.
            </returns>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteModuleEnumerable`1.CheckDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if this object
            instance has been disposed.
            </summary>
        </member>
        <member name="M:System.Data.SQLite.Generic.SQLiteModuleEnumerable`1.Dispose(System.Boolean)">
            <summary>
            Disposes of this object instance.
            </summary>
            <param name="disposing">
            Non-zero if this method is being called from the
            <see cref="M:System.IDisposable.Dispose"/> method.  Zero if this method is
            being called from the finalizer.
            </param>
        </member>
    </members>
</doc>
